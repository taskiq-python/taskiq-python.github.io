import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as k,c as m,e as o,b as n,d as s,w as a,a as c}from"./app-5bc69eb1.js";const v={},b=c('<h1 id="architecture-overview" tabindex="-1"><a class="header-anchor" href="#architecture-overview" aria-hidden="true">#</a> Architecture overview</h1><p>Taskiq has very simple structure. On the client side all messages are sent by <code>kickers</code> using <code>brokers</code>. On the worker side all messages received by the <code>broker</code> and results are stored in result backends.</p><p>On the sequence diagram it looks like this:</p><div class="hint-container info"><p class="hint-container-title">Cool tip!</p><p>If you use dark theme and cannot see words on diagram, try switching to light theme and back to dark.</p></div>',4),h=n("p",null,"Let's discuss every component.",-1),y=n("h2",{id:"broker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#broker","aria-hidden":"true"},"#"),s(" Broker")],-1),g=n("strong",null,"must",-1),w=n("code",null,"AsyncBroker",-1),f={href:"https://github.com/taskiq-python/taskiq/blob/master/taskiq/abc/broker.py",target:"_blank",rel:"noopener noreferrer"},_=c(`<p><code>AsyncBroker</code> class has two main methods to implement:</p><ul><li>kick</li><li>listen</li></ul><p>The <code>kick</code> method puts the message in the external system. For example, it may call the <code>PUB</code> command in Redis.</p><p>The <code>listen</code> is a method with an infinite loop that reads messages from the external system and creates a task for processing messages. For example, it subscribes to the Redis channel and waits for new messages.</p><h2 id="kicker" tabindex="-1"><a class="header-anchor" href="#kicker" aria-hidden="true">#</a> Kicker</h2><p>Kicker is an object that used to form a message for broker. This class isn&#39;t extendable. To form a message kicker uses labels, task name and arguments.</p><p>When you call the <code>task.kiq</code> on a task, it generates a Kicker instance and is a shortening for the <code>task.kicker().kiq(...)</code>. You can use kicker to change broker, add labels, or even change task_id.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>brokers<span class="token punctuation">.</span>inmemory_broker <span class="token keyword">import</span> InMemoryBroker

broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>
second_broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;My lovely task.&quot;&quot;&quot;</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># This task was initially assigned to broker,</span>
    <span class="token comment"># but this time it is going to be sent using</span>
    <span class="token comment"># the second broker with additional label \`delay=1\`.</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> my_async_task<span class="token punctuation">.</span>kicker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_broker<span class="token punctuation">(</span>second_broker<span class="token punctuation">)</span><span class="token punctuation">.</span>with_labels<span class="token punctuation">(</span>delay<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">.</span>get_result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="messages" tabindex="-1"><a class="header-anchor" href="#messages" aria-hidden="true">#</a> Messages</h2><p>Every message has labels. You can define labels using <code>task</code> decorator, or you can add them using kicker.</p><p>For example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>my_label<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> label2<span class="token operator">=</span><span class="token string">&quot;something&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;My lovely task.&quot;&quot;&quot;</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> my_async_task<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s equivalent to this</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;My lovely task.&quot;&quot;&quot;</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> my_async_task<span class="token punctuation">.</span>kicker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_labels<span class="token punctuation">(</span>
        my_label<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
        label2<span class="token operator">=</span><span class="token string">&quot;something&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also you can assign custom task names using decorator. This is useful to be sure that task names are unique and resolved correctly. Also it may be useful to balance message routing in some brokers.</p><p>for example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>task_name<span class="token operator">=</span><span class="token string">&quot;my_tasks.add_one&quot;</span><span class="token punctuation">,</span> label1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;My lovely task.&quot;&quot;&quot;</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result-backend" tabindex="-1"><a class="header-anchor" href="#result-backend" aria-hidden="true">#</a> Result backend</h2>`,18),q=n("code",null,"TaskiqResult",-1),x={href:"https://github.com/taskiq-python/taskiq/blob/master/taskiq/result.py",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"AsyncResultBackend",-1),A={href:"https://github.com/taskiq-python/taskiq/blob/master/taskiq/abc/result_backend.py",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"DummyResultBackend",-1),B=n("code",null,"InMemoryBroker",-1),C=n("code",null,"InMemoryResultBackend",-1),I=c(`<h2 id="workers" tabindex="-1"><a class="header-anchor" href="#workers" aria-hidden="true">#</a> Workers</h2><p>Taskiq has a command line interface to run workers. It&#39;s simple to get it to work.</p><p>You have to provide a path to your broker. As an example, if you want to start listening to new tasks with a broker that is stored in a variable <code>my broker</code> in the module <code>my_project.broker</code> run this in your terminal:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>taskiq worker my_project.broker:mybroker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>taskiq can discover task modules to import automatically, if you add the <code>-fsd</code> (file system discover) option.</p><p>Let&#39;s assume we have project with the following structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test_project
├── broker.py
├── submodule
│   └── tasks.py
└── utils
    └── tasks.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can specify all tasks modules to import manually.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>taskiq worker test_project.broker:broker test_project.submodule.tasks test_project.utils.tasks
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Or you can let taskiq find all python modules named tasks in current directory recursively.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>taskiq worker test_project.broker:broker <span class="token parameter variable">-fsd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),j=c(`<div class="hint-container info"><p class="hint-container-title">Cool info</p><p>By default we start two processes, if you want to change this value, please take a look at <code>--help</code>.</p></div><h2 id="middlewares" tabindex="-1"><a class="header-anchor" href="#middlewares" aria-hidden="true">#</a> Middlewares</h2><p>Middlewares are used to modify message, or take some actions before or after task is complete.</p><p>You can write your own middlewares by subclassing the <code>taskiq.abc.middleware.TaskiqMiddleware</code>.</p><p>Every hook can be sync or async. Taskiq will execute it.</p><p>For example, this is a valid middleware.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>middleware <span class="token keyword">import</span> TaskiqMiddleware
<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>message <span class="token keyword">import</span> TaskiqMessage


<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span><span class="token punctuation">(</span>TaskiqMiddleware<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">pre_send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&quot;TaskiqMessage&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TaskiqMessage<span class="token punctuation">:</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        message<span class="token punctuation">.</span>labels<span class="token punctuation">[</span><span class="token string">&quot;my_label&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;my_value&quot;</span>
        <span class="token keyword">return</span> message

    <span class="token keyword">def</span> <span class="token function">post_send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&quot;TaskiqMessage&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Message </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">}</span></span><span class="token string"> was sent.&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are methods you can implement in the order they are executed:</p><ul><li><code>pre_send</code> - executed on the client side before the message is sent. Here you can modify the message.</li><li><code>post_send</code> - executed right after the message was sent.</li><li><code>pre_execute</code> - executed on the worker side after the message was received by a worker and before its execution.</li><li><code>on_error</code> - executed after the task was executed if the exception was found.</li><li><code>post_execute</code> - executed after the message was executed.</li><li><code>post_save</code> - executed after the result was saved in the result backend.</li></ul><p>You can use sync or async hooks without changing anything, but adding async to the hook signature.</p><div class="hint-container warning"><p class="hint-container-title">important note</p><p>If exception happens in middlewares it won&#39;t be caught. Please ensure that you have try\\except for all edge cases of your middleware.</p></div><p>Middlewares can store information in <code>message.labels</code> for later use. For example <code>SimpleRetryMiddleware</code> uses labels to remember number of failed attempts.</p><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><p>Context is a useful class with some additional functions. You can use context to get broker that runs this task, from inside of the task.</p><p>Or it has ability to control the flow of execution. Here&#39;s example of how to get the context.</p>`,15),R=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" taskiq "),n("span",{class:"token keyword"},"import"),s(" Context"),n("span",{class:"token punctuation"},","),s(" TaskiqDepends"),n("span",{class:"token punctuation"},","),s(` ZeroMQBroker

broker `),n("span",{class:"token operator"},"="),s(" ZeroMQBroker"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`


`),n("span",{class:"token decorator annotation punctuation"},[s("@broker"),n("span",{class:"token punctuation"},"."),s("task")]),s(`
`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"my_task"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},":"),s(" Annotated"),n("span",{class:"token punctuation"},"["),s("Context"),n("span",{class:"token punctuation"},","),s(" TaskiqDepends"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" taskiq "),n("span",{class:"token keyword"},"import"),s(" Context"),n("span",{class:"token punctuation"},","),s(" TaskiqDepends"),n("span",{class:"token punctuation"},","),s(` ZeroMQBroker

broker `),n("span",{class:"token operator"},"="),s(" ZeroMQBroker"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`


`),n("span",{class:"token decorator annotation punctuation"},[s("@broker"),n("span",{class:"token punctuation"},"."),s("task")]),s(`
`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"my_task"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},":"),s(" Context "),n("span",{class:"token operator"},"="),s(" TaskiqDepends"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("p",null,"Also through contexts you can reject or requeue a task. It's easy as this:",-1),N=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" typing "),n("span",{class:"token keyword"},"import"),s(` Annotated

`),n("span",{class:"token decorator annotation punctuation"},[s("@broker"),n("span",{class:"token punctuation"},"."),s("task")]),s(`
`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"my_task"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},":"),s(" Annotated"),n("span",{class:"token punctuation"},"["),s("Context"),n("span",{class:"token punctuation"},","),s(" TaskiqDepends"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
   `),n("span",{class:"token keyword"},"await"),s(" context"),n("span",{class:"token punctuation"},"."),s("requeue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token decorator annotation punctuation"},[s("@broker"),n("span",{class:"token punctuation"},"."),s("task")]),s(`
`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"my_task"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},":"),s(" Context "),n("span",{class:"token operator"},"="),s(" TaskiqDepends"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
   `),n("span",{class:"token keyword"},"await"),s(" context"),n("span",{class:"token punctuation"},"."),s("requeue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("p",null,[s("Calling "),n("code",null,"requeue"),s(" or "),n("code",null,"reject"),s(" stops task execution and either drops the message, or puts it back to the queue.")],-1),U=n("p",null,"Also, with context you'll be able to get current message that was received by the broker or even instance of a broker who received a message. This may be useful for lib developers.",-1);function V(F,Q){const r=i("Mermaid"),p=i("ExternalLinkIcon"),u=i("RouterLink"),l=i("Tabs");return k(),m("div",null,[b,o(r,{id:"mermaid-14",code:"eJyVkL0OwjAMhHeewiNIgASIAQYGfiYmYECMaXqUiDYRToJ4fEygqGVjiZTc57tzPG4RVmNtVMGq6hAxdCAusu5oNurTeDyRYzrtiWJdALEpLoHcmU4uMmmXY06r0sAG8ibHULivQoPFgrZGX8FzUt6jykpQBe9VAQHfUqKW7BJ1gM0bhNz+qFSbHB2/fOs+7+cUs3kEsFUl7SKiNP+Ja8utYntomPsLatjV4uYBHaVJUP7aJvbwsQyUKdnU5hKo7oJdpHQSviu2uTTa+OBPeHPwCc7mjN4="}),h,y,n("p",null,[s("Brokers are the most critical element of the taskiq. Every broker "),g,s(" implement the "),w,s(" abstract class from "),n("a",f,[s("taskiq.abc.broker"),o(p)]),s(" to make things work.")]),_,n("p",null,[s("Result backend is used to store and get results of the execution. Results have type "),q,s(" from "),n("a",x,[s("taskiq.result"),o(p)]),s(".")]),n("p",null,[s("Every ResultBackend must implement "),M,s(" from "),n("a",A,[s("taskiq.abc.result_backend"),o(p)]),s(". By default, brokers use "),T,s(". It doesn't do anything and cannot be used in real-world scenarios. But some brokers can override it. For example "),B,s(" by default uses "),C,s(" and returns correct results.")]),I,n("p",null,[s("If you have uvloop installed, taskiq will automatically install new policies to event loop. You can get more info about the CLI in the "),o(u,{to:"/guide/cli.html"},{default:a(()=>[s("CLI")]),_:1}),s(" section.")]),j,o(l,{id:"189",data:[{id:"Annotated 3.10+"},{id:"default values"}]},{title0:a(({value:e,isActive:t})=>[s("Annotated 3.10+")]),title1:a(({value:e,isActive:t})=>[s("default values")]),tab0:a(({value:e,isActive:t})=>[R]),tab1:a(({value:e,isActive:t})=>[Y]),_:1}),H,o(l,{id:"200",data:[{id:"Annotated 3.10+"},{id:"default values"}]},{title0:a(({value:e,isActive:t})=>[s("Annotated 3.10+")]),title1:a(({value:e,isActive:t})=>[s("default values")]),tab0:a(({value:e,isActive:t})=>[N]),tab1:a(({value:e,isActive:t})=>[L]),_:1}),E,U])}const P=d(v,[["render",V],["__file","architecture-overview.html.vue"]]);export{P as default};
