import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as h,b as e,e as a,w as t,a as o,d as s,r as d}from"./app.ab55efd4.js";const k={},b=o('<h1 id="available-brokers" tabindex="-1"><a class="header-anchor" href="#available-brokers" aria-hidden="true">#</a> Available brokers</h1><p>In this section we&#39;ll list officially supported brokers.</p><h2 id="inmemorybroker" tabindex="-1"><a class="header-anchor" href="#inmemorybroker" aria-hidden="true">#</a> InMemoryBroker</h2><p>This is a special broker for local development. It uses the same functions to execute tasks, but all tasks are executed locally in the current thread. By default it uses <code>InMemoryResultBackend</code> but this can be overiden.</p><h2 id="zeromqbroker" tabindex="-1"><a class="header-anchor" href="#zeromqbroker" aria-hidden="true">#</a> ZeroMQBroker</h2>',5),_=s("This broker uses "),m={href:"https://zeromq.org/",target:"_blank",rel:"noopener noreferrer"},f=s("ZMQ"),v=s(" to comunicate between worker and client processes. It's suitable for small projects with only ONE worker process, because of the ZMQ architecture."),y=e("p",null,[s("It publishes messages on the local port. All worker processes are reading messages from this port. If you run many worker processes, all tasks will be executed "),e("code",null,"N"),s(" times, where "),e("code",null,"N"),s(" is the total number of worker processes.")],-1),g=e("div",{class:"custom-container danger"},[e("p",{class:"custom-container-title"},"Be careful!"),e("p",null,[s("If you choose this type of broker, please run taskiq with "),e("code",null,"-w 1"),s(" parameter, otherwise you may encounter undefined behaviour.")])],-1),q=s("To run this broker please install the "),w={href:"https://pypi.org/project/pyzmq/",target:"_blank",rel:"noopener noreferrer"},x=s("pyzmq"),T=s(" lib. Or you can taskiq with "),A=e("code",null,"zmq",-1),I=s(" extra."),B=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[s("pip "),e("span",{class:"token function"},"install"),s(` pyzmq
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),M=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[s("pip "),e("span",{class:"token function"},"install"),s(),e("span",{class:"token string"},'"taskiq[zmq]"'),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),E=o(`<h2 id="async-shared-broker-and-shared-tasks" tabindex="-1"><a class="header-anchor" href="#async-shared-broker-and-shared-tasks" aria-hidden="true">#</a> Async shared broker and shared tasks</h2><p>This is also a special broker. You cannot use it directly. It&#39;s used to create shared tasks. These tasks can be imported along with user defined tasks. To define a shared task please use this broker.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>brokers<span class="token punctuation">.</span>shared_broker <span class="token keyword">import</span> async_shared_broker

<span class="token decorator annotation punctuation">@async_shared_broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To kiq this task you have to options:</p><ul><li>Explicitly define broker using kicker for this kiq;</li><li>Add default broker for all shared tasks.</li></ul>`,5),z=e("div",{class:"language-python ext-py line-numbers-mode"},[e("pre",{class:"language-python"},[e("code",null,[e("span",{class:"token keyword"},"from"),s(" taskiq"),e("span",{class:"token punctuation"},"."),s("brokers"),e("span",{class:"token punctuation"},"."),s("shared_broker "),e("span",{class:"token keyword"},"import"),s(` async_shared_broker

async_shared_broker`),e("span",{class:"token punctuation"},"."),s("default_broker"),e("span",{class:"token punctuation"},"("),s("broker"),e("span",{class:"token punctuation"},")"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),N=e("div",{class:"language-python ext-py line-numbers-mode"},[e("pre",{class:"language-python"},[e("code",null,[e("span",{class:"token keyword"},"await"),s(" my_task"),e("span",{class:"token punctuation"},"."),s("kicker"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("with_broker"),e("span",{class:"token punctuation"},"("),s("broker"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("kiq"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Q=e("h2",{id:"aiopikabroker-for-rabbitmq",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#aiopikabroker-for-rabbitmq","aria-hidden":"true"},"#"),s(" AioPikaBroker (for RabbitMQ)")],-1),R=s("This broker is not part of the core taskiq lib. You can install it as a separate package "),Y={href:"https://pypi.org/project/taskiq-aio-pika/",target:"_blank",rel:"noopener noreferrer"},Z=s("taskiq-aio-pika"),j=s("."),V=o(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-aio-pika
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),D=s("You can read more about parameters and abilities of this broker in "),O={href:"https://github.com/taskiq-python/taskiq-aio-pika",target:"_blank",rel:"noopener noreferrer"},C=s("README.md"),L=s("."),P=e("h2",{id:"redis-broker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-broker","aria-hidden":"true"},"#"),s(" Redis broker")],-1),S=s("This broker is not part of the core taskiq lib. You can install it as a separate package "),F={href:"https://pypi.org/project/taskiq-redis/",target:"_blank",rel:"noopener noreferrer"},G=s("taskiq-redis"),H=s("."),J=o(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),K=s("You can read more about parameters and abilities of this broker in "),U={href:"https://github.com/taskiq-python/taskiq-redis",target:"_blank",rel:"noopener noreferrer"},W=s("README.md"),X=s(".");function $(ee,se){const n=d("ExternalLinkIcon"),c=d("Tabs");return u(),h("div",null,[b,e("p",null,[_,e("a",m,[f,a(n)]),v]),y,g,e("p",null,[q,e("a",w,[x,a(n)]),T,A,I]),a(c,{data:[{title:"Only PyZMQ"},{title:"Taskiq with ZMQ"}]},{tab0:t(({title:r,value:i,isActive:l})=>[B]),tab1:t(({title:r,value:i,isActive:l})=>[M]),_:1}),E,a(c,{data:[{title:"Defining default broker"},{title:"using kicker"}]},{tab0:t(({title:r,value:i,isActive:l})=>[z]),tab1:t(({title:r,value:i,isActive:l})=>[N]),_:1}),Q,e("p",null,[R,e("a",Y,[Z,a(n)]),j]),V,e("p",null,[D,e("a",O,[C,a(n)]),L]),P,e("p",null,[S,e("a",F,[G,a(n)]),H]),J,e("p",null,[K,e("a",U,[W,a(n)]),X])])}const te=p(k,[["render",$],["__file","available-brokers.html.vue"]]);export{te as default};
