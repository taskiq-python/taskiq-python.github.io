import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as e}from"./app.75310109.js";const t={},o=e(`<h1 id="brokers" tabindex="-1"><a class="header-anchor" href="#brokers" aria-hidden="true">#</a> Brokers</h1><p>To add a new broker you need to implement two methods <code>kick</code> and <code>listen</code> of the <code>taskiq.abc.broker.AsyncBroker</code> abstract class. But along with them we have helper methods. Such as shutdown and startup.</p><p>Here is a template for new brokers:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Callable<span class="token punctuation">,</span> Coroutine<span class="token punctuation">,</span> Optional<span class="token punctuation">,</span> TypeVar

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> AsyncBroker<span class="token punctuation">,</span> AsyncResultBackend<span class="token punctuation">,</span> BrokerMessage

_T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&quot;_T&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MyBroker</span><span class="token punctuation">(</span>AsyncBroker<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        result_backend<span class="token punctuation">:</span> <span class="token string">&quot;Optional[AsyncResultBackend[_T]]&quot;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        task_id_generator<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># Please call this super and allow people to use their result_backends.</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>result_backend<span class="token punctuation">,</span> task_id_generator<span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># Here you can do some startup magic.</span>
        <span class="token comment"># Like opening a connection.</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># Here you can perform shutdown operations.</span>
        <span class="token comment"># Like closing connections.</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">kick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> BrokerMessage<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># Send a message.</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">listen</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        callback<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>BrokerMessage<span class="token punctuation">]</span><span class="token punctuation">,</span> Coroutine<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Any<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token comment"># Get new message.</span>
            <span class="token comment"># new_message = ...</span>
            <span class="token comment"># Create a new task to execute.</span>
            <span class="token comment"># loop.create_task(callback(new_message))</span>
            <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conventions" tabindex="-1"><a class="header-anchor" href="#conventions" aria-hidden="true">#</a> Conventions</h2><p>For brokers, we have several conventions. It&#39;s good if your broker implements them. These rules are optional, and it&#39;s ok if your broker doesn&#39;t implement them.</p><ol><li>If the message has the <code>delay</code> label with int or float number, this task&#39;s <code>execution</code> must be delayed with the same number of seconds as in the delay label.</li><li>If the message has the <code>priority</code> label, this message must be sent with priority. Tasks with higher priorities are executed faster.</li></ol>`,7),p=[o];function c(l,i){return s(),a("div",null,p)}const k=n(t,[["render",c],["__file","broker.html.vue"]]);export{k as default};
