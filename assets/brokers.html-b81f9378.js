import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as u,c as h,b as e,e as a,d as s,w as r,a as t}from"./app-9c33f9a8.js";const k={},b=t('<h1 id="available-brokers" tabindex="-1"><a class="header-anchor" href="#available-brokers" aria-hidden="true">#</a> Available brokers</h1><p>In this section we&#39;ll list officially supported brokers.</p><h2 id="inmemorybroker" tabindex="-1"><a class="header-anchor" href="#inmemorybroker" aria-hidden="true">#</a> InMemoryBroker</h2><p>This is a special broker for local development. It uses the same functions to execute tasks, but all tasks are executed locally in the current thread. By default it uses <code>InMemoryResultBackend</code> but this can be overridden.</p><h2 id="zeromqbroker" tabindex="-1"><a class="header-anchor" href="#zeromqbroker" aria-hidden="true">#</a> ZeroMQBroker</h2>',5),m={href:"https://zeromq.org/",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,[a("It publishes messages on the local port. All worker processes are reading messages from this port. If you run many worker processes, all tasks will be executed "),e("code",null,"N"),a(" times, where "),e("code",null,"N"),a(" is the total number of worker processes.")],-1),v=e("div",{class:"hint-container danger"},[e("p",{class:"hint-container-title"},"Be careful!"),e("p",null,[a("If you choose this type of broker, please run taskiq with "),e("code",null,"-w 1"),a(" parameter, otherwise you may encounter undefined behavior.")])],-1),f={href:"https://pypi.org/project/pyzmq/",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"zmq",-1),y=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("pip "),e("span",{class:"token function"},"install"),a(` pyzmq
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),q=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("pip "),e("span",{class:"token function"},"install"),a(),e("span",{class:"token string"},'"taskiq[zmq]"'),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),x=t(`<h2 id="async-shared-broker-and-shared-tasks" tabindex="-1"><a class="header-anchor" href="#async-shared-broker-and-shared-tasks" aria-hidden="true">#</a> Async shared broker and shared tasks</h2><p>This is also a special broker. You cannot use it directly. It&#39;s used to create shared tasks. These tasks can be imported along with user defined tasks. To define a shared task please use this broker.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>brokers<span class="token punctuation">.</span>shared_broker <span class="token keyword">import</span> async_shared_broker

<span class="token decorator annotation punctuation">@async_shared_broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To kiq this task you have to options:</p><ul><li>Explicitly define broker using kicker for this kiq;</li><li>Add default broker for all shared tasks.</li></ul>`,5),w=e("div",{class:"language-python line-numbers-mode","data-ext":"py"},[e("pre",{class:"language-python"},[e("code",null,[e("span",{class:"token keyword"},"from"),a(" taskiq"),e("span",{class:"token punctuation"},"."),a("brokers"),e("span",{class:"token punctuation"},"."),a("shared_broker "),e("span",{class:"token keyword"},"import"),a(` async_shared_broker

async_shared_broker`),e("span",{class:"token punctuation"},"."),a("default_broker"),e("span",{class:"token punctuation"},"("),a("broker"),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("div",{class:"language-python line-numbers-mode","data-ext":"py"},[e("pre",{class:"language-python"},[e("code",null,[e("span",{class:"token keyword"},"await"),a(" my_task"),e("span",{class:"token punctuation"},"."),a("kicker"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),a("with_broker"),e("span",{class:"token punctuation"},"("),a("broker"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),a("kiq"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),A=e("h2",{id:"custom-brokers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#custom-brokers","aria-hidden":"true"},"#"),a(" Custom brokers")],-1),I=e("p",null,"These brokers are not parts of the core taskiq lib. You can install them as a separate packages.",-1),B=e("p",null,"You can read more about parameters and abilities of these brokers in README.md of each repo.",-1),M=e("h3",{id:"aiopikabroker-for-rabbitmq",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#aiopikabroker-for-rabbitmq","aria-hidden":"true"},"#"),a(" AioPikaBroker (for RabbitMQ)")],-1),z={href:"https://github.com/taskiq-python/taskiq-aio-pika",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-aio-pika
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="redis-broker" tabindex="-1"><a class="header-anchor" href="#redis-broker" aria-hidden="true">#</a> Redis broker</h3>`,2),E={href:"https://github.com/taskiq-python/taskiq-redis",target:"_blank",rel:"noopener noreferrer"},Q=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="nats-broker" tabindex="-1"><a class="header-anchor" href="#nats-broker" aria-hidden="true">#</a> NATS broker</h3>`,2),j={href:"https://github.com/taskiq-python/taskiq-nats",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-nats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1);function Z(R,V){const n=d("ExternalLinkIcon"),c=d("Tabs");return u(),h("div",null,[b,e("p",null,[a("This broker uses "),e("a",m,[a("ZMQ"),s(n)]),a(" to communicate between worker and client processes. It's suitable for small projects with only ONE worker process, because of the ZMQ architecture.")]),_,v,e("p",null,[a("To run this broker please install the "),e("a",f,[a("pyzmq"),s(n)]),a(" lib. Or you can taskiq with "),g,a(" extra.")]),s(c,{id:"29",data:[{title:"Only PyZMQ"},{title:"Taskiq with ZMQ"}]},{tab0:r(({title:o,value:i,isActive:l})=>[y]),tab1:r(({title:o,value:i,isActive:l})=>[q]),_:1}),x,s(c,{id:"59",data:[{title:"Defining default broker"},{title:"using kicker"}]},{tab0:r(({title:o,value:i,isActive:l})=>[w]),tab1:r(({title:o,value:i,isActive:l})=>[T]),_:1}),A,I,B,M,e("p",null,[a("Project link: "),e("a",z,[a("taskiq-aio-pika"),s(n)]),a(".")]),N,e("p",null,[a("Project link: "),e("a",E,[a("taskiq-redis"),s(n)]),a(".")]),Q,e("p",null,[a("Project link: "),e("a",j,[a("taskiq-nats"),s(n)]),a(".")]),P])}const Y=p(k,[["render",Z],["__file","brokers.html.vue"]]);export{Y as default};
