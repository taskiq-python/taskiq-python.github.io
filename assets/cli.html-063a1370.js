import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as u,e as r,w as s,b as e,d as a,a as n}from"./app-59ee3ce3.js";const h={},m=n(`<h1 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h1><p>Core library comes with CLI program called <code>taskiq</code>, which is used to run different subcommands.</p><p>By default taskiq is shipped with only two commands: <code>worker</code> and <code>scheduler</code>. You can search for more taskiq plugins using pypi. Some plugins may add new commands to taskiq.</p><h2 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> Worker</h2><p>To run worker process, you have to specify the broker you want to use and modules with defined tasks. Like this:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>taskiq worker mybroker:broker_var my_project.module1 my_project.module2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="auto-importing" tabindex="-1"><a class="header-anchor" href="#auto-importing" aria-hidden="true">#</a> Auto importing</h3><p>Enumerating all modules with tasks is not an option sometimes. That&#39;s why taskiq can auto-discover tasks in current directory recursively.</p><p>We have two options for this:</p><ul><li><code>--tasks-pattern</code> or <code>-tp</code>. It&#39;s a name of files to import. By default is searches for all <code>tasks.py</code> files.</li><li><code>--fs-discover</code> or <code>-fsd</code>. This option enables search of task files in current directory recursively, using the given pattern.</li></ul><h3 id="type-casts" tabindex="-1"><a class="header-anchor" href="#type-casts" aria-hidden="true">#</a> Type casts</h3><p>One of features taskiq have is automatic type casts. For example you have a type-hinted task like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> val <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;ll call <code>task.kiq(&quot;2&quot;)</code> you&#39;ll get 3 as the returned value. Because we parse signatures of tasks and cast incoming parameters to target types. If type-cast fails you won&#39;t throw any error. It just leave the value as is. That functionality allows you to use pydantic models, or dataclasses as the input parameters.</p><p>To disable this pass the <code>--no-parse</code> option to the taskiq.</p><h3 id="hot-reload" tabindex="-1"><a class="header-anchor" href="#hot-reload" aria-hidden="true">#</a> Hot reload</h3><p>This is annoying to restart workers every time you modify tasks. That&#39;s why taskiq supports hot-reload. Reload is unavailable by default. To enable this feature install taskiq with <code>reload</code> extra.</p>`,17),k=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("pip "),e("span",{class:"token function"},"install"),a(),e("span",{class:"token string"},'"taskiq[reload]"'),a(`
`)])])],-1),f=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("poetry "),e("span",{class:"token function"},"add"),a(" taskiq "),e("span",{class:"token parameter variable"},"-E"),a(` reload
`)])])],-1),y=n('<p>To enable this option simply pass the <code>--reload</code> or <code>-r</code> option to worker taskiq CLI.</p><p>Also this option supports <code>.gitignore</code> files. If you have such file in your directory, it won&#39;t reload worker when you modify ignored files. To disable this functionality pass <code>--do-not-use-gitignore</code> option.</p><h3 id="other-parameters" tabindex="-1"><a class="header-anchor" href="#other-parameters" aria-hidden="true">#</a> Other parameters</h3><ul><li><code>--no-configure-logging</code> - disables default logging configuration for workers.</li><li><code>--max-async-tasks</code> - maximum number of simultaneously running async tasks.</li><li><code>--max-prefetch</code> - number of tasks to be prefetched before execution. (Useful for systems with high message rates, but brokers should support acknowledgements).</li><li><code>--max-threadpool-threads</code> - number of threads for sync function exection.</li><li><code>--no-propagate-errors</code> - if this parameter is enabled, exceptions won&#39;t be thrown in generator dependencies.</li><li><code>--receiver</code> - python path to custom receiver class.</li><li><code>--receiver_arg</code> - custom args for receiver.</li></ul><h2 id="scheduler" tabindex="-1"><a class="header-anchor" href="#scheduler" aria-hidden="true">#</a> Scheduler</h2>',5),g=n(`<p>To run it simply run</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>taskiq scheduler <span class="token operator">&lt;</span>path to scheduler<span class="token operator">&gt;</span> <span class="token punctuation">[</span>optional module to import<span class="token punctuation">]</span><span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For example</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>taskiq scheduler my_project<span class="token punctuation">.</span>broker<span class="token punctuation">:</span>scheduler my_project<span class="token punctuation">.</span>module1 my_project<span class="token punctuation">.</span>module2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h3><p>Path to scheduler is the only required argument.</p><ul><li><code>--tasks-pattern</code> or <code>-tp</code>. It&#39;s a name of files to import. By default is searches for all <code>tasks.py</code> files.</li><li><code>--fs-discover</code> or <code>-fsd</code>. This option enables search of task files in current directory recursively, using the given pattern.</li><li><code>--log-level</code> is used to set a log level.</li></ul>`,7);function v(b,w){const c=i("Tabs"),d=i("RouterLink");return p(),u("div",null,[m,r(c,{id:"56",data:[{id:"pip"},{id:"poetry"}]},{title0:s(({value:t,isActive:o})=>[a("pip")]),title1:s(({value:t,isActive:o})=>[a("poetry")]),tab0:s(({value:t,isActive:o})=>[k]),tab1:s(({value:t,isActive:o})=>[f]),_:1}),y,e("p",null,[a("Scheduler is used to schedule tasks as described in "),r(d,{to:"/guide/scheduling-tasks.html"},{default:s(()=>[a("Scheduling tasks")]),_:1}),a(" section.")]),g])}const q=l(h,[["render",v],["__file","cli.html.vue"]]);export{q as default};
