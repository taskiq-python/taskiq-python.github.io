import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as m,b as n,e as s,d as a,w as t,a as c}from"./app-d3ed1abe.js";const k={},v=c(`<h1 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h1><p>You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it&#39;s easy to use.</p><p>At first you need to add a class that implements <code>taskiq.abc.cmd.TaskiqCMD</code> abstract class.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> argparse <span class="token keyword">import</span> ArgumentParser
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Sequence

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>cmd <span class="token keyword">import</span> TaskiqCMD


<span class="token keyword">class</span> <span class="token class-name">MyCommand</span><span class="token punctuation">(</span>TaskiqCMD<span class="token punctuation">)</span><span class="token punctuation">:</span>
    short_help <span class="token operator">=</span> <span class="token string">&quot;Demo command&quot;</span>

    <span class="token keyword">def</span> <span class="token function">exec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        parser <span class="token operator">=</span> ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>
            <span class="token string">&quot;--test&quot;</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
            default<span class="token operator">=</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;My test parameter.&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        parsed <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>exec</code> method, you should parse incoming arguments. But since all CLI arguments to taskiq are shifted you can ignore the <code>args</code> parameter.</p>`,5),b={href:"https://click.palletsprojects.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://typer.tiangolo.com/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"After you have such class, you need to add entrypoint that points to that class.",-1),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" setuptools "),n("span",{class:"token keyword"},"import"),s(` setup

setup`),n("span",{class:"token punctuation"},"("),s(`
    `),n("span",{class:"token comment"},"# ...,"),s(`
    entry_points`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token string"},"'taskiq_cli'"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token string"},"'demo = my_project.cmd:MyCommand'"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"project.entry-points.taskiq_cli"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"demo"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"my_project.cmd:MyCommand"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"tool.poetry.plugins.taskiq_cli"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"demo"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"my_project.cmd:MyCommand"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q={href:"https://packaging.python.org/en/latest/specifications/entry-points/",target:"_blank",rel:"noopener noreferrer"},x=c(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--help</span>
usage: demo <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--test TEST<span class="token punctuation">]</span>

optional arguments:
  -h, <span class="token parameter variable">--help</span>   show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">--test</span> TEST  My <span class="token builtin class-name">test</span> parameter.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--test</span> aaa
Namespace<span class="token punctuation">(</span>test<span class="token operator">=</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function w(C,T){const e=i("ExternalLinkIcon"),r=i("Tabs");return d(),m("div",null,[v,n("p",null,[s("Also, you can use your favorite tool to build CLI, like "),n("a",b,[s("click"),a(e)]),s(" or "),n("a",h,[s("typer"),a(e)]),s(".")]),g,a(r,{id:"19",data:[{title:"setuptools setup.py"},{title:"setuptools pyproject.toml"},{title:"poetry"}]},{tab0:t(({title:o,value:l,isActive:p})=>[y]),tab1:t(({title:o,value:l,isActive:p})=>[_]),tab2:t(({title:o,value:l,isActive:p})=>[f]),_:1},8,["data"]),n("p",null,[s("You can read more about entry points in "),n("a",q,[s("python documentation"),a(e)]),s(". The subcommand name is the same as the name of the entry point you've created.")]),x])}const j=u(k,[["render",w],["__file","cli.html.vue"]]);export{j as default};
