import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as u,c as d,b as s,d as n,e as o,w as a,a as i}from"./app-e0971bfc.js";const m={},k=i(`<h1 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h1><p>You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it&#39;s easy to use.</p><p>At first you need to add a class that implements <code>taskiq.abc.cmd.TaskiqCMD</code> abstract class.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> argparse <span class="token keyword">import</span> ArgumentParser
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Sequence

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>cmd <span class="token keyword">import</span> TaskiqCMD


<span class="token keyword">class</span> <span class="token class-name">MyCommand</span><span class="token punctuation">(</span>TaskiqCMD<span class="token punctuation">)</span><span class="token punctuation">:</span>
    short_help <span class="token operator">=</span> <span class="token string">&quot;Demo command&quot;</span>

    <span class="token keyword">def</span> <span class="token function">exec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        parser <span class="token operator">=</span> ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>
            <span class="token string">&quot;--test&quot;</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
            default<span class="token operator">=</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;My test parameter.&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        parsed <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>exec</code> method, you should parse incoming arguments. But since all CLI arguments to taskiq are shifted you can ignore the <code>args</code> parameter.</p>`,5),v={href:"https://click.palletsprojects.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://typer.tiangolo.com/",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,"After you have such class, you need to add entrypoint that points to that class.",-1),g=s("div",{class:"language-python line-numbers-mode","data-ext":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"from"),n(" setuptools "),s("span",{class:"token keyword"},"import"),n(` setup

setup`),s("span",{class:"token punctuation"},"("),n(`
    `),s("span",{class:"token comment"},"# ...,"),n(`
    entry_points`),s("span",{class:"token operator"},"="),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token string"},"'taskiq_cli'"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token punctuation"},"["),n(`
            `),s("span",{class:"token string"},"'demo = my_project.cmd:MyCommand'"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token punctuation"},"]"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},")"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),y=s("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[s("pre",{class:"language-toml"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token table class-name"},"project.entry-points.taskiq_cli"),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token key property"},"demo"),n(),s("span",{class:"token punctuation"},"="),n(),s("span",{class:"token string"},'"my_project.cmd:MyCommand"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_=s("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[s("pre",{class:"language-toml"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token table class-name"},"tool.poetry.plugins.taskiq_cli"),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token key property"},"demo"),n(),s("span",{class:"token punctuation"},"="),n(),s("span",{class:"token string"},'"my_project.cmd:MyCommand"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),f={href:"https://packaging.python.org/en/latest/specifications/entry-points/",target:"_blank",rel:"noopener noreferrer"},q=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--help</span>
usage: demo <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--test TEST<span class="token punctuation">]</span>

optional arguments:
  -h, <span class="token parameter variable">--help</span>   show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">--test</span> TEST  My <span class="token builtin class-name">test</span> parameter.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--test</span> aaa
Namespace<span class="token punctuation">(</span>test<span class="token operator">=</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(w,A){const l=p("ExternalLinkIcon"),c=p("Tabs");return u(),d("div",null,[k,s("p",null,[n("Also, you can use your favorite tool to build CLI, like "),s("a",v,[n("click"),o(l)]),n(" or "),s("a",b,[n("typer"),o(l)]),n(".")]),h,o(c,{id:"19",data:[{id:"setuptools setup.py"},{id:"setuptools pyproject.toml"},{id:"poetry"}]},{title0:a(({value:e,isActive:t})=>[n("setuptools setup.py")]),title1:a(({value:e,isActive:t})=>[n("setuptools pyproject.toml")]),title2:a(({value:e,isActive:t})=>[n("poetry")]),tab0:a(({value:e,isActive:t})=>[g]),tab1:a(({value:e,isActive:t})=>[y]),tab2:a(({value:e,isActive:t})=>[_]),_:1},8,["data"]),s("p",null,[n("You can read more about entry points in "),s("a",f,[n("python documentation"),o(l)]),n(". The subcommand name is the same as the name of the entry point you've created.")]),q])}const M=r(m,[["render",x],["__file","cli.html.vue"]]);export{M as default};
