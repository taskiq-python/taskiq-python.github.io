import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as u,c as d,b as s,d as n,e as o,w as a,a as l}from"./app-Lulzgzf0.js";const m={},k=l(`<h1 id="cli" tabindex="-1"><a class="header-anchor" href="#cli"><span>CLI</span></a></h1><p>You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it&#39;s easy to use.</p><p>At first you need to add a class that implements <code>taskiq.abc.cmd.TaskiqCMD</code> abstract class.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> argparse <span class="token keyword">import</span> ArgumentParser
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Sequence

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>cmd <span class="token keyword">import</span> TaskiqCMD


<span class="token keyword">class</span> <span class="token class-name">MyCommand</span><span class="token punctuation">(</span>TaskiqCMD<span class="token punctuation">)</span><span class="token punctuation">:</span>
    short_help <span class="token operator">=</span> <span class="token string">&quot;Demo command&quot;</span>

    <span class="token keyword">def</span> <span class="token function">exec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        parser <span class="token operator">=</span> ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>
            <span class="token string">&quot;--test&quot;</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
            default<span class="token operator">=</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;My test parameter.&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        parsed <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>exec</code> method, you should parse incoming arguments. But since all CLI arguments to taskiq are shifted you can ignore the <code>args</code> parameter.</p>`,5),v={href:"https://click.palletsprojects.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://typer.tiangolo.com/",target:"_blank",rel:"noopener noreferrer"},y=s("p",null,"After you have such class, you need to add entrypoint that points to that class.",-1),h=s("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"from"),n(" setuptools "),s("span",{class:"token keyword"},"import"),n(` setup

setup`),s("span",{class:"token punctuation"},"("),n(`
    `),s("span",{class:"token comment"},"# ...,"),n(`
    entry_points`),s("span",{class:"token operator"},"="),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token string"},"'taskiq_cli'"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token punctuation"},"["),n(`
            `),s("span",{class:"token string"},"'demo = my_project.cmd:MyCommand'"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token punctuation"},"]"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},")"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=s("div",{class:"language-toml line-numbers-mode","data-ext":"toml","data-title":"toml"},[s("pre",{class:"language-toml"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token table class-name"},"project.entry-points.taskiq_cli"),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token key property"},"demo"),n(),s("span",{class:"token punctuation"},"="),n(),s("span",{class:"token string"},'"my_project.cmd:MyCommand"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_=s("div",{class:"language-toml line-numbers-mode","data-ext":"toml","data-title":"toml"},[s("pre",{class:"language-toml"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token table class-name"},"tool.poetry.plugins.taskiq_cli"),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token key property"},"demo"),n(),s("span",{class:"token punctuation"},"="),n(),s("span",{class:"token string"},'"my_project.cmd:MyCommand"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),f={href:"https://packaging.python.org/en/latest/specifications/entry-points/",target:"_blank",rel:"noopener noreferrer"},q=l(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--help</span>
usage: demo <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--test TEST<span class="token punctuation">]</span>

optional arguments:
  -h, <span class="token parameter variable">--help</span>   show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">--test</span> TEST  My <span class="token builtin class-name">test</span> parameter.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ taskiq demo <span class="token parameter variable">--test</span> aaa
Namespace<span class="token punctuation">(</span>test<span class="token operator">=</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function w(x,A){const p=c("ExternalLinkIcon"),i=c("Tabs");return u(),d("div",null,[k,s("p",null,[n("Also, you can use your favorite tool to build CLI, like "),s("a",v,[n("click"),o(p)]),n(" or "),s("a",b,[n("typer"),o(p)]),n(".")]),y,o(i,{id:"19",data:[{id:"setuptools setup.py"},{id:"setuptools pyproject.toml"},{id:"poetry"}]},{title0:a(({value:t,isActive:e})=>[n("setuptools setup.py")]),title1:a(({value:t,isActive:e})=>[n("setuptools pyproject.toml")]),title2:a(({value:t,isActive:e})=>[n("poetry")]),tab0:a(({value:t,isActive:e})=>[h]),tab1:a(({value:t,isActive:e})=>[g]),tab2:a(({value:t,isActive:e})=>[_]),_:1},8,["data"]),s("p",null,[n("You can read more about entry points in "),s("a",f,[n("python documentation"),o(p)]),n(". The subcommand name is the same as the name of the entry point you've created.")]),q])}const M=r(m,[["render",w],["__file","cli.html.vue"]]),I=JSON.parse(`{"path":"/extending-taskiq/cli.html","title":"CLI","lang":"en-US","frontmatter":{"order":4,"description":"CLI You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it's easy to use. At first you need to add a class that implements taski...","head":[["meta",{"property":"og:url","content":"https://taskiq-python.github.io/extending-taskiq/cli.html"}],["meta",{"property":"og:site_name","content":"Taskiq"}],["meta",{"property":"og:title","content":"CLI"}],["meta",{"property":"og:description","content":"CLI You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it's easy to use. At first you need to add a class that implements taski..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-05T23:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-05T23:36:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CLI\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-05T23:36:31.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1707176191000,"updatedTime":1707176191000,"contributors":[{"name":"Pavel Kirilin","email":"win10@list.ru","commits":1}]},"filePathRelative":"extending-taskiq/cli.md","localizedDate":"February 5, 2024","autoDesc":true,"excerpt":"\\n<p>You can easily add new subcommands to taskiq. All default subcommands also use this mechanism,\\nsince it's easy to use.</p>\\n<p>At first you need to add a class that implements <code>taskiq.abc.cmd.TaskiqCMD</code> abstract class.</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">from</span> argparse <span class=\\"token keyword\\">import</span> ArgumentParser\\n<span class=\\"token keyword\\">from</span> typing <span class=\\"token keyword\\">import</span> Sequence\\n\\n<span class=\\"token keyword\\">from</span> taskiq<span class=\\"token punctuation\\">.</span>abc<span class=\\"token punctuation\\">.</span>cmd <span class=\\"token keyword\\">import</span> TaskiqCMD\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyCommand</span><span class=\\"token punctuation\\">(</span>TaskiqCMD<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    short_help <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Demo command\\"</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">:</span> Sequence<span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n        parser <span class=\\"token operator\\">=</span> ArgumentParser<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        parser<span class=\\"token punctuation\\">.</span>add_argument<span class=\\"token punctuation\\">(</span>\\n            <span class=\\"token string\\">\\"--test\\"</span><span class=\\"token punctuation\\">,</span>\\n            dest<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">,</span>\\n            default<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"default\\"</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token builtin\\">help</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"My test parameter.\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">)</span>\\n        parsed <span class=\\"token operator\\">=</span> parser<span class=\\"token punctuation\\">.</span>parse_args<span class=\\"token punctuation\\">(</span>args<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>parsed<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>"}`);export{M as comp,I as data};
