import{_ as u}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as k,e as a,w as e,b as n,d as s,a as h,r as o}from"./app.75310109.js";const m={},v=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),s(" Getting started")],-1),b=n("h2",{id:"installation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),s(" Installation")],-1),_=n("p",null,"You can install taskiq from pypi or directly from git using pip:",-1),y=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("pip "),n("span",{class:"token function"},"install"),s(` taskiq
`)])])],-1),g=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("pip "),n("span",{class:"token function"},"install"),s(` git+https://github.com/taskiq-python/taskiq.git
`)])])],-1),f=s("After installation of the core library, you need to find the broker that fits you. You can do it using "),w={href:"https://pypi.org/search/?q=taskiq",target:"_blank",rel:"noopener noreferrer"},q=s("PyPI"),x=s(" search."),I=n("p",null,"::: infp Cool tip!",-1),B=s("We highly recommend "),T={href:"https://pypi.org/project/taskiq-aio-pika/",target:"_blank",rel:"noopener noreferrer"},M=s("taskiq-aio-pika"),N=s(" as the broker and "),A={href:"https://pypi.org/project/taskiq-redis/",target:"_blank",rel:"noopener noreferrer"},L=s("taskiq-redis"),R=s(" as the result backend for production use."),Y=h(`<p>:::</p><h2 id="running-tasks" tabindex="-1"><a class="header-anchor" href="#running-tasks" aria-hidden="true">#</a> Running tasks</h2><p>Now you need to create a python module with broker declaration. It&#39;s just a plain python file with the variable of your broker. For this particular example, I&#39;m going to use the <code>InMemoryBroker</code>.</p><div class="custom-container danger"><p class="custom-container-title">Important note</p><p>The InMemoryBroker doesn&#39;t send any data over the network, and you cannot use this broker in a real-world scenario, but it&#39;s still useful for local development if you do not want to set up a taskiq worker.</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> InMemoryBroker

broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And that&#39;s it. Now let&#39;s add some tasks and the main function. You can add tasks in separate modules. You can find more information about that further.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> InMemoryBroker

broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Send the task to the broker.</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> add_one<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># Wait for the result.</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task execution took: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>execution_time<span class="token punctuation">}</span></span><span class="token string"> seconds.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">.</span>is_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Returned value: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>return_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error found while executing task.&quot;</span><span class="token punctuation">)</span>


asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run this code, you will get this in your terminal:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>\u276F python mybroker.py
Task execution took: <span class="token number">7</span>.3909759521484375e-06 seconds.
Returned value: <span class="token number">2</span>
</code></pre></div><p>Ok, the code of the task execution is a little bit fancier than an ordinary function call, but it&#39;s still relatively simple to understand. To send a task to the broker, you need to call the <code>.kiq</code> method on the function, it returns the <code>TaskiqTask</code> object that can check whether the result is ready or it can wait for it to become available.</p>`,10),j=s('You can get more information about taskiq types, CLI and internal structure in the "'),C=s("Architecture overview"),E=s('" section.');function V(S,P){const i=o("Tabs"),t=o("ExternalLinkIcon"),p=o("RouterLink");return d(),k("div",null,[v,b,_,a(i,{data:[{title:"pypi"},{title:"git"}]},{tab0:e(({title:r,value:c,isActive:l})=>[y]),tab1:e(({title:r,value:c,isActive:l})=>[g]),_:1}),n("p",null,[f,n("a",w,[q,a(t)]),x]),I,n("p",null,[B,n("a",T,[M,a(t)]),N,n("a",A,[L,a(t)]),R]),Y,n("p",null,[j,a(p,{to:"/guide/architecture-overview.html"},{default:e(()=>[C]),_:1}),E])])}const G=u(m,[["render",V],["__file","getting-started.html.vue"]]);export{G as default};
