import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as k,c as v,e as a,w as e,b as n,d as s,a as l,r}from"./app.ef8a68e2.js";const m={},b=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),s(" Getting started")],-1),h=n("h2",{id:"installation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),s(" Installation")],-1),g=n("p",null,"You can install taskiq from pypi or directly from git using pip:",-1),_=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("pip "),n("span",{class:"token function"},"install"),s(` taskiq
`)])])],-1),y=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("pip "),n("span",{class:"token function"},"install"),s(` git+https://github.com/taskiq-python/taskiq.git
`)])])],-1),w=s("After installation of the core library, you need to find the broker that fits you. You can do it using "),f={href:"https://pypi.org/search/?q=taskiq",target:"_blank",rel:"noopener noreferrer"},q=s("PyPI"),x=s(" search."),A={class:"custom-container info"},B=n("p",{class:"custom-container-title"},"Cool tip!",-1),T=s("We highly recommend "),I={href:"https://pypi.org/project/taskiq-aio-pika/",target:"_blank",rel:"noopener noreferrer"},R=s("taskiq-aio-pika"),L=s(" as the broker and "),M={href:"https://pypi.org/project/taskiq-redis/",target:"_blank",rel:"noopener noreferrer"},E=s("taskiq-redis"),N=s(" as the result backend for production use."),S=l(`<h2 id="running-tasks" tabindex="-1"><a class="header-anchor" href="#running-tasks" aria-hidden="true">#</a> Running tasks</h2><p>Now you need to create a python module with broker declaration. It&#39;s just a plain python file with the variable of your broker. For this particular example, I&#39;m going to use the <code>InMemoryBroker</code>.</p><div class="custom-container danger"><p class="custom-container-title">Important note</p><p>The InMemoryBroker doesn&#39;t send any data over the network, and you cannot use this broker in a real-world scenario, but it&#39;s still useful for local development if you do not want to set up a taskiq worker.</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> InMemoryBroker

broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And that&#39;s it. Now let&#39;s add some tasks and the main function. You can add tasks in separate modules. You can find more information about that further.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> InMemoryBroker

broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Send the task to the broker.</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> add_one<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># Wait for the result.</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task execution took: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>execution_time<span class="token punctuation">}</span></span><span class="token string"> seconds.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">.</span>is_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Returned value: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>return_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error found while executing task.&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run this code, you will get this in your terminal:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>\u276F python mybroker.py
Task execution took: <span class="token number">7</span>.3909759521484375e-06 seconds.
Returned value: <span class="token number">2</span>
</code></pre></div><p>Ok, the code of the task execution is a little bit fancier than an ordinary function call, but it&#39;s still relatively simple to understand. To send a task to the broker, you need to call the <code>.kiq</code> method on the function, it returns the <code>TaskiqTask</code> object that can check whether the result is ready or it can wait for it to become available.</p>`,9),P=s('You can get more information about taskiq types, CLI and internal structure in the "'),C=s("Architecture overview"),F=s('" section.'),Q=n("h2",{id:"distributed-run",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#distributed-run","aria-hidden":"true"},"#"),s(" Distributed run")],-1),U=n("p",null,"Now let's change InMemoryBroker to some distributed broker instead. In this example we are going to use broker that works with rabbitMQ.",-1),D=s("At first we must install the "),j={href:"https://pypi.org/project/taskiq-aio-pika/",target:"_blank",rel:"noopener noreferrer"},V=s("taskiq-aio-pika"),Y=s(" lib."),W=l(`<div class="language-bash ext-sh"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-aio-pika
</code></pre></div><p>After the installation, replace the broker we defined earlier with the broker from the <code>taskiq-aio-pika</code>.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span><span class="token string">&#39;amqp://guest:guest@localhost:5672&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, AioPika broker requires to call startup before using it. Add this line at the beginning of the main function.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">await</span> broker<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>That&#39;s all you need to do.</p><details class="custom-container details"><summary>Complete code</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span><span class="token string">&quot;amqp://guest:guest@localhost:5672&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> broker<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># Send the task to the broker.</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> add_one<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># Wait for the result.</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task execution took: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>execution_time<span class="token punctuation">}</span></span><span class="token string"> seconds.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">.</span>is_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Returned value: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>return_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error found while executing task.&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>Let&#39;s run the worker process. First of all, we need rabbitMQ up and running. I highly recommend you use docker.</p>`,8),O=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"docker"),s(" run "),n("span",{class:"token parameter variable"},"--rm"),s(),n("span",{class:"token parameter variable"},"-d"),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"-p"),s(),n("span",{class:"token string"},'"5672:5672"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"-p"),s(),n("span",{class:"token string"},'"15672:15672"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"--env"),s(),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_USER=guest"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"--env"),s(),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_PASS=guest"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"--env"),s(),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_VHOST=/"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    rabbitmq:3.8.27-management-alpine
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-powershell ext-powershell line-numbers-mode"},[n("pre",{class:"language-powershell"},[n("code",null,[s("docker run "),n("span",{class:"token operator"},"--"),n("span",{class:"token function"},"rm"),s(),n("span",{class:"token operator"},"-"),s(`d ^
    `),n("span",{class:"token operator"},"-"),s("p "),n("span",{class:"token string"},'"5672:5672"'),s(` ^
    `),n("span",{class:"token operator"},"-"),s("p "),n("span",{class:"token string"},'"15672:15672"'),s(` ^
    `),n("span",{class:"token operator"},"--"),s("env "),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_USER=guest"'),s(` ^
    `),n("span",{class:"token operator"},"--"),s("env "),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_PASS=guest"'),s(` ^
    `),n("span",{class:"token operator"},"--"),s("env "),n("span",{class:"token string"},'"RABBITMQ_DEFAULT_VHOST=/"'),s(` ^
    rabbitmq:3`),n("span",{class:"token punctuation"},"."),s("8"),n("span",{class:"token punctuation"},"."),s(`27-management-alpine
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=s("Now we need to start worker process by running taskiq cli command. You can get more info about the CLI in the "),G=s("CLI"),z=s(" section."),J=l(`<div class="language-bash ext-sh"><pre class="language-bash"><code>taskiq broker:broker
</code></pre></div><p>After the worker is up, we can run our script as an ordinary python file and see how the worker executes tasks.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ python broker.py
Task execution took: <span class="token number">0.0</span> seconds.
Returned value: None
</code></pre></div>`,3),K=s("But the printed result value is not correct. That happens because we didn't provide any result backend that can store results of task execution. To store results, we can use the "),X={href:"https://pypi.org/project/taskiq-redis/",target:"_blank",rel:"noopener noreferrer"},Z=s("taskiq-redis"),nn=s(" library."),sn=l(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> taskiq-redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After the installation, add a new result backend to the broker.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_redis <span class="token keyword">import</span> RedisAsyncResultBackend

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span>
    <span class="token string">&quot;amqp://guest:guest@localhost:5672&quot;</span><span class="token punctuation">,</span>
    result_backend<span class="token operator">=</span>RedisAsyncResultBackend<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we need to start redis.</p>`,4),an=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"docker"),s(" run "),n("span",{class:"token parameter variable"},"--rm"),s(),n("span",{class:"token parameter variable"},"-d"),s(),n("span",{class:"token punctuation"},"\\"),s(`
    `),n("span",{class:"token parameter variable"},"-p"),s(),n("span",{class:"token string"},'"6379:6379"'),s(),n("span",{class:"token punctuation"},"\\"),s(`
    redis
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=n("div",{class:"language-powershell ext-powershell line-numbers-mode"},[n("pre",{class:"language-powershell"},[n("code",null,[s("docker run "),n("span",{class:"token operator"},"--"),n("span",{class:"token function"},"rm"),s(),n("span",{class:"token operator"},"-"),s(`d ^
    `),n("span",{class:"token operator"},"-"),s("p "),n("span",{class:"token string"},'"6379:6379"'),s(` ^
    redis
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),tn=l(`<details class="custom-container details"><summary>Complete code</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># broker.py</span>
<span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker
<span class="token keyword">from</span> taskiq_redis <span class="token keyword">import</span> RedisAsyncResultBackend

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span>
    <span class="token string">&quot;amqp://guest:guest@localhost:5672&quot;</span><span class="token punctuation">,</span>
    result_backend<span class="token operator">=</span>RedisAsyncResultBackend<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> broker<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># Send the task to the broker.</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> add_one<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># Wait for the result.</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task execution took: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>execution_time<span class="token punctuation">}</span></span><span class="token string"> seconds.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">.</span>is_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Returned value: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>return_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error found while executing task.&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>Let&#39;s run taskiq once again. The command is the same.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>taskiq broker:broker
</code></pre></div><p>Now, if we run this file with python, we can get the correct results with a valid execution time.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ python broker.py
Task execution took: <span class="token number">1</span>.0013580322265625e-05 seconds.
Returned value: <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Continue reading to get more information about taskiq internals.</p>`,6);function on(pn,ln){const c=r("Tabs"),t=r("ExternalLinkIcon"),u=r("RouterLink");return k(),v("div",null,[b,h,g,a(c,{data:[{title:"pypi"},{title:"git"}]},{tab0:e(({title:o,value:i,isActive:p})=>[_]),tab1:e(({title:o,value:i,isActive:p})=>[y]),_:1}),n("p",null,[w,n("a",f,[q,a(t)]),x]),n("div",A,[B,n("p",null,[T,n("a",I,[R,a(t)]),L,n("a",M,[E,a(t)]),N])]),S,n("p",null,[P,a(u,{to:"/guide/architecture-overview.html"},{default:e(()=>[C]),_:1}),F]),Q,U,n("p",null,[D,n("a",j,[V,a(t)]),Y]),W,a(c,{data:[{title:"linux|macos"},{title:"windows"}]},{tab0:e(({title:o,value:i,isActive:p})=>[O]),tab1:e(({title:o,value:i,isActive:p})=>[H]),_:1}),n("p",null,[$,a(u,{to:"/guide/cli.html"},{default:e(()=>[G]),_:1}),z]),J,n("p",null,[K,n("a",X,[Z,a(t)]),nn]),sn,a(c,{data:[{title:"linux|macos"},{title:"windows"}]},{tab0:e(({title:o,value:i,isActive:p})=>[an]),tab1:e(({title:o,value:i,isActive:p})=>[en]),_:1}),tn])}const un=d(m,[["render",on],["__file","getting-started.html.vue"]]);export{un as default};
