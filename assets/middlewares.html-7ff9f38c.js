import{_ as l,W as p,X as c,$ as d,a0 as s,Y as n,v as u,Z as a,a1 as e}from"./framework-324439bb.js";const m={},k=n(`<h1 id="available-middlewares" tabindex="-1"><a class="header-anchor" href="#available-middlewares" aria-hidden="true">#</a> Available middlewares</h1><p>Middlewares allow you to execute code when specific event occurs. Taskiq has several default middlewares.</p><h3 id="simple-retry-middleware" tabindex="-1"><a class="header-anchor" href="#simple-retry-middleware" aria-hidden="true">#</a> Simple retry middleware</h3><p>This middleware allows you to restart functions on errors. If exception was raised during task execution, the task would be resent with same parameters.</p><p>To enable this middleware, add it to the list of middlewares for a broker.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> ZeroMQBroker<span class="token punctuation">,</span> SimpleRetryMiddleware

broker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_middlewares<span class="token punctuation">(</span>
    SimpleRetryMiddleware<span class="token punctuation">(</span>default_retry_count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that you can add a label to task that you want to restart on error.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>retry_on_error<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;AAAAA!&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>retry_on_error</code> enables retries for a task. <code>max_retries</code> is the maximum number of times,.</p><h3 id="prometheus-middleware" tabindex="-1"><a class="header-anchor" href="#prometheus-middleware" aria-hidden="true">#</a> Prometheus middleware</h3><p>You can enable prometheus metrics for workers by adding PrometheusMiddleware. To do so, you need to install <code>prometheus_client</code> package or you can install metrics extras for taskiq.</p>`,11),h=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[e("pip "),a("span",{class:"token function"},"install"),e(),a("span",{class:"token string"},'"prometheus_client"'),e(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),v=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[e("pip "),a("span",{class:"token function"},"install"),e(),a("span",{class:"token string"},'"taskiq[metrics]"'),e(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),b=n(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> ZeroMQBroker<span class="token punctuation">,</span> PrometheusMiddleware

broker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_middlewares<span class="token punctuation">(</span>
    PrometheusMiddleware<span class="token punctuation">(</span>server_addr<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> server_port<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, metrics will be available at port 9000. Of course, this parameter can be configured. If you have other metrics, they&#39;ll be shown as well.</p>`,2);function w(_,y){const t=u("Tabs");return p(),c("div",null,[k,d(t,{id:"29",data:[{title:"only prometheus"},{title:"taskiq with extras"}]},{tab0:s(({title:o,value:r,isActive:i})=>[h]),tab1:s(({title:o,value:r,isActive:i})=>[v]),_:1}),b])}const g=l(m,[["render",w],["__file","middlewares.html.vue"]]);export{g as default};
