import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as d,c as p,e as c,w as s,a as i,d as a,b as e}from"./app-Lulzgzf0.js";const u={},m=i(`<h1 id="available-middlewares" tabindex="-1"><a class="header-anchor" href="#available-middlewares"><span>Available middlewares</span></a></h1><p>Middlewares allow you to execute code when specific event occurs. Taskiq has several default middlewares.</p><h3 id="simple-retry-middleware" tabindex="-1"><a class="header-anchor" href="#simple-retry-middleware"><span>Simple retry middleware</span></a></h3><p>This middleware allows you to restart functions on errors. If exception was raised during task execution, the task would be resent with same parameters.</p><p>To enable this middleware, add it to the list of middlewares for a broker.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> ZeroMQBroker<span class="token punctuation">,</span> SimpleRetryMiddleware

broker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_middlewares<span class="token punctuation">(</span>
    SimpleRetryMiddleware<span class="token punctuation">(</span>default_retry_count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that you can add a label to task that you want to restart on error.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>retry_on_error<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;AAAAA!&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>retry_on_error</code> enables retries for a task. <code>max_retries</code> is the maximum number of times,.</p><h3 id="prometheus-middleware" tabindex="-1"><a class="header-anchor" href="#prometheus-middleware"><span>Prometheus middleware</span></a></h3><p>You can enable prometheus metrics for workers by adding PrometheusMiddleware. To do so, you need to install <code>prometheus_client</code> package or you can install metrics extras for taskiq.</p>`,11),h=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("pip "),e("span",{class:"token function"},"install"),a(),e("span",{class:"token string"},'"prometheus_client"'),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("pip "),e("span",{class:"token function"},"install"),a(),e("span",{class:"token string"},'"taskiq[metrics]"'),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v=i(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> ZeroMQBroker<span class="token punctuation">,</span> PrometheusMiddleware

broker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_middlewares<span class="token punctuation">(</span>
    PrometheusMiddleware<span class="token punctuation">(</span>server_addr<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> server_port<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, metrics will be available at port 9000. Of course, this parameter can be configured. If you have other metrics, they&#39;ll be shown as well.</p>`,2);function w(b,y){const o=l("Tabs");return d(),p("div",null,[m,c(o,{id:"29",data:[{id:"only prometheus"},{id:"taskiq with extras"}]},{title0:s(({value:n,isActive:t})=>[a("only prometheus")]),title1:s(({value:n,isActive:t})=>[a("taskiq with extras")]),tab0:s(({value:n,isActive:t})=>[h]),tab1:s(({value:n,isActive:t})=>[k]),_:1}),v])}const _=r(u,[["render",w],["__file","middlewares.html.vue"]]),x=JSON.parse('{"path":"/available-components/middlewares.html","title":"Available middlewares","lang":"en-US","frontmatter":{"order":5,"description":"Available middlewares Middlewares allow you to execute code when specific event occurs. Taskiq has several default middlewares. Simple retry middleware This middleware allows yo...","head":[["meta",{"property":"og:url","content":"https://taskiq-python.github.io/available-components/middlewares.html"}],["meta",{"property":"og:site_name","content":"Taskiq"}],["meta",{"property":"og:title","content":"Available middlewares"}],["meta",{"property":"og:description","content":"Available middlewares Middlewares allow you to execute code when specific event occurs. Taskiq has several default middlewares. Simple retry middleware This middleware allows yo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-05T23:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-05T23:36:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Available middlewares\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-05T23:36:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Simple retry middleware","slug":"simple-retry-middleware","link":"#simple-retry-middleware","children":[]},{"level":3,"title":"Prometheus middleware","slug":"prometheus-middleware","link":"#prometheus-middleware","children":[]}],"git":{"createdTime":1707176191000,"updatedTime":1707176191000,"contributors":[{"name":"Pavel Kirilin","email":"win10@list.ru","commits":1}]},"filePathRelative":"available-components/middlewares.md","localizedDate":"February 5, 2024","autoDesc":true,"excerpt":"\\n<p>Middlewares allow you to execute code when specific event occurs.\\nTaskiq has several default middlewares.</p>\\n<h3>Simple retry middleware</h3>\\n<p>This middleware allows you to restart functions on errors. If exception was raised during task execution,\\nthe task would be resent with same parameters.</p>"}');export{_ as comp,x as data};
