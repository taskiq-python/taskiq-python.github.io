import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-Lulzgzf0.js";const e={},o=t(`<h1 id="result-backend" tabindex="-1"><a class="header-anchor" href="#result-backend"><span>Result backend</span></a></h1><p>Result backends are used to store information about task execution. To create new <code>result_backend</code> you have to implement <code>taskiq.abc.result_backend.AsyncResultBackend</code> class.</p><p>Here&#39;s a minimal example of a result backend:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqResult
<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>result_backend <span class="token keyword">import</span> AsyncResultBackend

_ReturnType <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&quot;_ReturnType&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MyResultBackend</span><span class="token punctuation">(</span>AsyncResultBackend<span class="token punctuation">[</span>_ReturnType<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Do something when starting broker.&quot;&quot;&quot;</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Do something on shutdown.&quot;&quot;&quot;</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_result</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        task_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        result<span class="token punctuation">:</span> TaskiqResult<span class="token punctuation">[</span>_ReturnType<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Set result in your backend.

        :param task_id: current task id.
        :param result: result of execution.
        &quot;&quot;&quot;</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        task_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        with_logs<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TaskiqResult<span class="token punctuation">[</span>_ReturnType<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Here you must retrieve result by id.

        Logs is a part of a result.
        Here we have a parameter whether you want to
        fetch result with logs or not, because logs
        can have a lot of info and sometimes it&#39;s critical
        to get only needed information.

        :param task_id: id of a task.
        :param with_logs: whether to fetch logs.
        :return: result.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># type: ignore</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">is_result_ready</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        task_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Check if result exists.

        This function must check whether result
        is available in your result backend
        without fetching the result.

        :param task_id: id of a task.
        :return: True if result is ready.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># type: ignore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Cool tip!</p><p>It&#39;s a good practice to skip fetching logs from the storage unless <code>with_logs=True</code> is explicitly specified.</p></div><div class="hint-container caution"><p class="hint-container-title">Important note!</p><p><code>with_logs</code> param is now deprecated. It will be removed in future releases.</p></div>`,6),p=[o];function i(c,l){return s(),a("div",null,p)}const k=n(e,[["render",i],["__file","result-backend.html.vue"]]),d=JSON.parse(`{"path":"/extending-taskiq/result-backend.html","title":"Result backend","lang":"en-US","frontmatter":{"order":3,"description":"Result backend Result backends are used to store information about task execution. To create new result_backend you have to implement taskiq.abc.result_backend.AsyncResultBacken...","head":[["meta",{"property":"og:url","content":"https://taskiq-python.github.io/extending-taskiq/result-backend.html"}],["meta",{"property":"og:site_name","content":"Taskiq"}],["meta",{"property":"og:title","content":"Result backend"}],["meta",{"property":"og:description","content":"Result backend Result backends are used to store information about task execution. To create new result_backend you have to implement taskiq.abc.result_backend.AsyncResultBacken..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-05T23:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-05T23:36:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Result backend\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-05T23:36:31.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1707176191000,"updatedTime":1707176191000,"contributors":[{"name":"Pavel Kirilin","email":"win10@list.ru","commits":1}]},"filePathRelative":"extending-taskiq/result-backend.md","localizedDate":"February 5, 2024","autoDesc":true,"excerpt":"\\n<p>Result backends are used to store information about task execution.\\nTo create new <code>result_backend</code> you have to implement <code>taskiq.abc.result_backend.AsyncResultBackend</code> class.</p>\\n<p>Here's a minimal example of a result backend:</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">from</span> typing <span class=\\"token keyword\\">import</span> TypeVar\\n\\n<span class=\\"token keyword\\">from</span> taskiq <span class=\\"token keyword\\">import</span> TaskiqResult\\n<span class=\\"token keyword\\">from</span> taskiq<span class=\\"token punctuation\\">.</span>abc<span class=\\"token punctuation\\">.</span>result_backend <span class=\\"token keyword\\">import</span> AsyncResultBackend\\n\\n_ReturnType <span class=\\"token operator\\">=</span> TypeVar<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"_ReturnType\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyResultBackend</span><span class=\\"token punctuation\\">(</span>AsyncResultBackend<span class=\\"token punctuation\\">[</span>_ReturnType<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">startup</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Do something when starting broker.\\"\\"\\"</span>\\n\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">shutdown</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Do something on shutdown.\\"\\"\\"</span>\\n\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">set_result</span><span class=\\"token punctuation\\">(</span>\\n        self<span class=\\"token punctuation\\">,</span>\\n        task_id<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span>\\n        result<span class=\\"token punctuation\\">:</span> TaskiqResult<span class=\\"token punctuation\\">[</span>_ReturnType<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n        Set result in your backend.\\n\\n        :param task_id: current task id.\\n        :param result: result of execution.\\n        \\"\\"\\"</span>\\n\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get_result</span><span class=\\"token punctuation\\">(</span>\\n        self<span class=\\"token punctuation\\">,</span>\\n        task_id<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span>\\n        with_logs<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">bool</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> TaskiqResult<span class=\\"token punctuation\\">[</span>_ReturnType<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n        Here you must retrieve result by id.\\n\\n        Logs is a part of a result.\\n        Here we have a parameter whether you want to\\n        fetch result with logs or not, because logs\\n        can have a lot of info and sometimes it's critical\\n        to get only needed information.\\n\\n        :param task_id: id of a task.\\n        :param with_logs: whether to fetch logs.\\n        :return: result.\\n        \\"\\"\\"</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>  <span class=\\"token comment\\"># type: ignore</span>\\n\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">is_result_ready</span><span class=\\"token punctuation\\">(</span>\\n        self<span class=\\"token punctuation\\">,</span>\\n        task_id<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">bool</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n        Check if result exists.\\n\\n        This function must check whether result\\n        is available in your result backend\\n        without fetching the result.\\n\\n        :param task_id: id of a task.\\n        :return: True if result is ready.\\n        \\"\\"\\"</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>  <span class=\\"token comment\\"># type: ignore</span>\\n</code></pre></div>"}`);export{k as comp,d as data};
