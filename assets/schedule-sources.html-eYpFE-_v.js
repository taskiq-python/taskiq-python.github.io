import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as u,b as e,d as s,e as t,w as o,a as n}from"./app-Lulzgzf0.js";const p={},r=n(`<h1 id="available-schedule-sources" tabindex="-1"><a class="header-anchor" href="#available-schedule-sources"><span>Available schedule sources</span></a></h1><p>These objects are used to fetch current schedule for tasks. Currently we have only one schedule source.</p><h2 id="redisschedulesource" tabindex="-1"><a class="header-anchor" href="#redisschedulesource"><span>RedisScheduleSource</span></a></h2><p>This source is capable of adding new schedules in runtime. It uses Redis as a storage for schedules. To use this source you need to install <code>taskiq-redids</code> package.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_redis <span class="token keyword">import</span> RedisScheduleSource

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqScheduler

redis_source <span class="token operator">=</span> RedisScheduleSource<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost:6379/0&quot;</span><span class="token punctuation">)</span>
scheduler <span class="token operator">=</span> TaskiqScheduler<span class="token punctuation">(</span>broker<span class="token punctuation">,</span> sources<span class="token operator">=</span><span class="token punctuation">[</span>redis_source<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),d=n(`<h2 id="labelschedulesource" tabindex="-1"><a class="header-anchor" href="#labelschedulesource"><span>LabelScheduleSource</span></a></h2><p>This source parses labels of tasks, and if it finds a <code>schedule</code> label, it considers this task as scheduled.</p><p>The format of the schedule label is the following:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>
    schedule<span class="token operator">=</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string">&quot;cron&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;* * * * *&quot;</span><span class="token punctuation">,</span> <span class="token comment"># type: str, either cron or time shoule be specified.</span>
            <span class="token string">&quot;cron_offset&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># type: str | timedelta | None, can be ommited.</span>
            <span class="token string">&quot;time&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span>  <span class="token comment"># type: datetime | None, either cron or time shoule be specified.</span>
            <span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># type List[Any] | None, can be omitted.</span>
            <span class="token string">&quot;kwargs&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment"># type: Dict[str, Any] | None, can be omitted.</span>
            <span class="token string">&quot;labels&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment"># type: Dict[str, Any] | None, can be omitted.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parameters:</p>`,5),h=e("li",null,[e("code",null,"cron"),s(" - crontab string when to run the task.")],-1),k=e("code",null,"cron_offset",-1),m=e("li",null,[e("code",null,"time"),s(" - specific time when send the task.")],-1),v=e("li",null,[e("code",null,"args"),s(" - args to use, when invoking the task.")],-1),b=e("li",null,[e("code",null,"kwargs"),s(" - key-word arguments to use when invoking the task.")],-1),g=e("li",null,[e("code",null,"labels"),s(" - additional labels to use when invoking the task.")],-1),y=n(`<p>To enable this source, just add it to the list of sources:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>scheduler <span class="token keyword">import</span> TaskiqScheduler
<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>schedule_sources <span class="token keyword">import</span> LabelScheduleSource

broker <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

scheduler <span class="token operator">=</span> TaskiqScheduler<span class="token punctuation">(</span>
    broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>
    sources<span class="token operator">=</span><span class="token punctuation">[</span>LabelScheduleSource<span class="token punctuation">(</span>broker<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Cool notice!</p><p>In order to resolve all labels correctly, don&#39;t forget to import all task modules using CLI interface.</p></div>`,3);function f(_,w){const a=l("RouteLink");return i(),u("div",null,[r,e("p",null,[s("For more information on how to use dynamic schedule sources read "),t(a,{to:"/guide/scheduling-tasks.html#dynamic-scheduling"},{default:o(()=>[s("Dynamic scheduling section")]),_:1}),s(".")]),d,e("ul",null,[h,e("li",null,[k,s(" - timezone offset for cron values. Explained "),t(a,{to:"/guide/scheduling-tasks.html#working-with-timezones"},{default:o(()=>[s("here")]),_:1})]),m,v,b,g]),y])}const T=c(p,[["render",f],["__file","schedule-sources.html.vue"]]),x=JSON.parse('{"path":"/available-components/schedule-sources.html","title":"Available schedule sources","lang":"en-US","frontmatter":{"order":4,"description":"Available schedule sources These objects are used to fetch current schedule for tasks. Currently we have only one schedule source. RedisScheduleSource This source is capable of ...","head":[["meta",{"property":"og:url","content":"https://taskiq-python.github.io/available-components/schedule-sources.html"}],["meta",{"property":"og:site_name","content":"Taskiq"}],["meta",{"property":"og:title","content":"Available schedule sources"}],["meta",{"property":"og:description","content":"Available schedule sources These objects are used to fetch current schedule for tasks. Currently we have only one schedule source. RedisScheduleSource This source is capable of ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-05T23:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-05T23:36:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Available schedule sources\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-05T23:36:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"RedisScheduleSource","slug":"redisschedulesource","link":"#redisschedulesource","children":[]},{"level":2,"title":"LabelScheduleSource","slug":"labelschedulesource","link":"#labelschedulesource","children":[]}],"git":{"createdTime":1707176191000,"updatedTime":1707176191000,"contributors":[{"name":"Pavel Kirilin","email":"win10@list.ru","commits":1}]},"filePathRelative":"available-components/schedule-sources.md","localizedDate":"February 5, 2024","autoDesc":true,"excerpt":"\\n<p>These objects are used to fetch current schedule for tasks.\\nCurrently we have only one schedule source.</p>\\n<h2>RedisScheduleSource</h2>\\n<p>This source is capable of adding new schedules in runtime. It uses Redis as a storage for schedules.\\nTo use this source you need to install <code>taskiq-redids</code> package.</p>"}');export{T as comp,x as data};
