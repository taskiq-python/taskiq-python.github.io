import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as u,b as n,d as s,e as a,w as i,a as e}from"./app-Lulzgzf0.js";const r={},d=e(`<h1 id="scheduling-tasks" tabindex="-1"><a class="header-anchor" href="#scheduling-tasks"><span>Scheduling tasks</span></a></h1><p>Sometimes you may want to execute some tasks according to some schedule. For example, you maybe want to call a function every day at 2 pm.</p><p>That&#39;s not a problem if you use taskiq. We have primitives that can help you to solve your problems.</p><p>Let&#39;s imagine we have a module, as shown below, and we want to execute the <code>heavy_task</code> every 5 minutes. What should we do?</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span><span class="token string">&quot;amqp://guest:guest@localhost:5672/&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">heavy_task</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course we can implement loop like this:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> heavy_task<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But if you have many schedules it may be a little painful to implement. So let me introduce you the <code>TaskiqScheduler</code>. Let&#39;s add scheduler to our module.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker

<span class="token keyword">from</span> taskiq<span class="token punctuation">.</span>schedule_sources <span class="token keyword">import</span> LabelScheduleSource
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqScheduler

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span><span class="token string">&quot;amqp://guest:guest@localhost:5672/&quot;</span><span class="token punctuation">)</span>

scheduler <span class="token operator">=</span> TaskiqScheduler<span class="token punctuation">(</span>
    broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>
    sources<span class="token operator">=</span><span class="token punctuation">[</span>LabelScheduleSource<span class="token punctuation">(</span>broker<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>schedule<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;cron&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;*/5 * * * *&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">heavy_task</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it.</p><p>Now we need to start our scheduler with the <code>taskiq scheduler</code> command. Like this:</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>taskiq scheduler module:scheduler
</code></pre></div><div class="hint-container caution"><p class="hint-container-title">Be careful!</p><p>Please always run only one instance of the scheduler! If you run more than one scheduler at a time, please be careful since it may execute one task N times, where N is the number of running scheduler instances.</p></div><p>This command will import the scheduler you defined and start sending tasks to your broker.</p><div class="hint-container tip"><p class="hint-container-title">Cool tip!</p><p>The scheduler doesn&#39;t execute tasks. It only sends them.</p></div>`,15),k=e('<h2 id="multiple-sources" tabindex="-1"><a class="header-anchor" href="#multiple-sources"><span>Multiple sources</span></a></h2><p>Sometimes you may want to use multiple sources to assemble a schedule for tasks. The <code>TaskiqScheduler</code> can do so. But it&#39;s obvious how to merge schedules from different sources.</p><p>That&#39;s why you can pass a custom merge function to resolve all possible conflicts or if you want to have more complex logic aside from sources. For example, filter out some task schedules.</p><p>Currently we have only two default functions to merge tasks. You can find them in the <code>taskiq.scheduler.merge_functions</code> module.</p><ul><li><code>preserve_all</code> - simply adds new schedules to the old ones.</li><li><code>only_unique</code> - adds schedule only if it was not added by previous sources.</li></ul><p>Every time we update schedule it gets task from the source and executes this function to merge them together.</p><h2 id="working-with-timezones" tabindex="-1"><a class="header-anchor" href="#working-with-timezones"><span>Working with timezones</span></a></h2><p>Sometimes, you want to be specific in terms of time zones. We have you covered. Our <code>ScheduledTask</code> model has fields for that. Use these fields or not, it&#39;s up to the specific schedule source.</p>',8),m={href:"https://www.wikiwand.com/en/Coordinated_Universal_Time",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>For the <code>time</code> field of <code>ScheduledTask</code> we use timezone information from datetime to check if a task should run.</p><p>For <code>cron</code> tasks, we have an additional field called <code>cron_offset</code> that can be used to specify an offset of the cron task. An offset can be a string like <code>Europe/Berlin</code> or an instance of the <code>timedelta</code> class.</p><h2 id="skipping-first-run" tabindex="-1"><a class="header-anchor" href="#skipping-first-run"><span>Skipping first run</span></a></h2><p>By default, when you start the scheduler it will get all tasks from the schedule source and check whether they should have been executed in this minute. If tasks should have been executed, they will be executed.</p><p>This behaviour might be not convinient for some developers. For example, if you have a task that should be executed on every minute, it will be executed once you start the scheduler, even if it was executed a few seconds ago.</p><p>To avoid this behaviour, you can pass the <code>--skip-first-run</code> flag to the <code>taskiq scheduler</code> command. In this case, the scheduler will wait until the start of the next minute and then start executing tasks.</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>taskiq scheduler module:scheduler --skip-first-run
</code></pre></div><h2 id="dynamic-scheduling" tabindex="-1"><a class="header-anchor" href="#dynamic-scheduling"><span>Dynamic scheduling</span></a></h2>`,8),v=n("code",null,"RedisScheduleSource",-1),b=e(`<p>Here&#39;s an example of using redis schedule source:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq_redis <span class="token keyword">import</span> ListQueueBroker<span class="token punctuation">,</span> RedisScheduleSource

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqScheduler

<span class="token comment"># Here&#39;s the broker that is going to execute tasks</span>
broker <span class="token operator">=</span> ListQueueBroker<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost:6379/0&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Here&#39;s the source that is used to store scheduled tasks</span>
redis_source <span class="token operator">=</span> RedisScheduleSource<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost:6379/0&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># And here&#39;s the scheduler that is used to query scheduled sources</span>
scheduler <span class="token operator">=</span> TaskiqScheduler<span class="token punctuation">(</span>broker<span class="token punctuation">,</span> sources<span class="token operator">=</span><span class="token punctuation">[</span>redis_source<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Example task.&quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from my_task!&quot;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>  <span class="token comment"># noqa: T201</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can use this source to add new schedules in runtime. Here&#39;s an example:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">await</span> redis_source<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> my_task<span class="token punctuation">.</span>schedule_by_time<span class="token punctuation">(</span>
        redis_source<span class="token punctuation">,</span>
        <span class="token comment"># It&#39;s better to use UTC time, or add tzinfo to datetime.</span>
        datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment"># You can pass args and kwargs here as usual</span>
        <span class="token number">11</span><span class="token punctuation">,</span>
        arg2<span class="token operator">=</span><span class="token string">&quot;arg2&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you want ot use cron schedules instead, just use <code>schedule_by_cron</code> method.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">await</span> my_task<span class="token punctuation">.</span>schedule_by_cron<span class="token punctuation">(</span>
        redis_source<span class="token punctuation">,</span>
        <span class="token string">&quot;*/5 * * * *&quot;</span><span class="token punctuation">,</span>
        <span class="token number">11</span><span class="token punctuation">,</span>
        arg2<span class="token operator">=</span><span class="token string">&quot;arg2&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to pass additional labels, you can call these methods on the <code>Kicker</code> instance.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    schedule <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token keyword">await</span> my_task<span class="token punctuation">.</span>kicker<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>with_labels<span class="token punctuation">(</span>label1<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>schedule_by_time<span class="token punctuation">(</span>
            redis_source<span class="token punctuation">,</span>
            datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">11</span><span class="token punctuation">,</span>
            arg2<span class="token operator">=</span><span class="token string">&quot;arg2&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Cool warning!</p><p>The <code>with_broker</code> method won&#39;t do anything in this case, since we have a broker assigned to each scheduler.</p></div><p>Each of these methods return you an instance of the <code>CreatedSchedule</code> class. This object has unique schedule ID and some helper methods. For example, you can use the <code>unschedule</code> method to remove the schedule from the source.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    schedule <span class="token operator">=</span> <span class="token keyword">await</span> my_task<span class="token punctuation">.</span>schedule_by_time<span class="token punctuation">(</span>
        redis_source<span class="token punctuation">,</span>
        datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">11</span><span class="token punctuation">,</span>
        arg2<span class="token operator">=</span><span class="token string">&quot;arg2&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">await</span> schedule<span class="token punctuation">.</span>unschedule<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or it can be done manually, by calling <code>delete_schedule</code> on schedule source providing it whith <code>schedule_id</code>.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">await</span> redis_source<span class="token punctuation">.</span>delete_schedule<span class="token punctuation">(</span>schedule<span class="token punctuation">.</span>schedule_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13);function y(g,w){const t=o("RouteLink"),c=o("ExternalLinkIcon");return l(),u("div",null,[d,n("p",null,[s("You can check list of available schedule sources in the "),a(t,{to:"/available-components/schedule-sources.html"},{default:i(()=>[s("Available schedule sources")]),_:1}),s(" section.")]),k,n("p",null,[s("Taskiq scheduler assumes that if time has no specific timezone, it's in "),n("a",m,[s("UTC"),a(c)]),s(". Sometimes, this behavior might not be convinient for developers.")]),h,n("p",null,[s("Sometimes you may want to add new schedules to the scheduler on the fly. For example, you may want to run a specific function in several minutes from now. You can easily do it with ScheduleSources that support dynamic scheduling. Currently we suggest to use the "),v,s(" for that purpose. List of schedulers with dynamic task addition will be extended in the future. For list of available schedule sources see "),a(t,{to:"/available-components/schedule-sources.html"},{default:i(()=>[s("Available schedule sources")]),_:1}),s(".")]),b])}const q=p(r,[["render",y],["__file","scheduling-tasks.html.vue"]]),x=JSON.parse(`{"path":"/guide/scheduling-tasks.html","title":"Scheduling tasks","lang":"en-US","frontmatter":{"order":8,"description":"Scheduling tasks Sometimes you may want to execute some tasks according to some schedule. For example, you maybe want to call a function every day at 2 pm. That's not a problem ...","head":[["meta",{"property":"og:url","content":"https://taskiq-python.github.io/guide/scheduling-tasks.html"}],["meta",{"property":"og:site_name","content":"Taskiq"}],["meta",{"property":"og:title","content":"Scheduling tasks"}],["meta",{"property":"og:description","content":"Scheduling tasks Sometimes you may want to execute some tasks according to some schedule. For example, you maybe want to call a function every day at 2 pm. That's not a problem ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-05T23:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-05T23:36:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scheduling tasks\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-05T23:36:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Multiple sources","slug":"multiple-sources","link":"#multiple-sources","children":[]},{"level":2,"title":"Working with timezones","slug":"working-with-timezones","link":"#working-with-timezones","children":[]},{"level":2,"title":"Skipping first run","slug":"skipping-first-run","link":"#skipping-first-run","children":[]},{"level":2,"title":"Dynamic scheduling","slug":"dynamic-scheduling","link":"#dynamic-scheduling","children":[]}],"git":{"createdTime":1707176191000,"updatedTime":1707176191000,"contributors":[{"name":"Pavel Kirilin","email":"win10@list.ru","commits":1}]},"filePathRelative":"guide/scheduling-tasks.md","localizedDate":"February 5, 2024","autoDesc":true,"excerpt":"\\n<p>Sometimes you may want to execute some tasks according to some schedule.\\nFor example, you maybe want to call a function every day at 2 pm.</p>\\n<p>That's not a problem if you use taskiq. We have primitives that can help you to solve your problems.</p>\\n<p>Let's imagine we have a module, as shown below, and we want to execute the <code>heavy_task</code> every 5 minutes.\\nWhat should we do?</p>"}`);export{q as comp,x as data};
