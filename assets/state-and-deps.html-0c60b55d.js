import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,b as s,d as n,e as a,a as e}from"./app-75065120.js";const u={},d=e(`<h1 id="state-and-dependencies" tabindex="-1"><a class="header-anchor" href="#state-and-dependencies" aria-hidden="true">#</a> State and Dependencies</h1><h2 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h2><p>The <code>TaskiqState</code> is a global variable where you can keep the variables you want to use later. For example, you want to open a database connection pool at a broker&#39;s startup.</p><p>This can be achieved by adding event handlers.</p><p>You can use one of these events:</p><ul><li><code>WORKER_STARTUP</code></li><li><code>CLIENT_STARTUP</code></li><li><code>WORKER_SHUTDOWN</code></li><li><code>CLIENT_SHUTDOWN</code></li></ul><p>Worker events are called when you start listening to the broker messages using taskiq. Client events are called when you call the <code>startup</code> method of your broker from your code.</p><p>This is an example of code using event handlers:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional

<span class="token keyword">from</span> redis<span class="token punctuation">.</span>asyncio <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> Redis  <span class="token comment"># type: ignore</span>
<span class="token keyword">from</span> taskiq_aio_pika <span class="token keyword">import</span> AioPikaBroker
<span class="token keyword">from</span> taskiq_redis <span class="token keyword">import</span> RedisAsyncResultBackend

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> Context<span class="token punctuation">,</span> TaskiqDepends<span class="token punctuation">,</span> TaskiqEvents<span class="token punctuation">,</span> TaskiqState

<span class="token comment"># To run this example, please install:</span>
<span class="token comment"># * taskiq</span>
<span class="token comment"># * taskiq-redis</span>
<span class="token comment"># * taskiq-aio-pika</span>

broker <span class="token operator">=</span> AioPikaBroker<span class="token punctuation">(</span>
    <span class="token string">&quot;amqp://localhost&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>with_result_backend<span class="token punctuation">(</span>RedisAsyncResultBackend<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span>TaskiqEvents<span class="token punctuation">.</span>WORKER_STARTUP<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> TaskiqState<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Here we store connection pool on startup for later use.</span>
    state<span class="token punctuation">.</span>redis <span class="token operator">=</span> ConnectionPool<span class="token punctuation">.</span>from_url<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost/1&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span>TaskiqEvents<span class="token punctuation">.</span>WORKER_SHUTDOWN<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> TaskiqState<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Here we close our pool on shutdown event.</span>
    <span class="token keyword">await</span> state<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_val</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> Context <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># Now we can use our pool.</span>
    redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis<span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_val</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> Context <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Now we can use our pool to set value.</span>
    <span class="token keyword">await</span> Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> broker<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>

    set_task <span class="token operator">=</span> <span class="token keyword">await</span> set_val<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
    set_result <span class="token operator">=</span> <span class="token keyword">await</span> set_task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span>with_logs<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> set_result<span class="token punctuation">.</span>is_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>set_result<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Cannot set value in redis. See logs.&quot;</span><span class="token punctuation">)</span>

    get_task <span class="token operator">=</span> <span class="token keyword">await</span> get_val<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span>
    get_res <span class="token operator">=</span> <span class="token keyword">await</span> get_task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Got redis value: </span><span class="token interpolation"><span class="token punctuation">{</span>get_res<span class="token punctuation">.</span>return_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> broker<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Cool tip!</p><p>If you want to add handlers programmatically, you can use the <code>broker.add_event_handler</code> function.</p></div><p>As you can see in this example, this worker will initialize the Redis pool at the startup. You can access the state from the context.</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h2><p>Using context directly is nice, but this way you won&#39;t get code-completion.</p><p>That&#39;s why we suggest you try TaskiqDependencies. The implementation is very similar to FastApi&#39;s dependencies. You can use classes, functions, and generators as dependencies.</p>`,14),r={href:"https://pypi.org/project/taskiq-dependencies/",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="hint-container danger"><p class="hint-container-title">Cool alarm!</p><p>FastAPI&#39;s <code>Depends</code> is not compatible with <code>TaskiqDepends</code>.</p></div><h3 id="how-dependencies-are-useful" tabindex="-1"><a class="header-anchor" href="#how-dependencies-are-useful" aria-hidden="true">#</a> How dependencies are useful</h3><p>You can use dependencies for better autocompletion and reduce the amount of code you write. Since the state is generic, we cannot guess the types of the state fields. Dependencies can be annotated with type hints and therefore provide better auto-completion.</p><p>Let&#39;s assume that you&#39;ve stored a Redis connection pool in the state as in the example above.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span>TaskiqEvents<span class="token punctuation">.</span>WORKER_STARTUP<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> TaskiqState<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Here we store connection pool on startup for later use.</span>
    state<span class="token punctuation">.</span>redis <span class="token operator">=</span> ConnectionPool<span class="token punctuation">.</span>from_url<span class="token punctuation">(</span><span class="token string">&quot;redis://localhost/1&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can access this variable by using the current execution context directly, like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> Context <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis<span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> redis<span class="token punctuation">:</span>
        <span class="token keyword">await</span> redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you hit the <code>TAB</code> button after the <code>context.state.</code> expression, your IDE won&#39;t give you any auto-completion. But we can create a dependency function to add auto-completion.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">redis_dep</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> Context <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Redis<span class="token punctuation">:</span>
    <span class="token keyword">return</span> Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis<span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>redis<span class="token punctuation">:</span> Redis <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>redis_dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, this dependency injection will be autocompleted. But, of course, state fields cannot be autocompleted, even in dependencies. But this way, you won&#39;t make any typos while writing tasks.</p><h3 id="how-do-dependencies-work" tabindex="-1"><a class="header-anchor" href="#how-do-dependencies-work" aria-hidden="true">#</a> How do dependencies work</h3><p>We build a graph of dependencies on startup. If the parameter of the function has the default value of <code>TaskiqDepends</code> this parameter will be treated as a dependency.</p><p>Dependencies can also depend on something. Also dependencies are optimized to <strong>not</strong> evaluate things many times.</p><p>For example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">def</span> <span class="token function">common_dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token comment"># For example it returns 8</span>
    <span class="token keyword">return</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dep1</span><span class="token punctuation">(</span>cd<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>common_dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token comment"># This function will return 9</span>
    <span class="token keyword">return</span> cd <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">def</span> <span class="token function">dep2</span><span class="token punctuation">(</span>cd<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>common_dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token comment"># This function will return 10</span>
    <span class="token keyword">return</span> cd <span class="token operator">+</span> <span class="token number">2</span>


<span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>
    d1<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dep1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    d2<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dep2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token comment"># This function will return 19</span>
    <span class="token keyword">return</span> d1 <span class="token operator">+</span> d2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this code, the dependency <code>common_dep</code> is going to be evaluated only once and the <code>dep1</code> and the <code>dep2</code> are going to receive the same value. You can control this behavior by using the <code>use_cache=False</code> parameter to you dependency. This parameter will force the dependency to reevaluate all it&#39;s subdependencies.</p><p>In this example we cannot predict the result. Since the <code>dep2</code> doesn&#39;t use cache for the <code>common_dep</code> function.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">def</span> <span class="token function">common_dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dep1</span><span class="token punctuation">(</span>cd<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>common_dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cd <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">def</span> <span class="token function">dep2</span><span class="token punctuation">(</span>cd<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>common_dep<span class="token punctuation">,</span> use_cache<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cd <span class="token operator">+</span> <span class="token number">2</span>


<span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>
    d1<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dep1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    d2<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dep2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> d1 <span class="token operator">+</span> d2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The graph for cached dependencies looks like this:</p>`,19),v=s("p",null,[n("The dependencies graph for "),s("code",null,"my_task"),n(" where "),s("code",null,"dep2"),n(" doesn't use cached value for "),s("code",null,"common_dep"),n(" looks like this:")],-1),m=e(`<h3 id="class-as-a-dependency" tabindex="-1"><a class="header-anchor" href="#class-as-a-dependency" aria-hidden="true">#</a> Class as a dependency</h3><p>You can use classes as dependencies, and they can also use other dependencies too.</p><p>Let&#39;s see an example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">db_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;let&#39;s pretend as this is a connection&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">MyDAO</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> db_conn<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>db_connection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>db_conn <span class="token operator">=</span> db_conn

    <span class="token keyword">def</span> <span class="token function">get_users</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db_conn<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>dao<span class="token punctuation">:</span> MyDAO <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span>get_users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the dependency for <code>my_task</code> function is declared with <code>TaskiqDependency()</code>. It&#39;s because you can omit the class if it&#39;s declared in type-hint for the parameter. This feature doesn&#39;t work with dependency functions, it&#39;s only for classes.</p><p>You can pass dependencies for classes in the constructor.</p><h3 id="generator-dependencies" tabindex="-1"><a class="header-anchor" href="#generator-dependencies" aria-hidden="true">#</a> Generator dependencies</h3><p>Generator dependencies are used to perform startup before task execution and teardown after the task execution.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Generator

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">def</span> <span class="token function">dependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Startup&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">yield</span> <span class="token string">&quot;value&quot;</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Shutdown&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>dep<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we can do something at startup before the execution and at shutdown after the task is completed.</p><p>If you want to do something asynchronously, convert this function to an asynchronous generator. Like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> typing <span class="token keyword">import</span> AsyncGenerator

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">dependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AsyncGenerator<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Startup&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>

    <span class="token keyword">yield</span> <span class="token string">&quot;value&quot;</span>

    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Shutdown&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_task</span><span class="token punctuation">(</span>dep<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exception-handling" tabindex="-1"><a class="header-anchor" href="#exception-handling" aria-hidden="true">#</a> Exception handling</h4><p>Generator dependencies can handle exceptions that happen in tasks. This feature is handy if you want your system to be more atomic.</p><p>For example, if you open a database transaction in your dependency and want to commit it only if the function you execute is completed successfully.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_transaction</span><span class="token punctuation">(</span>db_driver<span class="token punctuation">:</span> DBDriver <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span>get_driver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AsyncGenerator<span class="token punctuation">[</span>Transaction<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    trans <span class="token operator">=</span> db_driver<span class="token punctuation">.</span>begin_transaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># Here we give transaction to our dependant function.</span>
        <span class="token keyword">yield</span> trans
    <span class="token comment"># If exception was found in dependant function,</span>
    <span class="token comment"># we rollback our transaction.</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">await</span> trans<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token comment"># Here we commit if everything is fine.</span>
    <span class="token keyword">await</span> trans<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t want to propagate exceptions in dependencies, you can add <code>--no-propagate-errors</code> option to <code>worker</code> command.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>taskiq worker my_file:broker --no-propagate-errors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In this case, no exception will ever going to be propagated to any dependency.</p><h3 id="default-dependencies" tabindex="-1"><a class="header-anchor" href="#default-dependencies" aria-hidden="true">#</a> Default dependencies</h3><p>By default taskiq has only two dependencies:</p><ul><li>Context from <code>taskiq.context.Context</code></li><li>TaskiqState from <code>taskiq.state.TaskiqState</code></li></ul><h3 id="adding-first-level-dependencies" tabindex="-1"><a class="header-anchor" href="#adding-first-level-dependencies" aria-hidden="true">#</a> Adding first-level dependencies</h3><p>You can expand default list of available dependencies for you application. Taskiq have an ability to add new first-level dependencies using brokers.</p><p>The AsyncBroker interface has a function called <code>add_dependency_context</code> and you can add more default dependencies to the taskiq. This may be useful for libraries if you want to add new dependencies to users.</p>`,25);function b(y,h){const o=p("ExternalLinkIcon"),t=p("Mermaid");return i(),l("div",null,[d,s("p",null,[n("We use the "),s("a",r,[n("taskiq-dependencies"),a(o)]),n(" package to provide autocompetion. You can easily integrate it in your own project.")]),k,a(t,{id:"mermaid-113",code:"eJxLL0osyFAIceFSAALH6OT83Nz8vPiU1IJYsIhTNJBpCGE7g9hGELZLdG5lfElicTaE66igq2un4ITEdoZoB7MhhjtD2QC8vBpx"}),v,a(t,{id:"mermaid-117",code:"eJxLL0osyFAIceFSAALH6OT83Nz8vPiU1IJYsIhTNJBpCGG7ROdWxpckFmdDuM4gKSMIu7g0CWJQeWZJRn5piUJyYnJGKlgKbK4hhsGpeSkQKxV0de0UnCBsQzDHGWIzmA1xlzOUDQCEcyvm"}),m])}const g=c(u,[["render",b],["__file","state-and-deps.html.vue"]]);export{g as default};
