import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as l,b as n,e as s,d as a,w as r,a as o}from"./app-0ac50be1.js";const u={},d=n("h1",{id:"taskiq-fastapi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#taskiq-fastapi","aria-hidden":"true"},"#"),s(" Taskiq + FastAPI")],-1),k=n("p",null,"FastAPI is a highly popular async web framework in Python. It has gained its popularity because of two things:",-1),v=n("ol",null,[n("li",null,"It's easy to use;"),n("li",null,"Cool dependency injection.")],-1),m={href:"https://github.com/taskiq-python/taskiq-fastapi",target:"_blank",rel:"noopener noreferrer"},h=o(`<p>Let&#39;s see what we got here. In this library, we provide users with only one public function called <code>init</code>. It takes a broker and a string path (as in uvicorn) to the fastapi application (or factory function). People should call this function in their main broker file.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> taskiq <span class="token keyword">import</span> ZeroMQBroker
<span class="token keyword">import</span> taskiq_fastapi

broker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>

taskiq_fastapi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>broker<span class="token punctuation">,</span> <span class="token string">&quot;my_package.application:app&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two rules to make everything work as you expect:</p><ol><li>Add <code>TaskiqDepends</code> as a default value for every parameter with <code>Request</code> or <code>HTTPConnection</code> types in base dependencies.</li><li>Use only <code>TaskiqDepends</code> in tasks.</li></ol><div class="hint-container tip"><p class="hint-container-title">Cool and important note!</p><p>The <code>Request</code> or <code>HTTPConnection</code> that you&#39;ll get injected in your task is not the same request or connection you have had in your handler when you were sending the task!</p></div><p>Many fastapi dependency functions depend on <code>fastapi.Request</code>. We provide a mocked request to such dependencies. But taskiq cannot resolve dependencies until you explicitly specify that this parameter must be injected.</p><p>As an example. If you previously had a dependency like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Request
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any

<span class="token keyword">def</span> <span class="token function">get_redis_pool</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span>app<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis_pool

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To make it resolvable in taskiq, people should add <code>TaskiqDepends</code> as a default value for each parameter. Like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Request
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_redis_pool</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span>app<span class="token punctuation">.</span>state<span class="token punctuation">.</span>redis_pool

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also you want to call startup of your brokers somewhere.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI
<span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker

app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span><span class="token string">&quot;startup&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">app_startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> broker<span class="token punctuation">.</span>is_worker_process<span class="token punctuation">:</span>
        <span class="token keyword">await</span> broker<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span><span class="token string">&quot;shutdown&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">app_shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> broker<span class="token punctuation">.</span>is_worker_process<span class="token punctuation">:</span>
        <span class="token keyword">await</span> broker<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),y={href:"https://github.com/taskiq-python/examples/",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"testing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#testing","aria-hidden":"true"},"#"),s(" Testing")],-1),f=n("code",null,"InMemoryBroker",-1),w=o(`<p>Let&#39;s imagine that you have a fixture of your application. It returns a new fastapi application to use in tests.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">fastapi_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> FastAPI<span class="token punctuation">:</span>
    <span class="token keyword">return</span> get_app<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Right after this fixture, we define another one.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> taskiq_fastapi


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">init_taskiq_deps</span><span class="token punctuation">(</span>fastapi_app<span class="token punctuation">:</span> FastAPI<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># This is important part. Here we add dependency context,</span>
    <span class="token comment"># this thing helps in resolving dependencies for tasks</span>
    <span class="token comment"># for inmemory broker.</span>
    taskiq_fastapi<span class="token punctuation">.</span>populate_dependency_context<span class="token punctuation">(</span>broker<span class="token punctuation">,</span> fastapi_app<span class="token punctuation">)</span>

    <span class="token keyword">yield</span>

    broker<span class="token punctuation">.</span>custom_dependency_context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This fixture has autouse flag, which means it would run on every test automatically.</p>`,5);function _(g,q){const e=t("ExternalLinkIcon"),i=t("RouterLink");return c(),l("div",null,[d,k,v,n("p",null,[s('In taskiq, we try to make our libraries easy to use, and We have a dependency injection too. So we have created the library "'),n("a",m,[s("taskiq-fastapi"),a(e)]),s('" to make integration with FastAPI as smooth as possible.')]),h,n("p",null,[s("And that's it. Now you can use your taskiq tasks with functions and classes that depend on FastAPI dependenices. You can find bigger examples in the "),n("a",y,[s("examples repo"),a(e)]),s(".")]),b,n("p",null,[s("Testing is no different from general testing advice from articles about "),a(i,{to:"/guide/testing-taskiq.html"},{default:r(()=>[s("testing")]),_:1}),s(". But if you use "),f,s(" in your tests, you need to provide it with a custom dependency context because it doesn't run as a worker process.")]),w])}const I=p(u,[["render",_],["__file","taskiq-with-fastapi.html.vue"]]);export{I as default};
