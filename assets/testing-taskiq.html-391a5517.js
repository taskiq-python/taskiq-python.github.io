import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as d,e as o,w as a,b as n,d as s,a as l}from"./app-09ee9d4a.js";const k={},v=l('<h1 id="testing-with-taskiq" tabindex="-1"><a class="header-anchor" href="#testing-with-taskiq" aria-hidden="true">#</a> Testing with taskiq</h1><p>Every time we write programs, we want them to be correct. To achieve this, we use tests. Taskiq allows you to write tests easily as if tasks were normal functions.</p><p>Let&#39;s dive into examples.</p><h2 id="preparations" tabindex="-1"><a class="header-anchor" href="#preparations" aria-hidden="true">#</a> Preparations</h2><h3 id="environment-setup" tabindex="-1"><a class="header-anchor" href="#environment-setup" aria-hidden="true">#</a> Environment setup</h3><p>For testing you maybe don&#39;t want to use actual distributed broker. But still you want to validate your logic. Since python is an interpreted language, you can easily replace you broker with another one if the expression is correct.</p><p>We can set an environment variable, that indicates that currently we&#39;re running in testing environment.</p>',7),m=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},"ENVIRONMENT"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"pytest"'),s(`
pytest `),n("span",{class:"token parameter variable"},"-vv"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[n("span",{class:"token variable"},"$env"),s(":ENVIRONMENT = "),n("span",{class:"token string"},"'pytest'"),s(`
pytest `),n("span",{class:"token operator"},"-"),s(`vv
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b={href:"https://pypi.org/project/pytest-env/",target:"_blank",rel:"noopener noreferrer"},h=n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,[n("span",{class:"token section"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token section-name selector"},"pytest"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"token key attr-name"},"env"),s(),n("span",{class:"token punctuation"},"="),s(`
    `),n("span",{class:"token key attr-name"},"ENVIRONMENT"),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"pytest"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"tool.pytest.ini_options"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"env"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},'"ENVIRONMENT=pytest"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("h3",{id:"async-tests",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#async-tests","aria-hidden":"true"},"#"),s(" Async tests")],-1),f={href:"https://anyio.readthedocs.io/en/stable/testing.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://pypi.org/project/anyio/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"conftest.py",-1),q=l(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">anyio_backend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;asyncio&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After the preparations are done, we need to modify the broker&#39;s file in your project.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> AsyncBroker<span class="token punctuation">,</span> InMemoryBroker<span class="token punctuation">,</span> ZeroMQBroker

env <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;ENVIRONMENT&quot;</span><span class="token punctuation">)</span>

broker<span class="token punctuation">:</span> AsyncBroker <span class="token operator">=</span> ZeroMQBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> env <span class="token keyword">and</span> env <span class="token operator">==</span> <span class="token string">&quot;pytest&quot;</span><span class="token punctuation">:</span>
    broker <span class="token operator">=</span> InMemoryBroker<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we added an <code>if</code> statement. If the expression is true, we replace our broker with an imemory broker. The main point here is to not have an actual connection during testing. It&#39;s useful because inmemory broker has the same interface as a real broker, but it doesn&#39;t send tasks actually.</p><h2 id="testing-tasks" tabindex="-1"><a class="header-anchor" href="#testing-tasks" aria-hidden="true">#</a> Testing tasks</h2><p>Let&#39;s define a task.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker

<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">parse_int</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This simple task may be defined anywhere in your project. If you want to test it, just import it and call as a normal function.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">from</span> your_project<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> parse_int

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>anyio</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token keyword">await</span> parse_int<span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And that&#39;s it. Test should pass.</p><p>What if you want to test a function that uses task. Let&#39;s define such function.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker

<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">parse_int</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">parse_and_add_one</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> parse_int<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span>return_value <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And since we replaced our broker with <code>InMemoryBroker</code>, we can just call it. It would work as you expect and tests should pass.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>anyio</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_add_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token keyword">await</span> parse_and_add_one<span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a> Dependency injection</h2><p>If you use dependencies in your tasks, you may think that this can become a problem. But it&#39;s not. Here&#39;s what we came up with. We added a method called <code>add_dependency_context</code> to the broker. It sets base dependencies for dependency resolution. You can use it for tests.</p><p>Let&#39;s add a task that depends on <code>Path</code>. I guess this example is not meant to be used in production code bases, but it&#39;s suitable for illustration purposes.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">from</span> taskiq <span class="token keyword">import</span> TaskiqDepends

<span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker


<span class="token decorator annotation punctuation">@broker<span class="token punctuation">.</span>task</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">modify_path</span><span class="token punctuation">(</span>some_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> TaskiqDepends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> some_path<span class="token punctuation">.</span>parent <span class="token operator">/</span> <span class="token string">&quot;taskiq.py&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To test the task itself, it&#39;s not different to the example without dependencies, but we jsut need to pass all expected dependencies manually as function&#39;s arguments or key-word arguments.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker

<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>anyio</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_modify_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    modified <span class="token operator">=</span> <span class="token keyword">await</span> modify_path<span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">str</span><span class="token punctuation">(</span>modified<span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;taskiq.py&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But what if we want to test task execution? Well, you don&#39;t need to provide dependencies manually, you must mutate dependency_context before calling a task. We suggest to do it in fixtures.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">from</span> your_project<span class="token punctuation">.</span>taskiq <span class="token keyword">import</span> broker
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path


<span class="token comment"># We use autouse, so this fixture</span>
<span class="token comment"># is called automatically before all tests.</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span> autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">init_taskiq_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Here we use Path, but you can use other</span>
    <span class="token comment"># pytest fixtures here. E.G. FastAPI app.</span>
    broker<span class="token punctuation">.</span>add_dependency_context<span class="token punctuation">(</span><span class="token punctuation">{</span>Path<span class="token punctuation">:</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">yield</span>

    <span class="token comment"># After the test we clear all custom dependencies.</span>
    broker<span class="token punctuation">.</span>custom_dependency_context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This fixture will update dependency context for our broker before every test. Now tasks with dependencies can be used. Let&#39;s try it out.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>anyio</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_modify_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> <span class="token keyword">await</span> modify_path<span class="token punctuation">.</span>kiq<span class="token punctuation">(</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>wait_result<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>return_value<span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;taskiq.py&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This should pass. And that&#39;s it for now.</p>`,25);function T(N,j){const i=c("Tabs"),p=c("ExternalLinkIcon");return u(),d("div",null,[v,o(i,{id:"21",data:[{id:"linux|macos"},{id:"windows"}]},{title0:a(({value:e,isActive:t})=>[s("linux|macos")]),title1:a(({value:e,isActive:t})=>[s("windows")]),tab0:a(({value:e,isActive:t})=>[m]),tab1:a(({value:e,isActive:t})=>[y]),_:1}),n("p",null,[s("Or we can even tell pytest to set this environment for us, just before executing tests using "),n("a",b,[s("pytest-env"),o(p)]),s(" plugin.")]),o(i,{id:"32",data:[{id:"pytest.ini"},{id:"pyproject.toml"}]},{title0:a(({value:e,isActive:t})=>[s("pytest.ini")]),title1:a(({value:e,isActive:t})=>[s("pyproject.toml")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[w]),_:1},8,["data"]),g,n("p",null,[s("Since taskiq is fully async, we suggest using "),n("a",f,[s("anyio"),o(p)]),s(" to run async functions in pytest. Install the "),n("a",_,[s("lib"),o(p)]),s(" and place this fixture somewhere in your root "),x,s(" file.")]),q])}const E=r(k,[["render",T],["__file","testing-taskiq.html.vue"]]);export{E as default};
