const V=Object.entries,nt=Object.fromEntries,ot="ENTRIES",T="KEYS",R="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case R:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),A=Math.min(i-1,a+s);for(let F=f;F<A;++F){const v=g!==t[F],z=o[p+F]+ +v,y=o[p+F+1]+1,w=o[m+F]+1,L=o[m+F+1]=Math.min(z,y,w);L<l&&(l=L)}if(l>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,it(this._tree,t)}entries(){return new D(this,ot)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,R)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},it=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)q(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},q=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)q(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",lt="and_not",ht=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,dt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},H=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[lt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},gt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},mt=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,dt),u=o.get(t);u==null||u.get(s)==null?J(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},pt={k:1.2,b:.7,d:.5},Ft={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},U={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:pt},_t={combineWith:P,prefix:(e,t,s)=>t===s.length-1},At={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={...At,...Y},X=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){mt(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const A=g.get(l),F=e._fieldLength.get(l)[h],v=ft(A,m,e._documentCount,F,p,r),z=n*a*f*v,y=d.get(l);if(y){y.score+=z,ht(y.terms,t);const w=H(y.match,s);w?w.push(c):y.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:H(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...U.weights,...i},h=e._index.get(t.term),g=B(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const A=l.length-t.term.length;if(!A)continue;p?.delete(l);const F=a*l.length/(l.length+.3*A);B(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,A]=p.get(l);if(!A)continue;const F=c*l.length/(l.length+A);B(e,t.term,l,F,f,o,u,d,g)}return g},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>K(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(gt(i)).map(a=>Ct(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class zt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...Ft,...t,autoVacuum:s,searchOptions:{...U,...t.searchOptions||{}},autoSuggestOptions:{..._t,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const wt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new zt(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),bt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return Q(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(A=>!A.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>j(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>j(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const A=m.map(F=>j(f,F)).filter(F=>F!==null);A.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:A},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):bt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=rt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),k=nt(V(JSON.parse("{\"/\":{\"documentCount\":94,\"nextId\":94,\"documentIds\":{\"0\":\"0\",\"1\":\"0#what-is-taskiq-in-a-nutshell\",\"2\":\"0#installation\",\"3\":\"1\",\"4\":\"1#setting-up-environment\",\"5\":\"1#linting\",\"6\":\"1#testing\",\"7\":\"2\",\"8\":\"3\",\"9\":\"3#inmemorybroker\",\"10\":\"3#zeromqbroker\",\"11\":\"3#async-shared-broker-and-shared-tasks\",\"12\":\"3#custom-brokers\",\"13\":\"3#aiopikabroker-for-rabbitmq\",\"14\":\"3#redis-broker\",\"15\":\"3#nats-broker\",\"16\":\"4\",\"17\":\"4#simple-retry-middleware\",\"18\":\"4#prometheus-middleware\",\"19\":\"5\",\"20\":\"5#dummyresultbackend\",\"21\":\"5#redis-result-backend\",\"22\":\"6\",\"23\":\"6#redisschedulesource\",\"24\":\"6#labelschedulesource\",\"25\":\"7\",\"26\":\"7#contents\",\"27\":\"8\",\"28\":\"8#acknowledgement\",\"29\":\"8#conventions\",\"30\":\"9\",\"31\":\"10\",\"32\":\"11\",\"33\":\"12\",\"34\":\"13\",\"35\":\"14\",\"36\":\"15\",\"37\":\"16\",\"38\":\"16#adding-taskiq-integration\",\"39\":\"16#testing\",\"40\":\"17\",\"41\":\"17#testing\",\"42\":\"18\",\"43\":\"18#what-is-taskiq\",\"44\":\"18#why-not-use-existing-libraries\",\"45\":\"19\",\"46\":\"19#broker\",\"47\":\"19#kicker\",\"48\":\"19#messages\",\"49\":\"19#result-backend\",\"50\":\"19#workers\",\"51\":\"19#middlewares\",\"52\":\"19#context\",\"53\":\"20\",\"54\":\"20#worker\",\"55\":\"20#auto-importing\",\"56\":\"20#acknowledgements\",\"57\":\"20#type-casts\",\"58\":\"20#hot-reload\",\"59\":\"20#other-parameters\",\"60\":\"20#scheduler\",\"61\":\"20#parameters\",\"62\":\"21\",\"63\":\"22\",\"64\":\"22#installation\",\"65\":\"22#running-tasks\",\"66\":\"22#distributed-run\",\"67\":\"22#timeouts\",\"68\":\"23\",\"69\":\"23#serializers\",\"70\":\"23#formatters\",\"71\":\"24\",\"72\":\"24#multiple-sources\",\"73\":\"24#working-with-timezones\",\"74\":\"24#skipping-first-run\",\"75\":\"24#dynamic-scheduling\",\"76\":\"25\",\"77\":\"25#state\",\"78\":\"25#dependencies\",\"79\":\"25#how-dependencies-are-useful\",\"80\":\"25#how-do-dependencies-work\",\"81\":\"25#class-as-a-dependency\",\"82\":\"25#generator-dependencies\",\"83\":\"25#exception-handling\",\"84\":\"25#generics\",\"85\":\"25#default-dependencies\",\"86\":\"25#adding-first-level-dependencies\",\"87\":\"26\",\"88\":\"26#preparations\",\"89\":\"26#environment-setup\",\"90\":\"26#async-tests\",\"91\":\"26#testing-tasks\",\"92\":\"26#dependency-injection\",\"93\":\"27\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[4],\"1\":[6,52],\"2\":[1,12],\"3\":[2,77],\"4\":[3,48],\"5\":[1,30],\"6\":[1,55],\"7\":[2,16],\"8\":[2,10],\"9\":[1,33],\"10\":[1,73],\"11\":[5,54],\"12\":[2,31],\"13\":[4,8],\"14\":[2,7],\"15\":[2,7],\"16\":[2,16],\"17\":[3,65],\"18\":[2,55],\"19\":[3,17],\"20\":[1,31],\"21\":[3,33],\"22\":[3,17],\"23\":[1,49],\"24\":[1,98],\"25\":[2,27],\"26\":[2],\"27\":[1,120],\"28\":[1,66],\"29\":[1,54],\"30\":[1,117],\"31\":[1,68],\"32\":[2,121],\"33\":[2,114],\"34\":[2,37],\"35\":[3,97],\"36\":[3,188],\"37\":[3,77],\"38\":[3,137],\"39\":[1,95],\"40\":[3,183],\"41\":[1,92],\"42\":[1],\"43\":[3,79],\"44\":[6,86],\"45\":[2,54],\"46\":[1,61],\"47\":[1,84],\"48\":[1,70],\"49\":[2,55],\"50\":[1,106],\"51\":[1,130],\"52\":[1,70],\"53\":[1,37],\"54\":[1,27],\"55\":[2,58],\"56\":[1,37],\"57\":[2,72],\"58\":[2,58],\"59\":[2,90],\"60\":[1,29],\"61\":[1,71],\"62\":[2,193],\"63\":[2],\"64\":[1,45],\"65\":[2,175],\"66\":[2,177],\"67\":[1,52],\"68\":[3,36],\"69\":[1,92],\"70\":[1,74],\"71\":[2,157],\"72\":[2,85],\"73\":[3,73],\"74\":[3,71],\"75\":[2,173],\"76\":[3],\"77\":[1,77],\"78\":[1,50],\"79\":[4,111],\"80\":[4,84],\"81\":[4,48],\"82\":[2,36],\"83\":[2,62],\"84\":[1,26],\"85\":[2,12],\"86\":[4,44],\"87\":[3,31],\"88\":[1],\"89\":[2,59],\"90\":[2,95],\"91\":[2,78],\"92\":[2,146],\"93\":[1,3]},\"averageFieldLength\":[2.0319148936170217,68.33726844963549],\"storedFields\":{\"0\":{\"h\":\"Task manager for asyncio\"},\"1\":{\"h\":\"What is taskiq in a nutshell\",\"t\":[\"Consider taskiq as an asyncio celery implementation. It uses almost the same patterns, but it's more modern and flexible.\",\"It's not a drop-in replacement for any other task manager. It has a different ecosystem of libraries and a different set of features. Also, it doesn't work for synchronous projects. You won't be able to send tasks synchronously.\"]},\"2\":{\"h\":\"Installation\",\"t\":[\"You can install taskiq with pip or your favorite dependency manager:\",\"pip install taskiq\\n\"]},\"3\":{\"h\":\"Contribution guide\",\"t\":[\"We love contributions. This guide is for all folks who want to make taskiq better together. We have several rules for contributors:\",\"Please do not add malware.\",\"Please make sure that your request solves the problem.\",\"If you struggle with something or feel frustrated, you either create an issue, create a discussions. page or publish a draft PR and ask your question in the description.\",\"We have lots of tests in CI. But since CI runs from first-time contributors should be approved, you better test locally. It just takes less time to prepare PR for merging.\"]},\"4\":{\"h\":\"Setting up environment\",\"t\":[\"We use poetry for managing dependencies. To install it, please follow the official guide in documentation.\",\"After you have cloned the taskiq repo, install dependencies using this command:\",\"poetry install \",\"It will install all required dependencies. If you want to run pytest against different python environments, please install pyenv using instructions from its readme.\",\"After pyenv is ready, you can install all python versions using this command:\",\"pyenv install \"]},\"5\":{\"h\":\"Linting\",\"t\":[\"We have pre-commit configured with all our settings. We highly recommend you to install it as a git hook using pre-commit install command.\",\"But even without installation, you can run all lints manually:\",\"pre-commit run -a \"]},\"6\":{\"h\":\"Testing\",\"t\":[\"You can run pytest without any parameters and it will do the thing.\",\"pytest \",\"If you want to speedup testings, you can run it with -n option from pytest-xdist to run tests in parallel.\",\"pytest -n 2 \",\"Also we use tox to test against different environments. You can publish a PR to run pytest with different python versions, but if you want to do it locally, just run tox command.\",\"tox \",\"Tox assumes that you've installed python versions using pyenv with command above.\"]},\"7\":{\"h\":\"Available components\",\"t\":[\"In this section, you can find a list of officially supported plugins for the taskiq.\"]},\"8\":{\"h\":\"Available brokers\",\"t\":[\"In this section we'll list officially supported brokers.\"]},\"9\":{\"h\":\"InMemoryBroker\",\"t\":[\"This is a special broker for local development. It uses the same functions to execute tasks, but all tasks are executed locally in the current thread. By default it uses InMemoryResultBackend but this can be overridden.\"]},\"10\":{\"h\":\"ZeroMQBroker\",\"t\":[\"This broker uses ZMQ to communicate between worker and client processes. It's suitable for small projects with only ONE worker process, because of the ZMQ architecture.\",\"It publishes messages on the local port. All worker processes are reading messages from this port. If you run many worker processes, all tasks will be executed N times, where N is the total number of worker processes.\",\"Be careful!\",\"If you choose this type of broker, please run taskiq with -w 1 parameter, otherwise you may encounter undefined behavior.\",\"To run this broker please install the pyzmq lib. Or you can taskiq with zmq extra.\"]},\"11\":{\"h\":\"Async shared broker and shared tasks\",\"t\":[\"This is also a special broker. You cannot use it directly. It's used to create shared tasks. These tasks can be imported along with user defined tasks. To define a shared task please use this broker.\",\"from taskiq.brokers.shared_broker import async_shared_broker @async_shared_broker.task def my_task() -> bool: return True \",\"To kiq this task you have to options:\",\"Explicitly define broker using kicker for this kiq;\",\"Add default broker for all shared tasks.\"]},\"12\":{\"h\":\"Custom brokers\",\"t\":[\"These brokers are not parts of the core taskiq lib. You can install them as a separate packages.\",\"You can read more about parameters and abilities of these brokers in README.md of each repo.\"]},\"13\":{\"h\":\"AioPikaBroker (for RabbitMQ)\",\"t\":[\"Project link: taskiq-aio-pika.\",\"pip install taskiq-aio-pika \"]},\"14\":{\"h\":\"Redis broker\",\"t\":[\"Project link: taskiq-redis.\",\"pip install taskiq-redis \"]},\"15\":{\"h\":\"NATS broker\",\"t\":[\"Project link: taskiq-nats.\",\"pip install taskiq-nats \"]},\"16\":{\"h\":\"Available middlewares\",\"t\":[\"Middlewares allow you to execute code when specific event occurs. Taskiq has several default middlewares.\"]},\"17\":{\"h\":\"Simple retry middleware\",\"t\":[\"This middleware allows you to restart functions on errors. If exception was raised during task execution, the task would be resent with same parameters.\",\"To enable this middleware, add it to the list of middlewares for a broker.\",\"from taskiq import ZeroMQBroker, SimpleRetryMiddleware broker = ZeroMQBroker().with_middlewares( SimpleRetryMiddleware(default_retry_count=3), ) \",\"After that you can add a label to task that you want to restart on error.\",\" @broker.task(retry_on_error=True, max_retries=20) async def test(): raise Exception(\\\"AAAAA!\\\") \",\"retry_on_error enables retries for a task. max_retries is the maximum number of times,.\"]},\"18\":{\"h\":\"Prometheus middleware\",\"t\":[\"You can enable prometheus metrics for workers by adding PrometheusMiddleware. To do so, you need to install prometheus_client package or you can install metrics extras for taskiq.\",\"from taskiq import ZeroMQBroker, PrometheusMiddleware broker = ZeroMQBroker().with_middlewares( PrometheusMiddleware(server_addr=\\\"0.0.0.0\\\", server_port=9000), ) \",\"After that, metrics will be available at port 9000. Of course, this parameter can be configured.\\nIf you have other metrics, they'll be shown as well.\"]},\"19\":{\"h\":\"Available result backends\",\"t\":[\"Result backends are used to store execution results. This includes:\",\"return value;\",\"Execution time in seconds.\"]},\"20\":{\"h\":\"DummyResultBackend\",\"t\":[\"This result backend doesn't do anything. It doesn't store results and cannot be used in cases, where you need actual results.\",\"This broker will always return None for any return_value. Please be careful.\"]},\"21\":{\"h\":\"Redis result backend\",\"t\":[\"This result backend is not part of the core taskiq library. You can install it as a separate package taskiq-redis.\",\"pip install taskiq-redis \",\"You can read more about parameters and abilities of this broker in README.md.\"]},\"22\":{\"h\":\"Available schedule sources\",\"t\":[\"These objects are used to fetch current schedule for tasks. Currently we have only one schedule source.\"]},\"23\":{\"h\":\"RedisScheduleSource\",\"t\":[\"This source is capable of adding new schedules in runtime. It uses Redis as a storage for schedules. To use this source you need to install taskiq-redids package.\",\"from taskiq_redis import RedisScheduleSource from taskiq import TaskiqScheduler redis_source = RedisScheduleSource(\\\"redis://localhost:6379/0\\\") scheduler = TaskiqScheduler(broker, sources=[redis_source]) \",\"For more information on how to use dynamic schedule sources read .\"]},\"24\":{\"h\":\"LabelScheduleSource\",\"t\":[\"This source parses labels of tasks, and if it finds a schedule label, it considers this task as scheduled.\",\"The format of the schedule label is the following:\",\"@broker.task( schedule=[ { \\\"cron\\\": \\\"* * * * *\\\", # type: str, either cron or time shoule be specified. \\\"cron_offset\\\": None # type: str | timedelta | None, can be ommited. \\\"time\\\": None # type: datetime | None, either cron or time shoule be specified. \\\"args\\\": [], # type List[Any] | None, can be omitted. \\\"kwargs\\\": {}, # type: Dict[str, Any] | None, can be omitted. \\\"labels\\\": {}, # type: Dict[str, Any] | None, can be omitted. } ] ) async def my_task(): ... \",\"Parameters:\",\"cron - crontab string when to run the task.\",\"cron_offset - timezone offset for cron values. Explained \",\"time - specific time when send the task.\",\"args - args to use, when invoking the task.\",\"kwargs - key-word arguments to use when invoking the task.\",\"labels - additional labels to use when invoking the task.\",\"To enable this source, just add it to the list of sources:\",\"from taskiq.scheduler import TaskiqScheduler from taskiq.schedule_sources import LabelScheduleSource broker = ... scheduler = TaskiqScheduler( broker=broker, sources=[LabelScheduleSource(broker)], ) \",\"Cool notice!\",\"In order to resolve all labels correctly, don't forget to import\\nall task modules using CLI interface.\"]},\"25\":{\"h\":\"Extending taskiq\",\"t\":[\"Taskiq is super extendable. The core library comes with different abstract classes. You can implement these abstract classes to extend functionality.\",\"All abstract classes can be found in taskiq.abc package.\"]},\"26\":{\"h\":\"Contents:\"},\"27\":{\"h\":\"Brokers\",\"t\":[\"To add a new broker you need to implement two methods kick and listen of the taskiq.abc.broker.AsyncBroker abstract class. But along with them we have helper methods. Such as shutdown and startup.\",\"Here is a template for new brokers:\",\"from typing import AsyncGenerator, Union from taskiq import AckableMessage, AsyncBroker, BrokerMessage class MyBroker(AsyncBroker): def __init__(self) -> None: # Please call this super method to set default values to # many different fields. super().__init__() async def startup(self) -> None: # Here you can do some startup magic. # Like opening a connection. return await super().startup() async def shutdown(self) -> None: # Here you can perform shutdown operations. # Like closing connections. return await super().shutdown() async def kick(self, message: BrokerMessage) -> None: # Send a message.message. pass async def listen(self) -> AsyncGenerator[Union[bytes, AckableMessage], None]: while True: # Get new message. new_message: bytes = ... # type: ignore # Yield it! yield new_message \",\"The kick method takes a BrokerMessage as a parameter. The BrokerMessage class is a handy helper class for brokers. You can use information from the BrokerMessage to alter the delivery method.\",\"\\\"cool warning!\\\"\",\"As a broker developer, please send only raw bytes from the message field of a BrokerMessage if possible. Serializing it to the string may result in a problem if message bytes are not utf-8 compatible.\"]},\"28\":{\"h\":\"Acknowledgement\",\"t\":[\"The listen method should yield raw bytes of a message. But if your broker supports acking or rejecting messages, the broker should return taskiq.AckableMessage with required fields.\",\"For example:\",\" async def listen(self) -> AsyncGenerator[AckableMessage, None]: for message in self.my_channel: yield AckableMessage( data=message.bytes, # Ack is a function that takes no parameters. # So you either set here method of a message, # or you can make a closure. ack=message.ack # Can be set to None if broker doesn't support it. reject=message.reject ) \"]},\"29\":{\"h\":\"Conventions\",\"t\":[\"For brokers, we have several conventions. It's good if your broker implements them. These rules are optional, and it's ok if your broker doesn't implement them.\",\"If the message has the delay label with int or float number, this task's execution must be delayed with the same number of seconds as in the delay label.\",\"If the message has the priority label, this message must be sent with priority. Tasks with\\nhigher priorities are executed sooner.\"]},\"30\":{\"h\":\"CLI\",\"t\":[\"You can easily add new subcommands to taskiq. All default subcommands also use this mechanism, since it's easy to use.\",\"At first you need to add a class that implements taskiq.abc.cmd.TaskiqCMD abstract class.\",\"from argparse import ArgumentParser from typing import Sequence from taskiq.abc.cmd import TaskiqCMD class MyCommand(TaskiqCMD): short_help = \\\"Demo command\\\" def exec(self, args: Sequence[str]) -> None: parser = ArgumentParser() parser.add_argument( \\\"--test\\\", dest=\\\"test\\\", default=\\\"default\\\", help=\\\"My test parameter.\\\", ) parsed = parser.parse_args(args) print(parsed) \",\"In the exec method, you should parse incoming arguments. But since all CLI arguments to taskiq are shifted you can ignore the args parameter.\",\"Also, you can use your favorite tool to build CLI, like click or typer.\",\"After you have such class, you need to add entrypoint that points to that class.\",\"You can read more about entry points in python documentation. The subcommand name is the same as the name of the entry point you've created.\",\"$ taskiq demo --help usage: demo [-h] [--test TEST] optional arguments: -h, --help show this help message and exit --test TEST My test parameter. \",\"$ taskiq demo --test aaa Namespace(test='aaa') \"]},\"31\":{\"h\":\"Middlewares\",\"t\":[\"Middlewares are super helpful. You can inject some code before or after task's execution.\",\"Middlewares must implement taskiq.abc.middleware.TaskiqMiddleware abstract class. Every method of a middleware can be either sync or async. Taskiq will execute it as you expect.\",\"For example:\",\"Also, middlewares always have reference to the current broker in self.broker field. If you want to kick a message during the execution of some middleware hooks, you may use self.broker to do so.\",\"Taskiq-pipelines uses middlewares to\\ncall next tasks.\"]},\"32\":{\"h\":\"Result backend\",\"t\":[\"Result backends are used to store information about task execution. To create new result_backend you have to implement taskiq.abc.result_backend.AsyncResultBackend class.\",\"Here's a minimal example of a result backend:\",\"from typing import TypeVar from taskiq import TaskiqResult from taskiq.abc.result_backend import AsyncResultBackend _ReturnType = TypeVar(\\\"_ReturnType\\\") class MyResultBackend(AsyncResultBackend[_ReturnType]): async def startup(self) -> None: \\\"\\\"\\\"Do something when starting broker.\\\"\\\"\\\" async def shutdown(self) -> None: \\\"\\\"\\\"Do something on shutdown.\\\"\\\"\\\" async def set_result( self, task_id: str, result: TaskiqResult[_ReturnType], ) -> None: \\\"\\\"\\\" Set result in your backend. :param task_id: current task id. :param result: result of execution. \\\"\\\"\\\" async def get_result( self, task_id: str, with_logs: bool = False, ) -> TaskiqResult[_ReturnType]: \\\"\\\"\\\" Here you must retrieve result by id. Logs is a part of a result. Here we have a parameter whether you want to fetch result with logs or not, because logs can have a lot of info and sometimes it's critical to get only needed information. :param task_id: id of a task. :param with_logs: whether to fetch logs. :return: result. \\\"\\\"\\\" return ... # type: ignore async def is_result_ready( self, task_id: str, ) -> bool: \\\"\\\"\\\" Check if result exists. This function must check whether result is available in your result backend without fetching the result. :param task_id: id of a task. :return: True if result is ready. \\\"\\\"\\\" return ... # type: ignore \",\"Cool tip!\",\"It's a good practice to skip fetching logs from the storage unless with_logs=True is explicitly specified.\",\"Important note!\",\"with_logs param is now deprecated. It will be removed in future releases.\"]},\"33\":{\"h\":\"Schedule source\",\"t\":[\"Schedule sources are used to get schedule for tasks. To create new schedule source you have to implement the taskiq.abc.schedule_source.ScheduleSource abstract class.\",\"Here's a minimal example of a schedule source:\",\"from typing import List from taskiq import ScheduledTask, ScheduleSource class MyScheduleSource(ScheduleSource): async def startup(self) -> None: \\\"\\\"\\\"Do something when starting broker.\\\"\\\"\\\" async def shutdown(self) -> None: \\\"\\\"\\\"Do something on shutdown.\\\"\\\"\\\" async def get_schedules(self) -> List[\\\"ScheduledTask\\\"]: # Here you must return list of scheduled tasks from your source. return [ ScheduledTask( task_name=\\\"\\\", labels={}, args=[], kwargs={}, cron=\\\"* * * * *\\\", ), ] # This method is optional. You may not implement this. # It's just a helper to people to be able to interact with your source. async def add_schedule(self, schedule: \\\"ScheduledTask\\\") -> None: print(\\\"New schedule added:\\\", schedule) # This method is completely optional, but if you want to support # schedule cancelation, you must implement it. async def delete_schedule(self, schedule_id: str) -> None: print(\\\"Deleting schedule:\\\", schedule_id) # This method is optional. You may not implement this. # It's just a helper to people to be able to interact with your source. async def pre_send(self, task: \\\"ScheduledTask\\\") -> None: \\\"\\\"\\\" Actions to execute before task will be sent to broker. This method may raise ScheduledTaskCancelledError. This cancels the task execution. :param task: task that will be sent \\\"\\\"\\\" # This method is optional. You may not implement this. # It's just a helper to people to be able to interact with your source. async def post_send(self, task: \\\"ScheduledTask\\\") -> None: \\\"\\\"\\\" Actions to execute after task was sent to broker. :param task: task that just have sent \\\"\\\"\\\" \",\"You can implement a schedule source that write schedules in the database and have delayed tasks in runtime.\"]},\"34\":{\"h\":\"Framework integrations\",\"t\":[\"Taskiq is meant to be simple and adaptive. That's why we try to add different integrations to make development with taskiq and your favorite framework easy and fun!\",\"Integrations with frameworks add two things:\",\"Startup and Shutdown events;\",\"Dependencies to use in your handler.\"]},\"35\":{\"h\":\"Taskiq + FastStream\",\"t\":[\"FastStream is a library that allows you to write consumers and producers for different message brokers almost like taskiq. But the differense is that taskiq is more focused on tasks for a specific project and more like celery but async, while FastStream is more focused on events and defining how different systems communicate with each other using distributed brokers.\",\"If you want to declare communication between different projects you can use taskiq, but it might be a bit more complex than using FastStream.\",\"Although these libraries solve different problems, they have integration between each other, so you can use FastStream as a broker for taskiq. It allows FastStream to use taskiq's scheduler along with its own features.\",\"To use FastStream as a broker for taskiq you need to install the taskiq-faststream library:\",\"pip install \\\"taskiq-faststream\\\" \",\"And you can use it like this:\",\"from faststream import FastStream from faststream.kafka import KafkaBroker from taskiq_faststream import BrokerWrapper broker = KafkaBroker(\\\"localhost:9092\\\") app = FastStream(broker) taskiq_broker = BrokerWrapper(broker) \",\"You can read more about scheduling tasks for FastStream in the FastStream documentation.\"]},\"36\":{\"h\":\"Taskiq + Aiogram\",\"t\":[\"Taskiq-Aiogram is a nice integration with one of the best telegram bot libraries - aiogram.\",\"This integration allows you to easily send delayed messages or run intensive functions without blocking the message handing.\",\"This integration adds three main dependencies which you can use in your taskiq functions:\",\"aiogram.Bot - the bot instance that you can use to send messages or perform other actions. If multiple bots listen to the same dispatcher, this dependency will be resolved to the latest bot passed in the taskiq_aiogram.init function.\",\"aiogram.Dispatcher - current dispatcher instance.\",\"List[aiogram.Bot] - list of all bots that were passed to the taskiq_aiogram.init function.\",\"To enable the integration, please install the taskiq-aiogram library:\",\"pip install \\\"taskiq-aiogram\\\" \",\"After the installation is complete, add an initialization function call to your broker's main file so it becomes something like this:\",\"import asyncio import taskiq_aiogram from aiogram import Bot from taskiq import TaskiqDepends from taskiq_redis import ListQueueBroker broker = ListQueueBroker(\\\"redis://localhost\\\") # This line is going to initialize everything. taskiq_aiogram.init( broker, # This is path to the dispatcher. \\\"bot:dp\\\", # This is path to the bot instance. \\\"bot:bot\\\", # You can specify more bots here. ) @broker.task(task_name=\\\"my_task\\\") async def my_task(chat_id: int, bot: Bot = TaskiqDepends()) -> None: print(\\\"I'm a task\\\") await asyncio.sleep(4) await bot.send_message(chat_id, \\\"task completed\\\") \",\"Let's see how to use this integration.\",\"import asyncio import logging import sys from aiogram import Bot, Dispatcher, types from aiogram.filters import Command from tkq import broker, my_task dp = Dispatcher() bot = Bot(token=\\\"TOKEN\\\") # Taskiq calls this function when starting the worker. @dp.startup() async def setup_taskiq(bot: Bot, *_args, **_kwargs): # Here we check if it's a clien-side, # Becuase otherwise you're going to # create infinite loop of startup events. if not broker.is_worker_process: logging.info(\\\"Setting up taskiq\\\") await broker.startup() # Taskiq calls this function when shutting down the worker. @dp.shutdown() async def shutdown_taskiq(bot: Bot, *_args, **_kwargs): if not broker.is_worker_process: logging.info(\\\"Shutting down taskiq\\\") await broker.shutdown() ## Simple command to handle @dp.message(Command(\\\"task\\\")) async def message(message: types.Message): await my_task.kiq(message.chat.id) ## Main function that starts the bot. async def main(): await dp.start_polling(bot) if __name__ == \\\"__main__\\\": logging.basicConfig(level=logging.INFO, stream=sys.stdout) asyncio.run(main()) \",\"That's it. Now you can easily call tasks from your bots and access bots from within your tasks.\"]},\"37\":{\"h\":\"Taskiq + AioHTTP\",\"t\":[\"AioHTTP is a framework for building robust applications. We created several libraries to make the experience with AioHTTP even better.\",\"We created a library aiohttp-deps to add FastAPI-like dependency injection in AioHTTP.\",\"To install it, simply run:\",\"pip install \\\"aiohttp-deps\\\" \",\"After the installation, please add startup event to your application to initialize dependencies context.\",\"from aiohttp import web import aiohttp_deps app = web.Application() # This startup event makes all the magic happen. # It parses current handlers and create dependency graphs for them. app.on_startup.append(aiohttp_deps.init) web.run_app(app) \",\"You can read more about dependency injection and available dependencies in the project's README.md.\"]},\"38\":{\"h\":\"Adding taskiq integration\",\"t\":[\"We highly recommend using aiohttp with aiohttp-deps because it allows us to reuse the same dependencies for your handlers and tasks. First of all, you should install the taskiq-aiohttp library.\",\"pip install \\\"taskiq-aiohttp\\\" \",\"After the installation is complete, add an initialization function call to your broker's main file so it becomes something like this:\",\"import taskiq_aiohttp broker = MyBroker() # The second argument is a path to web.Application variable. # Also you can provide here a factory function that takes no # arguments and returns an application. This function can be async. taskiq_aiohttp.init(broker, \\\"my_project.main:app\\\") \",\"From this point, you'll be able to reuse the same dependencies as with aiohttp-deps. Let's take a look at this function:\",\"In this example, we depend on the current application. We can use its state in a current task or any other dependency. We can take db_pool from your application's state, which is the same pool, as the one you've created on AiohTTP's startup. But this application is only a mock of your application. It has correct types and all your variables that you filled on startup, but it doesn't handle any request. This integration adds two main dependencies:\",\"web.Application - current application.\",\"web.Request - mocked request. This request only exists to be able to use the same dependencies.\",\"You can find more detailed examples in the examples repo.\"]},\"39\":{\"h\":\"Testing\",\"t\":[\"Writing tests for AioHTTP with taskiq is as easy as writing tests for the aiohttp application. The only difference is that, if you want to use InMemoryBroker, then you need to add context for dependency injection. It's easier to call populate_context when creating a test_client fixture.\",\"import taskiq_aiohttp @pytest.fixture async def test_client( app: web.Application, ) -> AsyncGenerator[TestClient, None]: \\\"\\\"\\\" Create a test client. This function creates a TestServer and a test client for the application. Also this fixture populates context with needed variables. :param app: current application. :yield: ready to use client. \\\"\\\"\\\" loop = asyncio.get_running_loop() server = TestServer(app) client = TestClient(server, loop=loop) await client.start_server() # This is important part. # Since InMemoryBroker doesn't # run as a worker process, we have to populate # broker's context by hand. taskiq_aiohttp.populate_context( broker=broker, server=server.runner.server, app=app, loop=loop, ) yield client broker.custom_dependency_context = {} await client.close() \"]},\"40\":{\"h\":\"Taskiq + FastAPI\",\"t\":[\"FastAPI is a highly popular async web framework in Python. It has gained its popularity because of two things:\",\"It's easy to use;\",\"Cool dependency injection.\",\"In taskiq, we try to make our libraries easy to use, and We have a dependency injection too. So we have created the library \\\"taskiq-fastapi\\\" to make integration with FastAPI as smooth as possible.\",\"Let's see what we got here. In this library, we provide users with only one public function called init. It takes a broker and a string path (as in uvicorn) to the fastapi application (or factory function). People should call this function in their main broker file.\",\"from taskiq import ZeroMQBroker import taskiq_fastapi broker = ZeroMQBroker() taskiq_fastapi.init(broker, \\\"my_package.application:app\\\") \",\"There are two rules to make everything work as you expect:\",\"Add TaskiqDepends as a default value for every parameter with Request or HTTPConnection types in base dependencies. Or if you use Annotated, please annotate these types with TaskiqDepends.\",\"Use only TaskiqDepends in tasks.\",\"Cool and important note!\",\"The Request or HTTPConnection that you'll get injected in your task is not the same request or connection you have had in your handler when you were sending the task!\",\"Many fastapi dependency functions depend on fastapi.Request. We provide a mocked request to such dependencies. But taskiq cannot resolve dependencies until you explicitly specify that this parameter must be injected.\",\"As an example. If you previously had a dependency like this:\",\"from fastapi import Request from typing import Any def get_redis_pool(request: Request) -> Any: return request.app.state.redis_pool \",\"To make it resolvable in taskiq, people should mark default fastapi dependencies (such as Request and HTTPConnection) with TaskiqDepends. Like this:\",\"Also you want to call startup of your brokers somewhere.\",\"from fastapi import FastAPI from your_project.taskiq import broker app = FastAPI() @app.on_event(\\\"startup\\\") async def app_startup(): if not broker.is_worker_process: await broker.startup() @app.on_event(\\\"shutdown\\\") async def app_shutdown(): if not broker.is_worker_process: await broker.shutdown() \",\"And that's it. Now you can use your taskiq tasks with functions and classes that depend on FastAPI dependenices. You can find bigger examples in the examples repo.\"]},\"41\":{\"h\":\"Testing\",\"t\":[\"Testing is no different from general testing advice from articles about . But if you use InMemoryBroker in your tests, you need to provide it with a custom dependency context because it doesn't run as a worker process.\",\"Let's imagine that you have a fixture of your application. It returns a new fastapi application to use in tests.\",\" @pytest.fixture def fastapi_app() -> FastAPI: return get_app() \",\"Right after this fixture, we define another one.\",\"import taskiq_fastapi @pytest.fixture(autouse=True) def init_taskiq_deps(fastapi_app: FastAPI): # This is important part. Here we add dependency context, # this thing helps in resolving dependencies for tasks # for inmemory broker. taskiq_fastapi.populate_dependency_context(broker, fastapi_app) yield broker.custom_dependency_context = {} \",\"This fixture has autouse flag, which means it would run on every test automatically.\"]},\"42\":{\"h\":\"Introduction\"},\"43\":{\"h\":\"What is taskiq\",\"t\":[\"Taskiq is a library that helps you send and process python functions in a distributed manner. For example, you have many heavy to calculate functions you want to execute on another server. You can implement interservice communication by yourself, or you can use Taskiq to make the job done easily.\",\"The core library doesn't have much functionality. It provides two built-in brokers, CLI, basic functionality for creating distributed tasks, and abstractions to extend the taskiq. The main idea of taskiq is to make it modular and easy to extend. We have libraries for many possible use cases, but if you lack something, you can adopt taskiq to fit your needs.\"]},\"44\":{\"h\":\"Why not use existing libraries?\",\"t\":[\"We created this project because we couldn't find any project that can execute and send async functions using distributed queues like RabbitMQ.\",\"You might have seen projects built on top of asyncio that solve a similar problem, but here's a comparison table of the taskiq and other projects.\",\"Feature name\",\"Taskiq\",\"Arq\",\"AioTasks\",\"Actively maintained\",\"✅\",\"✅\",\"❌\",\"Multiple broker backends\",\"✅\",\"❌\",\"✅\",\"Multiple result backends\",\"✅\",\"❌\",\"❌\",\"Have a rich documentation\",\"✅\",\"❌\",\"❌\",\"Startup & Shutdown events\",\"✅\",\"✅\",\"❌\",\"Have ability to abort tasks\",\"❌\",\"✅\",\"❌\",\"Custom serializers\",\"✅\",\"✅\",\"❌\",\"Dependency injection\",\"✅\",\"❌\",\"❌\",\"Task pipelines\",\"✅\",\"✅\",\"❌\",\"Task schedules\",\"✅\",\"✅\",\"❌\",\"Global middlewares\",\"✅\",\"❌\",\"❌\",\"If you have a fully synchronous project, consider using celery or dramatiq instead.\"]},\"45\":{\"h\":\"Architecture overview\",\"t\":[\"Taskiq has very simple structure. On the client side all messages are sent by kickers using brokers. On the worker side all messages received by the broker and results are stored in result backends.\",\"On the sequence diagram it looks like this:\",\"Cool tip!\",\"If you use dark theme and cannot see words on diagram, try switching to light theme and back to dark.\",\"Let's discuss every component.\"]},\"46\":{\"h\":\"Broker\",\"t\":[\"Brokers are the most critical element of the taskiq. Every broker must implement the AsyncBroker abstract class from taskiq.abc.broker to make things work.\",\"AsyncBroker class has two main methods to implement:\",\"kick\",\"listen\",\"The kick method puts the message in the external system. For example, it may call the PUB command in Redis.\",\"The listen is a method with an infinite loop that reads messages from the external system and creates a task for processing messages. For example, it subscribes to the Redis channel and waits for new messages.\"]},\"47\":{\"h\":\"Kicker\",\"t\":[\"Kicker is an object that used to form a message for broker. This class isn't extendable. To form a message kicker uses labels, task name and arguments.\",\"When you call the task.kiq on a task, it generates a Kicker instance and is a shortening for the task.kicker().kiq(...). You can use kicker to change broker, add labels, or even change task_id.\",\"import asyncio from taskiq.brokers.inmemory_broker import InMemoryBroker broker = InMemoryBroker() second_broker = InMemoryBroker() @broker.task async def my_async_task() -> None: \\\"\\\"\\\"My lovely task.\\\"\\\"\\\" await asyncio.sleep(1) print(\\\"Hello\\\") async def main(): # This task was initially assigned to broker, # but this time it is going to be sent using # the second broker with additional label `delay=1`. task = await my_async_task.kicker().with_broker(second_broker).with_labels(delay=1).kiq() print(await task.get_result()) asyncio.run(main()) \"]},\"48\":{\"h\":\"Messages\",\"t\":[\"Every message has labels. You can define labels using task decorator, or you can add them using kicker.\",\"For example:\",\" @broker.task(my_label=1, label2=\\\"something\\\") async def my_async_task() -> None: \\\"\\\"\\\"My lovely task.\\\"\\\"\\\" await asyncio.sleep(1) print(\\\"Hello\\\") async def main(): await my_async_task.kiq() \",\"It's equivalent to this\",\" @broker.task async def my_async_task() -> None: \\\"\\\"\\\"My lovely task.\\\"\\\"\\\" await asyncio.sleep(1) print(\\\"Hello\\\") async def main(): await my_async_task.kicker().with_labels( my_label=1, label2=\\\"something\\\", ).kiq() \",\"Also you can assign custom task names using decorator. This is useful to be sure that task names are unique and resolved correctly. Also it may be useful to balance message routing in some brokers.\",\"for example:\",\"@broker.task(task_name=\\\"my_tasks.add_one\\\", label1=1) async def my_async_task() -> None: \\\"\\\"\\\"My lovely task.\\\"\\\"\\\" await asyncio.sleep(1) print(\\\"Hello\\\") \"]},\"49\":{\"h\":\"Result backend\",\"t\":[\"Result backend is used to store and get results of the execution. Results have type TaskiqResult from taskiq.result.\",\"Every ResultBackend must implement AsyncResultBackend from taskiq.abc.result_backend. By default, brokers use DummyResultBackend. It doesn't do anything and cannot be used in real-world scenarios. But some brokers can override it. For example InMemoryBroker by default uses InMemoryResultBackend and returns correct results.\"]},\"50\":{\"h\":\"Workers\",\"t\":[\"Taskiq has a command line interface to run workers. It's simple to get it to work.\",\"You have to provide a path to your broker. As an example, if you want to start listening to new tasks with a broker that is stored in a variable my broker in the module my_project.broker run this in your terminal:\",\"taskiq worker my_project.broker:mybroker \",\"taskiq can discover task modules to import automatically, if you add the -fsd (file system discover) option.\",\"Let's assume we have project with the following structure:\",\"test_project ├── broker.py ├── submodule │ └── tasks.py └── utils └── tasks.py \",\"You can specify all tasks modules to import manually.\",\"taskiq worker test_project.broker:broker test_project.submodule.tasks test_project.utils.tasks \",\"Or you can let taskiq find all python modules named tasks in current directory recursively.\",\"taskiq worker test_project.broker:broker -fsd \",\"If you have uvloop installed, taskiq will automatically install new policies to event loop. You can get more info about the CLI in the section.\",\"Cool info\",\"By default we start two processes, if you want to change this value, please take a look at --help.\"]},\"51\":{\"h\":\"Middlewares\",\"t\":[\"Middlewares are used to modify message, or take some actions before or after task is complete.\",\"You can write your own middlewares by subclassing the taskiq.abc.middleware.TaskiqMiddleware.\",\"Every hook can be sync or async. Taskiq will execute it.\",\"For example, this is a valid middleware.\",\"import asyncio from taskiq.abc.middleware import TaskiqMiddleware from taskiq.message import TaskiqMessage class MyMiddleware(TaskiqMiddleware): async def pre_send(self, message: \\\"TaskiqMessage\\\") -> TaskiqMessage: await asyncio.sleep(1) message.labels[\\\"my_label\\\"] = \\\"my_value\\\" return message def post_send(self, message: \\\"TaskiqMessage\\\") -> None: print(f\\\"Message {message} was sent.\\\") \",\"Here are methods you can implement in the order they are executed:\",\"pre_send - executed on the client side before the message is sent. Here you can modify the message.\",\"post_send - executed right after the message was sent.\",\"pre_execute - executed on the worker side after the message was received by a worker and before its execution.\",\"on_error - executed after the task was executed if the exception was found.\",\"post_execute - executed after the message was executed.\",\"post_save - executed after the result was saved in the result backend.\",\"You can use sync or async hooks without changing anything, but adding async to the hook signature.\",\"important note\",\"If exception happens in middlewares it won't be caught. Please ensure that you have try\\\\except for all edge cases of your middleware.\",\"Middlewares can store information in message.labels for later use. For example SimpleRetryMiddleware uses labels to remember number of failed attempts.\"]},\"52\":{\"h\":\"Context\",\"t\":[\"Context is a useful class with some additional functions. You can use context to get broker that runs this task, from inside of the task.\",\"Or it has ability to control the flow of execution. Here's example of how to get the context.\",\"Also through contexts you can reject or requeue a task. It's easy as this:\",\"Calling requeue or reject stops task execution and either drops the message, or puts it back to the queue.\",\"Also, with context you'll be able to get current message that was received by the broker\\nor even instance of a broker who received a message. This may be useful for lib developers.\"]},\"53\":{\"h\":\"CLI\",\"t\":[\"Core library comes with CLI program called taskiq, which is used to run different subcommands.\",\"By default taskiq is shipped with only two commands: worker and scheduler. You can search for more taskiq plugins using pypi. Some plugins may add new commands to taskiq.\"]},\"54\":{\"h\":\"Worker\",\"t\":[\"To run worker process, you have to specify the broker you want to use and modules with defined tasks. Like this:\",\"taskiq worker mybroker:broker_var my_project.module1 my_project.module2 \"]},\"55\":{\"h\":\"Auto importing\",\"t\":[\"Enumerating all modules with tasks is not an option sometimes. That's why taskiq can auto-discover tasks in current directory recursively.\",\"We have two options for this:\",\"--tasks-pattern or -tp. It's a glob pattern of files to import. By default it is **/tasks.py which searches for all tasks.py files. May be specified multiple times.\",\"--fs-discover or -fsd. This option enables search of task files in current directory recursively, using the given pattern.\"]},\"56\":{\"h\":\"Acknowledgements\",\"t\":[\"The taskiq supports three types of acknowledgements:\",\"when_received - task is acknowledged when it is received by the worker.\",\"when_executed - task is acknowledged right after it is executed by the worker.\",\"when_saved - task is acknowledged when the result of execution is saved in the result backend.\",\"This can be configured using --ack-type parameter. For example:\",\"taskiq worker --ack-type when_executed mybroker:broker \"]},\"57\":{\"h\":\"Type casts\",\"t\":[\"One of features taskiq have is automatic type casts. For example you have a type-hinted task like this:\",\"async def task(val: int) -> int: return val + 1 \",\"If you'll call task.kiq(\\\"2\\\") you'll get 3 as the returned value. Because we parse signatures of tasks and cast incoming parameters to target types. If type-cast fails you won't throw any error. It just leave the value as is. That functionality allows you to use pydantic models, or dataclasses as the input parameters.\",\"To disable this pass the --no-parse option to the taskiq.\"]},\"58\":{\"h\":\"Hot reload\",\"t\":[\"This is annoying to restart workers every time you modify tasks. That's why taskiq supports hot-reload. Reload is unavailable by default. To enable this feature install taskiq with reload extra.\",\"To enable this option simply pass the --reload or -r option to worker taskiq CLI.\",\"Also this option supports .gitignore files. If you have such file in your directory, it won't reload worker when you modify ignored files. To disable this functionality pass --do-not-use-gitignore option.\"]},\"59\":{\"h\":\"Other parameters\",\"t\":[\"--no-configure-logging - disables default logging configuration for workers.\",\"--log-level is used to set a log level (default INFO).\",\"--max-async-tasks - maximum number of simultaneously running async tasks.\",\"--max-prefetch - number of tasks to be prefetched before execution. (Useful for systems with high message rates, but brokers should support acknowledgements).\",\"--max-threadpool-threads - number of threads for sync function exection.\",\"--no-propagate-errors - if this parameter is enabled, exceptions won't be thrown in generator dependencies.\",\"--receiver - python path to custom receiver class.\",\"--receiver_arg - custom args for receiver.\",\"--ack-type - Type of acknowledgement. This parameter is used to set when to acknowledge the task. Possible values are when_received, when_executed, when_saved. Default is when_saved.\",\"--shutdown-timeout - maximum amount of time for graceful broker's shutdown in seconds.\"]},\"60\":{\"h\":\"Scheduler\",\"t\":[\"Scheduler is used to schedule tasks as described in section.\",\"To run it simply run\",\"taskiq scheduler <path to scheduler> [optional module to import]... \",\"For example\",\"taskiq scheduler my_project.broker:scheduler my_project.module1 my_project.module2 \"]},\"61\":{\"h\":\"Parameters\",\"t\":[\"Path to scheduler is the only required argument.\",\"--tasks-pattern or -tp. It's a glob pattern of files to import. By default it is **/tasks.py which searches for all tasks.py files. May be specified multiple times.\",\"--fs-discover or -fsd. This option enables search of task files in current directory recursively, using the given pattern.\",\"--no-configure-logging - use this parameter if your application configures custom logging.\",\"--log-level is used to set a log level (default INFO).\",\"--skip-first-run - skip first run of scheduler. This option skips running tasks immediately after scheduler start.\"]},\"62\":{\"h\":\"Dynamic Environments\",\"t\":[\"This article is for people who want to:\",\"Create brokers dynamically.\",\"Register tasks, and run them inside their code.\",\"Implement more complex logic.\",\"Taskiq allows you to set up broker instances throughout your application and register tasks for dynamic execution. However, tasks created this way won't be found by the taskiq worker command.\",\"To define tasks and assign them to a broker, use register_task method.\",\"import asyncio from taskiq_redis import ListQueueBroker async def main() -> None: # Here we define a broker. dyn_broker = ListQueueBroker(\\\"redis://localhost\\\") await dyn_broker.startup() # Now we register lambda as a task. dyn_task = dyn_broker.register_task( lambda x: print(\\\"A\\\", x), task_name=\\\"dyn_task\\\", ) # now we can send it. await dyn_task.kiq(x=1) await dyn_broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \",\"In this example, the task is defined using a lambda within the main function. As the lambda is not visible outside of the main function scope, the task is not executable by taskiq worker command.\",\"To overcome this issue, you can:\",\"Create a dynamic worker task within the current event loop.\",\"Implement your own broker listener with the information about all of your tasks.\",\"Here's an example of a dynamic worker task creation:\",\"import asyncio from taskiq_redis import ListQueueBroker from taskiq.api import run_receiver_task async def main() -> None: # Here we define a broker. dyn_broker = ListQueueBroker(\\\"redis://localhost\\\") await dyn_broker.startup() worker_task = asyncio.create_task(run_receiver_task(dyn_broker)) # Now we register lambda as a task. dyn_task = dyn_broker.register_task( lambda x: print(\\\"A\\\", x), task_name=\\\"dyn_task\\\", ) # Now we can send it. await dyn_task.kiq(x=1) await asyncio.sleep(2) worker_task.cancel() try: await worker_task except asyncio.CancelledError: print(\\\"Worker successfully exited.\\\") await dyn_broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \",\"In this example, a named dynamic lambda task is created and registered in a broker, similar to the previous example. The difference is the creation of a new receiver coroutine for the worker task. It will listen to the new messages and execute them. The worker task will be executed in the current event loop. After exiting the scope, the worker task will get cancelled. For illustration purposes it is cancelled explicitly.\",\"It's possible to run a scheduler in the current event loop as well:\",\"import asyncio import datetime from taskiq_redis import ListQueueBroker from taskiq import TaskiqScheduler from taskiq.api import run_receiver_task, run_scheduler_task from taskiq.schedule_sources import LabelScheduleSource async def main() -> None: # Here we define a broker. dyn_broker = ListQueueBroker(\\\"redis://localhost\\\") dyn_scheduler = TaskiqScheduler(dyn_broker, [LabelScheduleSource(dyn_broker)]) await dyn_broker.startup() # Now we register lambda as a task. dyn_task = dyn_broker.register_task( lambda x: print(\\\"A\\\", x), task_name=\\\"dyn_task\\\", # We add a schedule when to run task. schedule=[ { # Here we also can specify cron instead of time. \\\"time\\\": datetime.datetime.utcnow() + datetime.timedelta(seconds=2), \\\"args\\\": [22], }, ], ) # We create scheduler after the task declaration, # so we don't have to wait a minute before it gets to the task. # However, defining a scheduler before the task declaration is also possible. # But we have to wait till it gets to task execution for the second time. worker_task = asyncio.create_task(run_receiver_task(dyn_broker)) scheduler_task = asyncio.create_task(run_scheduler_task(dyn_scheduler)) # We still able to send the task. await dyn_task.kiq(x=1) await asyncio.sleep(10) worker_task.cancel() try: await worker_task except asyncio.CancelledError: print(\\\"Worker successfully exited.\\\") scheduler_task.cancel() try: await scheduler_task except asyncio.CancelledError: print(\\\"Scheduler successfully exited.\\\") await dyn_broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \"]},\"63\":{\"h\":\"Getting started\"},\"64\":{\"h\":\"Installation\",\"t\":[\"You can install taskiq from pypi or directly from git using pip:\",\"After installation of the core library, you need to find the broker that fits you. You can do it using PyPI search.\",\"Cool tip!\",\"We highly recommend taskiq-aio-pika or taskiq-nats as the broker and taskiq-redis as the result backend for production use.\"]},\"65\":{\"h\":\"Running tasks\",\"t\":[\"Now you need to create a python module with broker declaration. It's just a plain python file with the variable of your broker. For this particular example, I'm going to use the InMemoryBroker.\",\"Important note\",\"The InMemoryBroker doesn't send any data over the network, and you cannot use this broker in a real-world scenario, but it's still useful for local development if you do not want to set up a taskiq worker.\",\"# broker.py from taskiq import InMemoryBroker broker = InMemoryBroker() \",\"And that's it. Now let's add some tasks and the main function. You can add tasks in separate modules. You can find more information about that further. Also, we call the startup method at the beginning of the main function.\",\"# broker.py import asyncio from taskiq import InMemoryBroker broker = InMemoryBroker() @broker.task async def add_one(value: int) -> int: return value + 1 async def main() -> None: # Never forget to call startup in the beginning. await broker.startup() # Send the task to the broker. task = await add_one.kiq(1) # Wait for the result. result = await task.wait_result(timeout=2) print(f\\\"Task execution took: {result.execution_time} seconds.\\\") if not result.is_err: print(f\\\"Returned value: {result.return_value}\\\") else: print(\\\"Error found while executing task.\\\") await broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \",\"Cool warning!\",\"Calling the startup method is necessary. If you don't call it, you may get an undefined behaviour.\",\"If you run this code, you will get this in your terminal:\",\"❯ python mybroker.py Task execution took: 7.3909759521484375e-06 seconds. Returned value: 2 \",\"Ok, the code of the task execution is a little bit fancier than an ordinary function call, but it's still relatively simple to understand. To send a task to the broker, you need to call the .kiq method on the function, it returns the TaskiqTask object that can check whether the result is ready or not. Also it has methods to wait for the result to become available.\",\"You can get more information about taskiq types, CLI and internal structure in the \\\"\\\" section.\"]},\"66\":{\"h\":\"Distributed run\",\"t\":[\"Now let's change InMemoryBroker to some distributed broker instead. In this example we are going to use broker that works with rabbitMQ.\",\"At first we must install the taskiq-aio-pika lib.\",\"pip install taskiq-aio-pika \",\"After the installation, replace the broker we defined earlier with the broker from the taskiq-aio-pika.\",\"from taskiq_aio_pika import AioPikaBroker broker = AioPikaBroker('amqp://guest:guest@localhost:5672') \",\"Also, AioPika broker requires to call startup before using it. Add this line at the beginning of the main function.\",\"await broker.startup() \",\"That's all you need to do.\",\"Complete code\",\"# broker.py import asyncio from taskiq_aio_pika import AioPikaBroker broker = AioPikaBroker(\\\"amqp://guest:guest@localhost:5672\\\") @broker.task async def add_one(value: int) -> int: return value + 1 async def main() -> None: await broker.startup() # Send the task to the broker. task = await add_one.kiq(1) # Wait for the result. result = await task.wait_result(timeout=2) print(f\\\"Task execution took: {result.execution_time} seconds.\\\") if not result.is_err: print(f\\\"Returned value: {result.return_value}\\\") else: print(\\\"Error found while executing task.\\\") await broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \",\"Let's run the worker process. First of all, we need rabbitMQ up and running. I highly recommend you use docker.\",\"Now we need to start worker process by running taskiq cli command. You can get more info about the CLI in the section.\",\"taskiq worker broker:broker \",\"After the worker is up, we can run our script as an ordinary python file and see how the worker executes tasks.\",\"$ python broker.py Task execution took: 0.0 seconds. Returned value: None \",\"But the printed result value is not correct. That happens because we didn't provide any result backend that can store results of task execution. To store results, we can use the taskiq-redis library.\",\"pip install taskiq-redis \",\"After the installation, add a new result backend to the broker.\",\"from taskiq_redis import RedisAsyncResultBackend broker = AioPikaBroker( \\\"amqp://guest:guest@localhost:5672\\\", ).with_result_backend(RedisAsyncResultBackend(\\\"redis://localhost\\\")) \",\"Now we need to start redis.\",\"Complete code\",\"# broker.py import asyncio from taskiq_aio_pika import AioPikaBroker from taskiq_redis import RedisAsyncResultBackend broker = AioPikaBroker( \\\"amqp://guest:guest@localhost:5672\\\", ).with_result_backend(RedisAsyncResultBackend(\\\"redis://localhost\\\")) @broker.task async def add_one(value: int) -> int: return value + 1 async def main() -> None: await broker.startup() # Send the task to the broker. task = await add_one.kiq(1) # Wait for the result. result = await task.wait_result(timeout=2) print(f\\\"Task execution took: {result.execution_time} seconds.\\\") if not result.is_err: print(f\\\"Returned value: {result.return_value}\\\") else: print(\\\"Error found while executing task.\\\") await broker.shutdown() if __name__ == \\\"__main__\\\": asyncio.run(main()) \",\"Let's run taskiq once again. The command is the same.\",\"taskiq worker broker:broker \",\"Now, if we run this file with python, we can get the correct results with a valid execution time.\",\"$ python broker.py Task execution took: 1.0013580322265625e-05 seconds. Returned value: 2 \",\"Continue reading to get more information about taskiq internals.\"]},\"67\":{\"h\":\"Timeouts\",\"t\":[\"If you want to restrict amount of time you want to run task, just add timeout label to the task.\",\"You can do it either with decorator or when calling the task.\",\"Cool alert\",\"We use run_in_executor method to run sync functions. Timeouts will raise a TimeoutException, but\\nsynchronous function may not stop from execution. This is a constraint of python.\"]},\"68\":{\"h\":\"Taskiq message format\",\"t\":[\"Taskiq doesn't force you to use any specific message format. We define default message format, but you can use any format you want.\",\"The default message format is:\",\"But this can be easily changed by creating your own implementation of the TaskiqFormatter class or TaskiqSerializer class.\"]},\"69\":{\"h\":\"Serializers\",\"t\":[\"Serializers define the format of the message but not the structure. For example, if you want to use msgpack or ORJson to serialize your message, you should update the serializer of your broker.\",\"Be default, Taskiq uses JSON serializer. But we also have some implementations of other serializers:\",\"ORJSONSerializer - faster JSON implementation. Also, it supports datetime and UUID serialization.\",\"MSGPackSerializer - MsgPack format serializer. It might be useful to send less data over the network.\",\"CBORSerializer - CBOR format serializer. It is also has a smaller size than JSON.\",\"To define your own serializer, you have to subclass the TaskiqSerializer class and implement dumpb and loadb methods. You can take a look at the existing implementations from the taskiq.serializers module.\",\"To install taskiq with libraries for non-JSON serializers, you should install taskiq with extras.\"]},\"70\":{\"h\":\"Formatters\",\"t\":[\"Formatters define the format of the message. It might be useful if you'd like to send a task to a celery worker for a different project. You can do it in seriazier as well, but formatters give you correct type hints.\",\"By default we use a formatter that dumps the message to dict and serializes it using serializer. But you can define your own formatter to send a message in any format you want. To define a new formatter, you have to subclass the TaskiqFormatter class and implement dumps and loads methods.\\nAs an example, you can take a look at the JSONFormatter from taskiq.formatters implementation.\"]},\"71\":{\"h\":\"Scheduling tasks\",\"t\":[\"Sometimes you may want to execute some tasks according to some schedule. For example, you maybe want to call a function every day at 2 pm.\",\"That's not a problem if you use taskiq. We have primitives that can help you to solve your problems.\",\"Let's imagine we have a module, as shown below, and we want to execute the heavy_task every 5 minutes. What should we do?\",\"from taskiq_aio_pika import AioPikaBroker broker = AioPikaBroker(\\\"amqp://guest:guest@localhost:5672/\\\") @broker.task async def heavy_task(value: int) -> int: return value + 1 \",\"Of course we can implement loop like this:\",\" while True: await heavy_task.kiq(1) await asyncio.sleep(timedelta(minutes=5).total_seconds) \",\"But if you have many schedules it may be a little painful to implement. So let me introduce you the TaskiqScheduler. Let's add scheduler to our module.\",\"from taskiq_aio_pika import AioPikaBroker from taskiq.schedule_sources import LabelScheduleSource from taskiq import TaskiqScheduler broker = AioPikaBroker(\\\"amqp://guest:guest@localhost:5672/\\\") scheduler = TaskiqScheduler( broker=broker, sources=[LabelScheduleSource(broker)], ) @broker.task(schedule=[{\\\"cron\\\": \\\"*/5 * * * *\\\", \\\"args\\\": [1]}]) async def heavy_task(value: int) -> int: return value + 1 \",\"That's it.\",\"Now we need to start our scheduler with the taskiq scheduler command. Like this:\",\"taskiq scheduler module:scheduler \",\"Be careful!\",\"Please always run only one instance of the scheduler! If you run more than one scheduler at a time, please be careful since it may execute one task N times, where N is the number of running scheduler instances.\",\"This command will import the scheduler you defined and start sending tasks to your broker.\",\"Cool tip!\",\"The scheduler doesn't execute tasks. It only sends them.\",\"You can check list of available schedule sources in the section.\"]},\"72\":{\"h\":\"Multiple sources\",\"t\":[\"Sometimes you may want to use multiple sources to assemble a schedule for tasks. The TaskiqScheduler can do so. But it's obvious how to merge schedules from different sources.\",\"That's why you can pass a custom merge function to resolve all possible conflicts or if you want to have more complex logic aside from sources. For example, filter out some task schedules.\",\"Currently we have only two default functions to merge tasks. You can find them in the taskiq.scheduler.merge_functions module.\",\"preserve_all - simply adds new schedules to the old ones.\",\"only_unique - adds schedule only if it was not added by previous sources.\",\"Every time we update schedule it gets task from the source and executes this function to merge them together.\"]},\"73\":{\"h\":\"Working with timezones\",\"t\":[\"Sometimes, you want to be specific in terms of time zones. We have you covered. Our ScheduledTask model has fields for that. Use these fields or not, it's up to the specific schedule source.\",\"Taskiq scheduler assumes that if time has no specific timezone, it's in UTC. Sometimes, this behavior might not be convinient for developers.\",\"For the time field of ScheduledTask we use timezone information from datetime to check if a task should run.\",\"For cron tasks, we have an additional field called cron_offset that can be used to specify an offset of the cron task. An offset can be a string like Europe/Berlin or an instance of the timedelta class.\"]},\"74\":{\"h\":\"Skipping first run\",\"t\":[\"By default, when you start the scheduler it will get all tasks from the schedule source and check whether they should have been executed in this minute. If tasks should have been executed, they will be executed.\",\"This behaviour might be not convinient for some developers. For example, if you have a task that should be executed on every minute, it will be executed once you start the scheduler, even if it was executed a few seconds ago.\",\"To avoid this behaviour, you can pass the --skip-first-run flag to the taskiq scheduler command. In this case, the scheduler will wait until the start of the next minute and then start executing tasks.\",\"taskiq scheduler module:scheduler --skip-first-run \"]},\"75\":{\"h\":\"Dynamic scheduling\",\"t\":[\"Sometimes you may want to add new schedules to the scheduler on the fly. For example, you may want to run a specific function in several minutes from now. You can easily do it with ScheduleSources that support dynamic scheduling. Currently we suggest to use the RedisScheduleSource for that purpose. List of schedulers with dynamic task addition will be extended in the future. For list of available schedule sources see .\",\"Here's an example of using redis schedule source:\",\"from taskiq_redis import ListQueueBroker, RedisScheduleSource from taskiq import TaskiqScheduler # Here's the broker that is going to execute tasks broker = ListQueueBroker(\\\"redis://localhost:6379/0\\\") # Here's the source that is used to store scheduled tasks redis_source = RedisScheduleSource(\\\"redis://localhost:6379/0\\\") # And here's the scheduler that is used to query scheduled sources scheduler = TaskiqScheduler(broker, sources=[redis_source]) @broker.task async def my_task(arg1: int, arg2: str) -> None: \\\"\\\"\\\"Example task.\\\"\\\"\\\" print(\\\"Hello from my_task!\\\", arg1, arg2) # noqa: T201 \",\"Now we can use this source to add new schedules in runtime. Here's an example:\",\" await redis_source.startup() await my_task.schedule_by_time( redis_source, # It's better to use UTC time, or add tzinfo to datetime. datetime.datetime.utcnow() + datetime.timedelta(minutes=1, seconds=5), # You can pass args and kwargs here as usual 11, arg2=\\\"arg2\\\", ) \",\"Or if you want ot use cron schedules instead, just use schedule_by_cron method.\",\" await my_task.schedule_by_cron( redis_source, \\\"*/5 * * * *\\\", 11, arg2=\\\"arg2\\\", ) \",\"If you want to pass additional labels, you can call these methods on the Kicker instance.\",\" schedule = ( await my_task.kicker() .with_labels(label1=\\\"value\\\") .schedule_by_time( redis_source, datetime.datetime.utcnow() + datetime.timedelta(seconds=10), 11, arg2=\\\"arg2\\\", ) ) \",\"Cool warning!\",\"The with_broker method won't do anything in this case, since we have a broker assigned to each scheduler.\",\"Each of these methods return you an instance of the CreatedSchedule class. This object has unique schedule ID and some helper methods. For example, you can use the unschedule method to remove the schedule from the source.\",\" schedule = await my_task.schedule_by_time( redis_source, datetime.datetime.utcnow() + datetime.timedelta(minutes=1, seconds=5), 11, arg2=\\\"arg2\\\", ) await schedule.unschedule() \",\"Or it can be done manually, by calling delete_schedule on schedule source providing it whith schedule_id.\",\" await redis_source.delete_schedule(schedule.schedule_id) \"]},\"76\":{\"h\":\"State and Dependencies\"},\"77\":{\"h\":\"State\",\"t\":[\"The TaskiqState is a global variable where you can keep the variables you want to use later. For example, you want to open a database connection pool at a broker's startup.\",\"This can be achieved by adding event handlers.\",\"You can use one of these events:\",\"WORKER_STARTUP\",\"CLIENT_STARTUP\",\"WORKER_SHUTDOWN\",\"CLIENT_SHUTDOWN\",\"Worker events are called when you start listening to the broker messages using taskiq. Client events are called when you call the startup method of your broker from your code.\",\"This is an example of code using event handlers:\",\"Cool tip!\",\"If you want to add handlers programmatically, you can use the broker.add_event_handler function.\",\"As you can see in this example, this worker will initialize the Redis pool at the startup. You can access the state from the context.\"]},\"78\":{\"h\":\"Dependencies\",\"t\":[\"Using context directly is nice, but this way you won't get code-completion.\",\"That's why we suggest you try TaskiqDependencies. The implementation is very similar to FastApi's dependencies. You can use classes, functions, and generators as dependencies.\",\"We use the taskiq-dependencies package to provide autocompetion. You can easily integrate it in your own project.\"]},\"79\":{\"h\":\"How dependencies are useful\",\"t\":[\"You can use dependencies for better autocompletion and reduce the amount of code you write. Since the state is generic, we cannot guess the types of the state fields. Dependencies can be annotated with type hints and therefore provide better auto-completion.\",\"Let's assume that you've stored a Redis connection pool in the state as in the example above.\",\"@broker.on_event(TaskiqEvents.WORKER_STARTUP) async def startup(state: TaskiqState) -> None: # Here we store connection pool on startup for later use. state.redis = ConnectionPool.from_url(\\\"redis://localhost/1\\\") \",\"You can access this variable by using the current execution context directly, like this:\",\"If you hit the TAB button after the context.state. expression, your IDE won't give you any auto-completion. But we can create a dependency function to add auto-completion.\",\"Now, this dependency injection will be autocompleted. But, of course, state fields cannot be autocompleted, even in dependencies. But this way, you won't make any typos while writing tasks.\"]},\"80\":{\"h\":\"How do dependencies work\",\"t\":[\"We build a graph of dependencies on startup. If the parameter of the function has the default value of TaskiqDepends this parameter will be treated as a dependency.\",\"Dependencies can also depend on something. Also dependencies are optimized to not evaluate things many times.\",\"For example:\",\"In this code, the dependency common_dep is going to be evaluated only once and the dep1 and the dep2 are going to receive the same value. You can control this behavior by using the use_cache=False parameter to you dependency. This parameter will force the dependency to reevaluate all it's subdependencies.\",\"In this example we cannot predict the result. Since the dep2 doesn't use cache for the common_dep function.\",\"The graph for cached dependencies looks like this:\",\"The dependencies graph for my_task where dep2 doesn't use cached value for common_dep looks like this:\"]},\"81\":{\"h\":\"Class as a dependency\",\"t\":[\"You can use classes as dependencies, and they can also use other dependencies too.\",\"Let's see an example:\",\"As you can see, the dependency for my_task function is declared with TaskiqDependency(). It's because you can omit the class if it's declared in type-hint for the parameter. This feature doesn't work with dependency functions, it's only for classes.\",\"You can pass dependencies for classes in the constructor.\"]},\"82\":{\"h\":\"Generator dependencies\",\"t\":[\"Generator dependencies are used to perform startup before task execution and teardown after the task execution.\",\"In this example, we can do something at startup before the execution and at shutdown after the task is completed.\",\"If you want to do something asynchronously, convert this function to an asynchronous generator. Like this:\"]},\"83\":{\"h\":\"Exception handling\",\"t\":[\"Generator dependencies can handle exceptions that happen in tasks. This feature is handy if you want your system to be more atomic.\",\"For example, if you open a database transaction in your dependency and want to commit it only if the function you execute is completed successfully.\",\"If you don't want to propagate exceptions in dependencies, you can add --no-propagate-errors option to worker command.\",\"taskiq worker my_file:broker --no-propagate-errors \",\"In this case, no exception will ever going to be propagated to any dependency.\"]},\"84\":{\"h\":\"Generics\",\"t\":[\"Taskiq supports generic dependencies. You can create a generic class that is generic over another class and takskiq will be able to resolve generics based on type annotations.\"]},\"85\":{\"h\":\"Default dependencies\",\"t\":[\"By default taskiq has only two dependencies:\",\"Context from taskiq.context.Context\",\"TaskiqState from taskiq.state.TaskiqState\"]},\"86\":{\"h\":\"Adding first-level dependencies\",\"t\":[\"You can expand default list of available dependencies for you application. Taskiq have an ability to add new first-level dependencies using brokers.\",\"The AsyncBroker interface has a function called add_dependency_context and you can add\\nmore default dependencies to the taskiq. This may be useful for libraries if you want to\\nadd new dependencies to users.\"]},\"87\":{\"h\":\"Testing with taskiq\",\"t\":[\"Every time we write programs, we want them to be correct. To achieve this, we use tests. Taskiq allows you to write tests easily as if tasks were normal functions.\",\"Let's dive into examples.\"]},\"88\":{\"h\":\"Preparations\"},\"89\":{\"h\":\"Environment setup\",\"t\":[\"For testing you maybe don't want to use actual distributed broker. But still you want to validate your logic. Since python is an interpreted language, you can easily replace you broker with another one if the expression is correct.\",\"We can set an environment variable, that indicates that currently we're running in testing environment.\",\"Or we can even tell pytest to set this environment for us, just before executing tests using pytest-env plugin.\"]},\"90\":{\"h\":\"Async tests\",\"t\":[\"Since taskiq is fully async, we suggest using anyio to run async functions in pytest. Install the lib and place this fixture somewhere in your root conftest.py file.\",\"@pytest.fixture def anyio_backend(): return 'asyncio' \",\"After the preparations are done, we need to modify the broker's file in your project.\",\"import os from taskiq import AsyncBroker, InMemoryBroker, ZeroMQBroker env = os.environ.get(\\\"ENVIRONMENT\\\") broker: AsyncBroker = ZeroMQBroker() if env and env == \\\"pytest\\\": broker = InMemoryBroker() \",\"As you can see, we added an if statement. If the expression is true, we replace our broker with an imemory broker. The main point here is to not have an actual connection during testing. It's useful because inmemory broker has the same interface as a real broker, but it doesn't send tasks actually.\"]},\"91\":{\"h\":\"Testing tasks\",\"t\":[\"Let's define a task.\",\"from your_project.taskiq import broker @broker.task async def parse_int(val: str) -> int: return int(val) \",\"This simple task may be defined anywhere in your project. If you want to test it, just import it and call as a normal function.\",\"import pytest from your_project.tasks import parse_int @pytest.mark.anyio async def test_task(): assert await parse_int(\\\"11\\\") == 11 \",\"And that's it. Test should pass.\",\"What if you want to test a function that uses task. Let's define such function.\",\"from your_project.taskiq import broker @broker.task async def parse_int(val: str) -> int: return int(val) async def parse_and_add_one(val: str) -> int: task = await parse_int.kiq(val) result = await task.wait_result() return result.return_value + 1 \",\"And since we replaced our broker with InMemoryBroker, we can just call it. It would work as you expect and tests should pass.\",\"@pytest.mark.anyio async def test_add_one(): assert await parse_and_add_one(\\\"11\\\") == 12 \"]},\"92\":{\"h\":\"Dependency injection\",\"t\":[\"If you use dependencies in your tasks, you may think that this can become a problem. But it's not. Here's what we came up with. We added a method called add_dependency_context to the broker. It sets base dependencies for dependency resolution. You can use it for tests.\",\"Let's add a task that depends on Path. I guess this example is not meant to be used in production code bases, but it's suitable for illustration purposes.\",\"To test the task itself, it's not different to the example without dependencies, but we jsut need to pass all expected dependencies manually as function's arguments or key-word arguments.\",\"import pytest from your_project.taskiq import broker from pathlib import Path @pytest.mark.anyio async def test_modify_path(): modified = await modify_path(Path.cwd()) assert str(modified).endswith(\\\"taskiq.py\\\") \",\"But what if we want to test task execution? Well, you don't need to provide dependencies manually, you must mutate dependency_context before calling a task. We suggest to do it in fixtures.\",\"import pytest from your_project.taskiq import broker from pathlib import Path # We use autouse, so this fixture # is called automatically before all tests. @pytest.fixture(scope=\\\"function\\\", autouse=True) async def init_taskiq_dependencies(): # Here we use Path, but you can use other # pytest fixtures here. E.G. FastAPI app. broker.add_dependency_context({Path: Path.cwd()}) yield # After the test we clear all custom dependencies. broker.custom_dependency_context = {} \",\"This fixture will update dependency context for our broker before every test. Now tasks with dependencies can be used. Let's try it out.\",\"@pytest.mark.anyio async def test_modify_path(): task = await modify_path.kiq() result = await task.wait_result() assert str(result.return_value).endswith(\\\"taskiq.py\\\") \",\"This should pass. And that's it for now.\"]},\"93\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"5\",{\"1\":{\"71\":2,\"75\":1}}],[\"5672\",{\"1\":{\"66\":4,\"71\":2}}],[\"7\",{\"1\":{\"65\":1}}],[\"x=1\",{\"1\":{\"62\":3}}],[\"x\",{\"1\":{\"62\":6}}],[\"xdist\",{\"1\":{\"6\":1}}],[\"<path\",{\"1\":{\"60\":1}}],[\"3909759521484375e\",{\"1\":{\"65\":1}}],[\"3\",{\"1\":{\"57\":1}}],[\"└──\",{\"1\":{\"50\":3}}],[\"│\",{\"1\":{\"50\":1}}],[\"├──\",{\"1\":{\"50\":2}}],[\"`delay=1`\",{\"1\":{\"47\":1}}],[\"❌\",{\"1\":{\"44\":16}}],[\"✅\",{\"1\":{\"44\":17}}],[\"query\",{\"1\":{\"75\":1}}],[\"queue\",{\"1\":{\"52\":1}}],[\"queues\",{\"1\":{\"44\":1}}],[\"question\",{\"1\":{\"3\":1}}],[\"jsut\",{\"1\":{\"92\":1}}],[\"jsonformatter\",{\"1\":{\"70\":1}}],[\"json\",{\"1\":{\"69\":4}}],[\"job\",{\"1\":{\"43\":1}}],[\"just\",{\"1\":{\"3\":1,\"6\":1,\"24\":1,\"33\":4,\"57\":1,\"65\":1,\"67\":1,\"75\":1,\"89\":1,\"91\":2}}],[\"404\",{\"1\":{\"93\":1}}],[\"4\",{\"1\":{\"36\":1}}],[\"9092\",{\"1\":{\"35\":1}}],[\"9000\",{\"1\":{\"18\":1}}],[\"+\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"40\":1},\"1\":{\"57\":1,\"62\":1,\"65\":1,\"66\":2,\"71\":2,\"75\":3,\"91\":1}}],[\"$\",{\"1\":{\"30\":2,\"66\":2}}],[\"8\",{\"1\":{\"27\":1}}],[\"yield\",{\"1\":{\"27\":2,\"28\":2,\"39\":2,\"41\":1,\"92\":1}}],[\"yourself\",{\"1\":{\"43\":1}}],[\"your\",{\"1\":{\"2\":1,\"3\":2,\"28\":1,\"29\":2,\"30\":1,\"32\":2,\"33\":4,\"34\":2,\"36\":4,\"37\":1,\"38\":5,\"40\":5,\"41\":2,\"43\":1,\"50\":2,\"51\":2,\"58\":1,\"61\":1,\"62\":3,\"65\":2,\"68\":1,\"69\":3,\"70\":1,\"71\":2,\"77\":2,\"78\":1,\"79\":1,\"83\":2,\"89\":1,\"90\":2,\"91\":4,\"92\":3}}],[\"you\",{\"1\":{\"1\":1,\"2\":1,\"3\":3,\"4\":3,\"5\":2,\"6\":6,\"7\":1,\"10\":4,\"11\":2,\"12\":2,\"16\":1,\"17\":3,\"18\":4,\"20\":1,\"21\":2,\"23\":1,\"25\":1,\"27\":4,\"28\":2,\"30\":9,\"31\":4,\"32\":3,\"33\":8,\"35\":7,\"36\":6,\"37\":1,\"38\":6,\"39\":2,\"40\":10,\"41\":3,\"43\":7,\"44\":2,\"45\":1,\"47\":2,\"48\":3,\"50\":8,\"51\":5,\"52\":3,\"53\":1,\"54\":2,\"57\":5,\"58\":3,\"62\":2,\"64\":4,\"65\":11,\"66\":3,\"67\":3,\"68\":3,\"69\":5,\"70\":7,\"71\":9,\"72\":4,\"73\":2,\"74\":4,\"75\":9,\"77\":10,\"78\":4,\"79\":7,\"80\":2,\"81\":4,\"82\":1,\"83\":5,\"84\":1,\"86\":4,\"87\":1,\"89\":4,\"90\":1,\"91\":3,\"92\":6}}],[\"keep\",{\"1\":{\"77\":1}}],[\"key\",{\"1\":{\"24\":1,\"92\":1}}],[\"kafkabroker\",{\"1\":{\"35\":2}}],[\"kafka\",{\"1\":{\"35\":1}}],[\"kwargs=\",{\"1\":{\"33\":1}}],[\"kwargs\",{\"1\":{\"24\":2,\"36\":2,\"75\":1}}],[\"kick\",{\"1\":{\"27\":3,\"31\":1,\"46\":2}}],[\"kickers\",{\"1\":{\"45\":1}}],[\"kicker\",{\"0\":{\"47\":1},\"1\":{\"11\":1,\"47\":6,\"48\":2,\"75\":2}}],[\"kiq\",{\"1\":{\"11\":2,\"36\":1,\"47\":3,\"48\":2,\"57\":1,\"62\":3,\"65\":2,\"66\":2,\"71\":1,\"91\":1,\"92\":1}}],[\"|\",{\"1\":{\"24\":6}}],[\"6379\",{\"1\":{\"23\":1,\"75\":2}}],[\"visible\",{\"1\":{\"62\":1}}],[\"var\",{\"1\":{\"54\":1}}],[\"variables\",{\"1\":{\"38\":1,\"39\":1,\"77\":1}}],[\"variable\",{\"1\":{\"38\":1,\"50\":1,\"65\":1,\"77\":1,\"79\":1,\"89\":1}}],[\"val\",{\"1\":{\"57\":2,\"91\":6}}],[\"validate\",{\"1\":{\"89\":1}}],[\"valid\",{\"1\":{\"51\":1,\"66\":1}}],[\"values\",{\"1\":{\"24\":1,\"27\":1,\"59\":1}}],[\"value\",{\"1\":{\"19\":1,\"20\":1,\"40\":1,\"50\":1,\"51\":1,\"57\":2,\"65\":5,\"66\":11,\"71\":4,\"75\":1,\"80\":3,\"91\":1,\"92\":1}}],[\"very\",{\"1\":{\"45\":1,\"78\":1}}],[\"versions\",{\"1\":{\"4\":1,\"6\":2}}],[\"ve\",{\"1\":{\"6\":1,\"30\":1,\"38\":1,\"79\":1}}],[\"05\",{\"1\":{\"66\":1}}],[\"0013580322265625e\",{\"1\":{\"66\":1}}],[\"06\",{\"1\":{\"65\":1}}],[\"0\",{\"1\":{\"18\":4,\"23\":1,\"66\":2,\"75\":2}}],[\"==\",{\"1\":{\"36\":1,\"62\":3,\"65\":1,\"66\":2,\"90\":1,\"91\":2}}],[\"=\",{\"1\":{\"17\":1,\"18\":1,\"23\":2,\"24\":2,\"27\":1,\"30\":3,\"32\":2,\"35\":3,\"36\":4,\"37\":1,\"38\":1,\"39\":4,\"40\":2,\"41\":1,\"47\":3,\"51\":1,\"62\":10,\"65\":4,\"66\":8,\"71\":3,\"75\":5,\"79\":1,\"90\":3,\"91\":2,\"92\":4}}],[\">\",{\"1\":{\"11\":1,\"27\":5,\"28\":1,\"30\":1,\"32\":5,\"33\":7,\"36\":1,\"39\":1,\"40\":1,\"41\":1,\"47\":1,\"48\":3,\"51\":2,\"57\":1,\"62\":3,\"65\":2,\"66\":4,\"71\":2,\"75\":1,\"79\":1,\"91\":3}}],[\"12\",{\"1\":{\"91\":1}}],[\"11\",{\"1\":{\"75\":4,\"91\":3}}],[\"10\",{\"1\":{\"62\":1}}],[\"1\",{\"1\":{\"10\":1,\"47\":1,\"48\":3,\"51\":1,\"57\":1,\"65\":2,\"66\":5,\"71\":4,\"79\":1,\"91\":1}}],[\"zones\",{\"1\":{\"73\":1}}],[\"zmq\",{\"1\":{\"10\":3}}],[\"zeromqbroker\",{\"0\":{\"10\":1},\"1\":{\"17\":2,\"18\":2,\"40\":2,\"90\":2}}],[\"22\",{\"1\":{\"62\":1}}],[\"2\",{\"1\":{\"6\":1,\"57\":1,\"62\":1,\"65\":1,\"66\":1,\"71\":1}}],[\"g\",{\"1\":{\"92\":1}}],[\"guess\",{\"1\":{\"79\":1,\"92\":1}}],[\"guest\",{\"1\":{\"66\":8,\"71\":4}}],[\"guide\",{\"0\":{\"3\":1},\"1\":{\"3\":1,\"4\":1}}],[\"graph\",{\"1\":{\"80\":3}}],[\"graphs\",{\"1\":{\"37\":1}}],[\"graceful\",{\"1\":{\"59\":1}}],[\"give\",{\"1\":{\"70\":1,\"79\":1}}],[\"given\",{\"1\":{\"55\":1,\"61\":1}}],[\"gitignore\",{\"1\":{\"58\":2}}],[\"git\",{\"1\":{\"5\":1,\"64\":1}}],[\"glob\",{\"1\":{\"55\":1,\"61\":1}}],[\"global\",{\"1\":{\"44\":1,\"77\":1}}],[\"generics\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"generic\",{\"1\":{\"79\":1,\"84\":3}}],[\"generators\",{\"1\":{\"78\":1}}],[\"generator\",{\"0\":{\"82\":1},\"1\":{\"59\":1,\"82\":2,\"83\":1}}],[\"generates\",{\"1\":{\"47\":1}}],[\"general\",{\"1\":{\"41\":1}}],[\"getting\",{\"0\":{\"63\":1}}],[\"gets\",{\"1\":{\"62\":2,\"72\":1}}],[\"get\",{\"1\":{\"27\":1,\"32\":2,\"33\":2,\"39\":1,\"40\":2,\"41\":1,\"47\":1,\"49\":1,\"50\":2,\"52\":3,\"57\":1,\"62\":1,\"65\":3,\"66\":3,\"74\":1,\"78\":1,\"90\":1}}],[\"gained\",{\"1\":{\"40\":1}}],[\"got\",{\"1\":{\"40\":1}}],[\"going\",{\"1\":{\"36\":2,\"47\":1,\"65\":1,\"66\":1,\"75\":1,\"80\":2,\"83\":1}}],[\"good\",{\"1\":{\"29\":1,\"32\":1}}],[\"hit\",{\"1\":{\"79\":1}}],[\"hint\",{\"1\":{\"81\":1}}],[\"hints\",{\"1\":{\"70\":1,\"79\":1}}],[\"hinted\",{\"1\":{\"57\":1}}],[\"high\",{\"1\":{\"59\":1}}],[\"higher\",{\"1\":{\"29\":1}}],[\"highly\",{\"1\":{\"5\":1,\"38\":1,\"40\":1,\"64\":1,\"66\":1}}],[\"httpconnection\",{\"1\":{\"40\":3}}],[\"h\",{\"1\":{\"30\":2}}],[\"hello\",{\"1\":{\"47\":1,\"48\":3,\"75\":1}}],[\"helps\",{\"1\":{\"41\":1,\"43\":1}}],[\"helpful\",{\"1\":{\"31\":1}}],[\"help=\",{\"1\":{\"30\":1}}],[\"help\",{\"1\":{\"30\":4,\"50\":1,\"71\":1}}],[\"helper\",{\"1\":{\"27\":2,\"33\":3,\"75\":1}}],[\"heavy\",{\"1\":{\"43\":1,\"71\":4}}],[\"here\",{\"1\":{\"27\":3,\"28\":1,\"32\":3,\"33\":2,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"44\":1,\"51\":2,\"52\":1,\"62\":5,\"75\":6,\"79\":1,\"90\":1,\"92\":3}}],[\"hot\",{\"0\":{\"58\":1},\"1\":{\"58\":1}}],[\"however\",{\"1\":{\"62\":2}}],[\"how\",{\"0\":{\"79\":1,\"80\":1},\"1\":{\"23\":1,\"35\":1,\"36\":1,\"52\":1,\"66\":1,\"72\":1}}],[\"hooks\",{\"1\":{\"31\":1,\"51\":1}}],[\"hook\",{\"1\":{\"5\":1,\"51\":2}}],[\"had\",{\"1\":{\"40\":2}}],[\"happens\",{\"1\":{\"51\":1,\"66\":1}}],[\"happen\",{\"1\":{\"37\":1,\"83\":1}}],[\"handling\",{\"0\":{\"83\":1}}],[\"handle\",{\"1\":{\"36\":1,\"38\":1,\"83\":1}}],[\"handlers\",{\"1\":{\"37\":1,\"38\":1,\"77\":3}}],[\"handler\",{\"1\":{\"34\":1,\"40\":1,\"77\":1}}],[\"hand\",{\"1\":{\"39\":1}}],[\"handing\",{\"1\":{\"36\":1}}],[\"handy\",{\"1\":{\"27\":1,\"83\":1}}],[\"have\",{\"1\":{\"3\":2,\"4\":1,\"5\":1,\"11\":1,\"18\":1,\"22\":1,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":3,\"33\":3,\"35\":1,\"39\":1,\"40\":3,\"41\":1,\"43\":3,\"44\":4,\"49\":1,\"50\":3,\"51\":1,\"54\":1,\"55\":1,\"57\":2,\"58\":1,\"62\":2,\"69\":2,\"70\":1,\"71\":3,\"72\":2,\"73\":2,\"74\":3,\"75\":1,\"86\":1,\"90\":1}}],[\"has\",{\"1\":{\"1\":1,\"16\":1,\"29\":2,\"38\":1,\"40\":1,\"41\":1,\"45\":1,\"46\":1,\"48\":1,\"50\":1,\"52\":1,\"65\":1,\"69\":1,\"73\":2,\"75\":1,\"80\":1,\"85\":1,\"86\":1,\"90\":1}}],[\"url\",{\"1\":{\"79\":1}}],[\"uuid\",{\"1\":{\"69\":1}}],[\"uvloop\",{\"1\":{\"50\":1}}],[\"uvicorn\",{\"1\":{\"40\":1}}],[\"utc\",{\"1\":{\"73\":1,\"75\":1}}],[\"utcnow\",{\"1\":{\"62\":1,\"75\":3}}],[\"utils\",{\"1\":{\"50\":2}}],[\"utf\",{\"1\":{\"27\":1}}],[\"unschedule\",{\"1\":{\"75\":2}}],[\"understand\",{\"1\":{\"65\":1}}],[\"undefined\",{\"1\":{\"10\":1,\"65\":1}}],[\"unavailable\",{\"1\":{\"58\":1}}],[\"unique\",{\"1\":{\"48\":1,\"72\":1,\"75\":1}}],[\"union\",{\"1\":{\"27\":2}}],[\"until\",{\"1\":{\"40\":1,\"74\":1}}],[\"unless\",{\"1\":{\"32\":1}}],[\"usual\",{\"1\":{\"75\":1}}],[\"us\",{\"1\":{\"38\":1,\"89\":1}}],[\"usage\",{\"1\":{\"30\":1}}],[\"using\",{\"1\":{\"4\":3,\"5\":1,\"6\":1,\"11\":1,\"24\":1,\"35\":2,\"38\":1,\"44\":2,\"45\":1,\"47\":1,\"48\":3,\"53\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"64\":2,\"66\":1,\"70\":1,\"75\":1,\"77\":2,\"78\":1,\"79\":1,\"80\":1,\"86\":1,\"89\":1,\"90\":1}}],[\"useful\",{\"0\":{\"79\":1},\"1\":{\"48\":2,\"52\":2,\"59\":1,\"65\":1,\"69\":1,\"70\":1,\"86\":1,\"90\":1}}],[\"users\",{\"1\":{\"40\":1,\"86\":1}}],[\"user\",{\"1\":{\"11\":1}}],[\"used\",{\"1\":{\"11\":1,\"19\":1,\"20\":1,\"22\":1,\"32\":1,\"33\":1,\"47\":1,\"49\":2,\"51\":1,\"53\":1,\"59\":2,\"60\":1,\"61\":1,\"73\":1,\"75\":2,\"82\":1,\"92\":2}}],[\"use\",{\"0\":{\"44\":1},\"1\":{\"4\":1,\"6\":1,\"11\":2,\"23\":2,\"24\":3,\"27\":1,\"30\":3,\"31\":1,\"34\":1,\"35\":5,\"36\":3,\"38\":2,\"39\":2,\"40\":5,\"41\":2,\"43\":2,\"45\":1,\"47\":1,\"49\":1,\"51\":2,\"52\":1,\"54\":1,\"57\":1,\"58\":1,\"61\":1,\"62\":1,\"64\":1,\"65\":2,\"66\":3,\"67\":1,\"68\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":2,\"75\":6,\"77\":3,\"78\":2,\"79\":2,\"80\":3,\"81\":2,\"87\":1,\"89\":1,\"92\":5}}],[\"uses\",{\"1\":{\"1\":1,\"9\":2,\"10\":1,\"23\":1,\"31\":1,\"47\":1,\"49\":1,\"51\":1,\"69\":1,\"91\":1}}],[\"update\",{\"1\":{\"69\":1,\"72\":1,\"92\":1}}],[\"up\",{\"0\":{\"4\":1},\"1\":{\"36\":1,\"62\":1,\"65\":1,\"66\":2,\"73\":1,\"92\":1}}],[\"e\",{\"1\":{\"92\":1}}],[\"evaluated\",{\"1\":{\"80\":1}}],[\"evaluate\",{\"1\":{\"80\":1}}],[\"ever\",{\"1\":{\"83\":1}}],[\"everything\",{\"1\":{\"36\":1,\"40\":1}}],[\"every\",{\"1\":{\"31\":1,\"40\":1,\"41\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"58\":1,\"71\":2,\"72\":1,\"74\":1,\"87\":1,\"92\":1}}],[\"events\",{\"1\":{\"34\":1,\"35\":1,\"36\":1,\"44\":1,\"77\":3}}],[\"event\",{\"1\":{\"16\":1,\"37\":2,\"40\":2,\"50\":1,\"62\":3,\"77\":3,\"79\":1}}],[\"even\",{\"1\":{\"5\":1,\"37\":1,\"47\":1,\"52\":1,\"74\":1,\"79\":1,\"89\":1}}],[\"europe\",{\"1\":{\"73\":1}}],[\"else\",{\"1\":{\"65\":1,\"66\":2}}],[\"element\",{\"1\":{\"46\":1}}],[\"err\",{\"1\":{\"65\":1,\"66\":2}}],[\"error=true\",{\"1\":{\"17\":1}}],[\"error\",{\"1\":{\"17\":2,\"51\":1,\"57\":1,\"65\":1,\"66\":2}}],[\"errors\",{\"1\":{\"17\":1,\"59\":1,\"83\":2}}],[\"edge\",{\"1\":{\"51\":1}}],[\"equivalent\",{\"1\":{\"48\":1}}],[\"earlier\",{\"1\":{\"66\":1}}],[\"easier\",{\"1\":{\"39\":1}}],[\"easily\",{\"1\":{\"30\":1,\"36\":2,\"43\":1,\"68\":1,\"75\":1,\"78\":1,\"87\":1,\"89\":1}}],[\"easy\",{\"1\":{\"30\":1,\"34\":1,\"39\":1,\"40\":2,\"43\":1,\"52\":1}}],[\"each\",{\"1\":{\"12\":1,\"35\":2,\"75\":2}}],[\"except\",{\"1\":{\"51\":1,\"62\":3}}],[\"exceptions\",{\"1\":{\"59\":1,\"83\":2}}],[\"exception\",{\"0\":{\"83\":1},\"1\":{\"17\":2,\"51\":2,\"83\":1}}],[\"existing\",{\"0\":{\"44\":1},\"1\":{\"69\":1}}],[\"exists\",{\"1\":{\"32\":1,\"38\":1}}],[\"exiting\",{\"1\":{\"62\":1}}],[\"exited\",{\"1\":{\"62\":3}}],[\"exit\",{\"1\":{\"30\":1}}],[\"expand\",{\"1\":{\"86\":1}}],[\"expression\",{\"1\":{\"79\":1,\"89\":1,\"90\":1}}],[\"experience\",{\"1\":{\"37\":1}}],[\"expected\",{\"1\":{\"92\":1}}],[\"expect\",{\"1\":{\"31\":1,\"40\":1,\"91\":1}}],[\"explained\",{\"1\":{\"24\":1}}],[\"explicitly\",{\"1\":{\"11\":1,\"32\":1,\"40\":1,\"62\":1}}],[\"exection\",{\"1\":{\"59\":1}}],[\"exec\",{\"1\":{\"30\":2}}],[\"executor\",{\"1\":{\"67\":1}}],[\"executing\",{\"1\":{\"65\":1,\"66\":2,\"74\":1,\"89\":1}}],[\"execution\",{\"1\":{\"17\":1,\"19\":2,\"29\":1,\"31\":2,\"32\":2,\"33\":1,\"49\":1,\"51\":1,\"52\":2,\"56\":1,\"59\":1,\"62\":2,\"65\":4,\"66\":8,\"67\":1,\"79\":1,\"82\":3,\"92\":1}}],[\"executable\",{\"1\":{\"62\":1}}],[\"executes\",{\"1\":{\"66\":1,\"72\":1}}],[\"executed\",{\"1\":{\"9\":1,\"10\":1,\"29\":1,\"51\":9,\"56\":3,\"59\":1,\"62\":1,\"74\":6}}],[\"execute\",{\"1\":{\"9\":1,\"16\":1,\"31\":1,\"33\":2,\"43\":1,\"44\":1,\"51\":3,\"62\":1,\"71\":4,\"75\":1,\"83\":1}}],[\"examples\",{\"1\":{\"38\":2,\"40\":2,\"87\":1}}],[\"example\",{\"1\":{\"28\":1,\"31\":1,\"32\":1,\"33\":1,\"38\":1,\"40\":1,\"43\":1,\"46\":2,\"48\":2,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"56\":1,\"57\":1,\"60\":1,\"62\":4,\"65\":1,\"66\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"75\":5,\"77\":3,\"79\":1,\"80\":2,\"81\":1,\"82\":1,\"83\":1,\"92\":2}}],[\"external\",{\"1\":{\"46\":2}}],[\"extended\",{\"1\":{\"75\":1}}],[\"extend\",{\"1\":{\"25\":1,\"43\":2}}],[\"extendable\",{\"1\":{\"25\":1,\"47\":1}}],[\"extending\",{\"0\":{\"25\":1}}],[\"extras\",{\"1\":{\"18\":1,\"69\":1}}],[\"extra\",{\"1\":{\"10\":1,\"58\":1}}],[\"endswith\",{\"1\":{\"92\":2}}],[\"environ\",{\"1\":{\"90\":1}}],[\"environments\",{\"0\":{\"62\":1},\"1\":{\"4\":1,\"6\":1}}],[\"environment\",{\"0\":{\"4\":1,\"89\":1},\"1\":{\"89\":3,\"90\":1}}],[\"env\",{\"1\":{\"89\":1,\"90\":3}}],[\"enumerating\",{\"1\":{\"55\":1}}],[\"ensure\",{\"1\":{\"51\":1}}],[\"entry\",{\"1\":{\"30\":2}}],[\"entrypoint\",{\"1\":{\"30\":1}}],[\"enabled\",{\"1\":{\"59\":1}}],[\"enables\",{\"1\":{\"17\":1,\"55\":1,\"61\":1}}],[\"enable\",{\"1\":{\"17\":1,\"18\":1,\"24\":1,\"36\":1,\"58\":2}}],[\"encounter\",{\"1\":{\"10\":1}}],[\"either\",{\"1\":{\"3\":1,\"24\":2,\"28\":1,\"31\":1,\"52\":1,\"67\":1}}],[\"ecosystem\",{\"1\":{\"1\":1}}],[\"r\",{\"1\":{\"58\":1}}],[\"root\",{\"1\":{\"90\":1}}],[\"routing\",{\"1\":{\"48\":1}}],[\"robust\",{\"1\":{\"37\":1}}],[\"rich\",{\"1\":{\"44\":1}}],[\"right\",{\"1\":{\"41\":1,\"51\":1,\"56\":1}}],[\"rates\",{\"1\":{\"59\":1}}],[\"raw\",{\"1\":{\"27\":1,\"28\":1}}],[\"raise\",{\"1\":{\"17\":1,\"33\":1,\"67\":1}}],[\"raised\",{\"1\":{\"17\":1}}],[\"rabbitmq\",{\"0\":{\"13\":1},\"1\":{\"44\":1,\"66\":2}}],[\"runner\",{\"1\":{\"39\":1}}],[\"running\",{\"0\":{\"65\":1},\"1\":{\"39\":1,\"59\":1,\"61\":1,\"66\":2,\"71\":1,\"89\":1}}],[\"runtime\",{\"1\":{\"23\":1,\"33\":1,\"75\":1}}],[\"run\",{\"0\":{\"66\":1,\"74\":1},\"1\":{\"4\":1,\"5\":2,\"6\":5,\"10\":3,\"24\":1,\"36\":2,\"37\":2,\"39\":1,\"41\":2,\"47\":1,\"50\":2,\"53\":1,\"54\":1,\"60\":2,\"61\":2,\"62\":12,\"65\":2,\"66\":6,\"67\":3,\"71\":2,\"73\":1,\"74\":2,\"75\":1,\"90\":1}}],[\"runs\",{\"1\":{\"3\":1,\"52\":1}}],[\"rules\",{\"1\":{\"3\":1,\"29\":1,\"40\":1}}],[\"reevaluate\",{\"1\":{\"80\":1}}],[\"reduce\",{\"1\":{\"79\":1}}],[\"redids\",{\"1\":{\"23\":1}}],[\"redisasyncresultbackend\",{\"1\":{\"66\":4}}],[\"redisschedulesource\",{\"0\":{\"23\":1},\"1\":{\"23\":2,\"75\":3}}],[\"redis\",{\"0\":{\"14\":1,\"21\":1},\"1\":{\"14\":2,\"21\":2,\"23\":5,\"36\":2,\"40\":2,\"46\":2,\"62\":6,\"64\":1,\"66\":7,\"75\":12,\"77\":1,\"79\":3}}],[\"registered\",{\"1\":{\"62\":1}}],[\"register\",{\"1\":{\"62\":9}}],[\"relatively\",{\"1\":{\"65\":1}}],[\"reload\",{\"0\":{\"58\":1},\"1\":{\"58\":5}}],[\"releases\",{\"1\":{\"32\":1}}],[\"remove\",{\"1\":{\"75\":1}}],[\"removed\",{\"1\":{\"32\":1}}],[\"remember\",{\"1\":{\"51\":1}}],[\"real\",{\"1\":{\"49\":1,\"65\":1,\"90\":1}}],[\"reads\",{\"1\":{\"46\":1}}],[\"read\",{\"1\":{\"12\":1,\"21\":1,\"23\":1,\"30\":1,\"35\":1,\"37\":1}}],[\"reading\",{\"1\":{\"10\":1,\"66\":1}}],[\"ready\",{\"1\":{\"4\":1,\"32\":2,\"39\":1,\"65\":1}}],[\"readme\",{\"1\":{\"4\":1,\"12\":1,\"21\":1,\"37\":1}}],[\"receive\",{\"1\":{\"80\":1}}],[\"receiver\",{\"1\":{\"59\":4,\"62\":5}}],[\"received\",{\"1\":{\"45\":1,\"51\":1,\"52\":2,\"56\":2,\"59\":1}}],[\"recursively\",{\"1\":{\"50\":1,\"55\":2,\"61\":1}}],[\"recommend\",{\"1\":{\"5\":1,\"38\":1,\"64\":1,\"66\":1}}],[\"reuse\",{\"1\":{\"38\":2}}],[\"re\",{\"1\":{\"36\":1,\"89\":1}}],[\"reference\",{\"1\":{\"31\":1}}],[\"reject\",{\"1\":{\"28\":1,\"52\":2}}],[\"reject=message\",{\"1\":{\"28\":1}}],[\"rejecting\",{\"1\":{\"28\":1}}],[\"resolution\",{\"1\":{\"92\":1}}],[\"resolving\",{\"1\":{\"41\":1}}],[\"resolvable\",{\"1\":{\"40\":1}}],[\"resolved\",{\"1\":{\"36\":1,\"48\":1}}],[\"resolve\",{\"1\":{\"24\":1,\"40\":1,\"72\":1,\"84\":1}}],[\"restrict\",{\"1\":{\"67\":1}}],[\"restart\",{\"1\":{\"17\":2,\"58\":1}}],[\"resultbackend\",{\"1\":{\"49\":1}}],[\"results\",{\"1\":{\"19\":1,\"20\":2,\"45\":1,\"49\":3,\"66\":3}}],[\"result\",{\"0\":{\"19\":1,\"21\":1,\"32\":1,\"49\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"27\":1,\"32\":21,\"44\":1,\"45\":1,\"47\":1,\"49\":3,\"51\":2,\"56\":2,\"64\":1,\"65\":8,\"66\":17,\"80\":1,\"91\":3,\"92\":3}}],[\"resent\",{\"1\":{\"17\":1}}],[\"retrieve\",{\"1\":{\"32\":1}}],[\"retries\",{\"1\":{\"17\":2}}],[\"retries=20\",{\"1\":{\"17\":1}}],[\"retry\",{\"0\":{\"17\":1},\"1\":{\"17\":3}}],[\"returned\",{\"1\":{\"57\":1,\"65\":2,\"66\":4}}],[\"returns\",{\"1\":{\"38\":1,\"41\":1,\"49\":1,\"65\":1}}],[\"returntype\",{\"1\":{\"32\":5}}],[\"return\",{\"1\":{\"11\":1,\"19\":1,\"20\":2,\"27\":2,\"28\":1,\"32\":4,\"33\":2,\"40\":1,\"41\":1,\"51\":1,\"57\":1,\"65\":2,\"66\":4,\"71\":2,\"75\":1,\"90\":1,\"91\":4,\"92\":1}}],[\"requires\",{\"1\":{\"66\":1}}],[\"required\",{\"1\":{\"4\":1,\"28\":1,\"61\":1}}],[\"requeue\",{\"1\":{\"52\":2}}],[\"request\",{\"1\":{\"3\":1,\"38\":4,\"40\":10}}],[\"replaced\",{\"1\":{\"91\":1}}],[\"replace\",{\"1\":{\"66\":1,\"89\":1,\"90\":1}}],[\"replacement\",{\"1\":{\"1\":1}}],[\"repo\",{\"1\":{\"4\":1,\"12\":1,\"38\":1,\"40\":1}}],[\"level\",{\"0\":{\"86\":1},\"1\":{\"59\":2,\"61\":2,\"86\":1}}],[\"level=logging\",{\"1\":{\"36\":1}}],[\"leave\",{\"1\":{\"57\":1}}],[\"let\",{\"1\":{\"36\":1,\"38\":1,\"40\":1,\"41\":1,\"45\":1,\"50\":2,\"65\":1,\"66\":3,\"71\":3,\"79\":1,\"81\":1,\"87\":1,\"91\":2,\"92\":2}}],[\"less\",{\"1\":{\"3\":1,\"69\":1}}],[\"language\",{\"1\":{\"89\":1}}],[\"lambda\",{\"1\":{\"62\":9}}],[\"later\",{\"1\":{\"51\":1,\"77\":1,\"79\":1}}],[\"latest\",{\"1\":{\"36\":1}}],[\"lack\",{\"1\":{\"43\":1}}],[\"label1=\",{\"1\":{\"75\":1}}],[\"label1=1\",{\"1\":{\"48\":1}}],[\"label2=\",{\"1\":{\"48\":2}}],[\"label=1\",{\"1\":{\"48\":2}}],[\"labels=\",{\"1\":{\"33\":1}}],[\"labels\",{\"1\":{\"24\":5,\"47\":3,\"48\":3,\"51\":3,\"75\":2}}],[\"labelschedulesource\",{\"0\":{\"24\":1},\"1\":{\"24\":2,\"62\":2,\"71\":2}}],[\"label\",{\"1\":{\"17\":1,\"24\":2,\"29\":3,\"47\":1,\"51\":1,\"67\":1}}],[\"ll\",{\"1\":{\"8\":1,\"18\":1,\"38\":1,\"40\":1,\"52\":1,\"57\":2}}],[\"little\",{\"1\":{\"65\":1,\"71\":1}}],[\"light\",{\"1\":{\"45\":1}}],[\"like\",{\"1\":{\"27\":2,\"30\":1,\"35\":3,\"36\":1,\"37\":1,\"38\":1,\"40\":2,\"44\":1,\"45\":1,\"54\":1,\"57\":1,\"70\":1,\"71\":2,\"73\":1,\"79\":1,\"80\":2,\"82\":1}}],[\"line\",{\"1\":{\"36\":1,\"50\":1,\"66\":1}}],[\"link\",{\"1\":{\"13\":1,\"14\":1,\"15\":1}}],[\"lints\",{\"1\":{\"5\":1}}],[\"linting\",{\"0\":{\"5\":1}}],[\"library\",{\"1\":{\"21\":1,\"25\":1,\"35\":2,\"36\":1,\"37\":1,\"38\":1,\"40\":2,\"43\":2,\"53\":1,\"64\":1,\"66\":1}}],[\"libraries\",{\"0\":{\"44\":1},\"1\":{\"1\":1,\"35\":1,\"36\":1,\"37\":1,\"40\":1,\"43\":1,\"69\":1,\"86\":1}}],[\"lib\",{\"1\":{\"10\":1,\"12\":1,\"52\":1,\"66\":1,\"90\":1}}],[\"listqueuebroker\",{\"1\":{\"36\":2,\"62\":6,\"75\":2}}],[\"listener\",{\"1\":{\"62\":1}}],[\"listening\",{\"1\":{\"50\":1,\"77\":1}}],[\"listen\",{\"1\":{\"27\":2,\"28\":2,\"36\":1,\"46\":2,\"62\":1}}],[\"list\",{\"1\":{\"7\":1,\"8\":1,\"17\":1,\"24\":2,\"33\":3,\"36\":2,\"71\":1,\"75\":2,\"86\":1}}],[\"loads\",{\"1\":{\"70\":1}}],[\"loadb\",{\"1\":{\"69\":1}}],[\"looks\",{\"1\":{\"45\":1,\"80\":2}}],[\"look\",{\"1\":{\"38\":1,\"50\":1,\"69\":1,\"70\":1}}],[\"loop=loop\",{\"1\":{\"39\":2}}],[\"loop\",{\"1\":{\"36\":1,\"39\":2,\"46\":1,\"50\":1,\"62\":3,\"71\":1}}],[\"logic\",{\"1\":{\"62\":1,\"72\":1,\"89\":1}}],[\"log\",{\"1\":{\"59\":2,\"61\":2}}],[\"logging\",{\"1\":{\"36\":4,\"59\":2,\"61\":2}}],[\"logs=true\",{\"1\":{\"32\":1}}],[\"logs\",{\"1\":{\"32\":8}}],[\"lot\",{\"1\":{\"32\":1}}],[\"lots\",{\"1\":{\"3\":1}}],[\"localhost\",{\"1\":{\"23\":1,\"35\":1,\"36\":1,\"62\":3,\"66\":6,\"71\":2,\"75\":2,\"79\":1}}],[\"local\",{\"1\":{\"9\":1,\"10\":1,\"65\":1}}],[\"locally\",{\"1\":{\"3\":1,\"6\":1,\"9\":1}}],[\"lovely\",{\"1\":{\"47\":1,\"48\":3}}],[\"love\",{\"1\":{\"3\":1}}],[\"bigger\",{\"1\":{\"40\":1}}],[\"bit\",{\"1\":{\"35\":1,\"65\":1}}],[\"balance\",{\"1\":{\"48\":1}}],[\"back\",{\"1\":{\"45\":1,\"52\":1}}],[\"backend\",{\"0\":{\"21\":1,\"32\":1,\"49\":1},\"1\":{\"20\":1,\"21\":1,\"32\":6,\"49\":2,\"51\":1,\"56\":1,\"64\":1,\"66\":4,\"90\":1}}],[\"backends\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"32\":1,\"44\":2,\"45\":1}}],[\"basic\",{\"1\":{\"43\":1}}],[\"basicconfig\",{\"1\":{\"36\":1}}],[\"bases\",{\"1\":{\"92\":1}}],[\"based\",{\"1\":{\"84\":1}}],[\"base\",{\"1\":{\"40\":1,\"92\":1}}],[\"blocking\",{\"1\":{\"36\":1}}],[\"bots\",{\"1\":{\"36\":5}}],[\"bot\",{\"1\":{\"36\":22}}],[\"bool\",{\"1\":{\"11\":1,\"32\":2}}],[\"built\",{\"1\":{\"43\":1,\"44\":1}}],[\"building\",{\"1\":{\"37\":1}}],[\"build\",{\"1\":{\"30\":1,\"80\":1}}],[\"button\",{\"1\":{\"79\":1}}],[\"but\",{\"1\":{\"1\":1,\"3\":1,\"5\":1,\"6\":1,\"9\":2,\"27\":1,\"28\":1,\"30\":1,\"33\":1,\"35\":3,\"38\":2,\"40\":1,\"41\":1,\"43\":1,\"44\":1,\"47\":1,\"49\":1,\"51\":1,\"59\":1,\"62\":1,\"65\":2,\"66\":1,\"67\":1,\"68\":2,\"69\":2,\"70\":2,\"71\":1,\"72\":1,\"78\":1,\"79\":3,\"89\":1,\"90\":1,\"92\":5}}],[\"bytes\",{\"1\":{\"27\":4,\"28\":2}}],[\"by\",{\"1\":{\"9\":1,\"18\":1,\"32\":1,\"39\":1,\"43\":1,\"45\":2,\"49\":2,\"50\":1,\"51\":2,\"52\":1,\"53\":1,\"55\":1,\"56\":2,\"58\":1,\"61\":1,\"62\":2,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"75\":6,\"77\":1,\"79\":1,\"80\":1,\"85\":1}}],[\"brokerwrapper\",{\"1\":{\"35\":2}}],[\"brokermessage\",{\"1\":{\"27\":6}}],[\"broker=broker\",{\"1\":{\"24\":1,\"39\":1,\"71\":1}}],[\"broker\",{\"0\":{\"11\":1,\"14\":1,\"15\":1,\"46\":1},\"1\":{\"9\":1,\"10\":3,\"11\":7,\"17\":3,\"18\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":3,\"27\":3,\"28\":3,\"29\":2,\"31\":3,\"32\":1,\"33\":3,\"35\":6,\"36\":9,\"38\":3,\"39\":2,\"40\":9,\"41\":3,\"44\":1,\"45\":1,\"46\":2,\"47\":10,\"48\":3,\"50\":10,\"52\":3,\"54\":2,\"56\":1,\"59\":1,\"60\":1,\"62\":23,\"64\":2,\"65\":12,\"66\":27,\"69\":1,\"71\":6,\"75\":6,\"77\":4,\"79\":1,\"83\":1,\"89\":2,\"90\":7,\"91\":5,\"92\":6}}],[\"brokers\",{\"0\":{\"8\":1,\"12\":1,\"27\":1},\"1\":{\"8\":1,\"11\":1,\"12\":2,\"27\":2,\"29\":1,\"35\":2,\"40\":1,\"43\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":2,\"59\":1,\"62\":1,\"86\":1}}],[\"been\",{\"1\":{\"74\":2}}],[\"berlin\",{\"1\":{\"73\":1}}],[\"below\",{\"1\":{\"71\":1}}],[\"behaviour\",{\"1\":{\"65\":1,\"74\":2}}],[\"behavior\",{\"1\":{\"10\":1,\"73\":1,\"80\":1}}],[\"beginning\",{\"1\":{\"65\":2,\"66\":1}}],[\"become\",{\"1\":{\"65\":1,\"92\":1}}],[\"becomes\",{\"1\":{\"36\":1,\"38\":1}}],[\"becuase\",{\"1\":{\"36\":1}}],[\"because\",{\"1\":{\"10\":1,\"32\":1,\"38\":1,\"40\":1,\"41\":1,\"44\":1,\"57\":1,\"66\":1,\"81\":1,\"90\":1}}],[\"best\",{\"1\":{\"36\":1}}],[\"before\",{\"1\":{\"31\":1,\"33\":1,\"51\":3,\"59\":1,\"62\":2,\"66\":1,\"82\":2,\"89\":1,\"92\":3}}],[\"between\",{\"1\":{\"10\":1,\"35\":2}}],[\"better\",{\"1\":{\"3\":2,\"37\":1,\"75\":1,\"79\":2}}],[\"be\",{\"1\":{\"1\":1,\"3\":1,\"9\":1,\"10\":2,\"11\":1,\"17\":1,\"18\":3,\"20\":2,\"24\":6,\"25\":1,\"28\":1,\"29\":2,\"31\":1,\"32\":1,\"33\":5,\"34\":1,\"35\":1,\"36\":1,\"38\":3,\"40\":1,\"47\":1,\"48\":2,\"49\":1,\"51\":2,\"52\":2,\"55\":1,\"56\":1,\"59\":2,\"61\":1,\"62\":2,\"68\":1,\"69\":2,\"70\":1,\"71\":3,\"73\":4,\"74\":4,\"75\":2,\"77\":1,\"79\":3,\"80\":2,\"83\":2,\"84\":1,\"86\":1,\"87\":1,\"91\":1,\"92\":2}}],[\"pm\",{\"1\":{\"71\":1}}],[\"purpose\",{\"1\":{\"75\":1}}],[\"purposes\",{\"1\":{\"62\":1,\"92\":1}}],[\"pub\",{\"1\":{\"46\":1}}],[\"public\",{\"1\":{\"40\":1}}],[\"publishes\",{\"1\":{\"10\":1}}],[\"publish\",{\"1\":{\"3\":1,\"6\":1}}],[\"puts\",{\"1\":{\"46\":1,\"52\":1}}],[\"people\",{\"1\":{\"33\":3,\"40\":2,\"62\":1}}],[\"perform\",{\"1\":{\"27\":1,\"36\":1,\"82\":1}}],[\"pika\",{\"1\":{\"13\":2,\"64\":1,\"66\":6,\"71\":2}}],[\"pipelines\",{\"1\":{\"31\":1,\"44\":1}}],[\"pip\",{\"1\":{\"2\":2,\"13\":1,\"14\":1,\"15\":1,\"21\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"64\":1,\"66\":2}}],[\"policies\",{\"1\":{\"50\":1}}],[\"polling\",{\"1\":{\"36\":1}}],[\"popularity\",{\"1\":{\"40\":1}}],[\"popular\",{\"1\":{\"40\":1}}],[\"populates\",{\"1\":{\"39\":1}}],[\"populate\",{\"1\":{\"39\":3,\"41\":1}}],[\"pool\",{\"1\":{\"38\":2,\"40\":2,\"77\":2,\"79\":2}}],[\"post\",{\"1\":{\"33\":1,\"51\":4}}],[\"possible\",{\"1\":{\"27\":1,\"40\":1,\"43\":1,\"59\":1,\"62\":2,\"72\":1}}],[\"point\",{\"1\":{\"30\":1,\"38\":1,\"90\":1}}],[\"points\",{\"1\":{\"30\":2}}],[\"port=9000\",{\"1\":{\"18\":1}}],[\"port\",{\"1\":{\"10\":2,\"18\":1}}],[\"poetry\",{\"1\":{\"4\":2}}],[\"place\",{\"1\":{\"90\":1}}],[\"plain\",{\"1\":{\"65\":1}}],[\"plugin\",{\"1\":{\"89\":1}}],[\"plugins\",{\"1\":{\"7\":1,\"53\":2}}],[\"please\",{\"1\":{\"3\":2,\"4\":2,\"10\":2,\"11\":1,\"20\":1,\"27\":2,\"36\":1,\"37\":1,\"40\":1,\"50\":1,\"51\":1,\"71\":2}}],[\"pydantic\",{\"1\":{\"57\":1}}],[\"pypi\",{\"1\":{\"53\":1,\"64\":2}}],[\"py\",{\"1\":{\"50\":3,\"55\":2,\"61\":2,\"65\":3,\"66\":4,\"90\":1,\"92\":2}}],[\"pyzmq\",{\"1\":{\"10\":1}}],[\"pyenv\",{\"1\":{\"4\":3,\"6\":1}}],[\"python\",{\"1\":{\"4\":2,\"6\":2,\"30\":1,\"40\":1,\"43\":1,\"50\":1,\"59\":1,\"65\":3,\"66\":4,\"67\":1,\"89\":1}}],[\"pytest\",{\"1\":{\"4\":1,\"6\":5,\"39\":1,\"41\":2,\"89\":2,\"90\":3,\"91\":3,\"92\":6}}],[\"practice\",{\"1\":{\"32\":1}}],[\"primitives\",{\"1\":{\"71\":1}}],[\"printed\",{\"1\":{\"66\":1}}],[\"print\",{\"1\":{\"30\":1,\"33\":2,\"36\":1,\"47\":2,\"48\":3,\"51\":1,\"62\":6,\"65\":3,\"66\":6,\"75\":1}}],[\"priorities\",{\"1\":{\"29\":1}}],[\"priority\",{\"1\":{\"29\":2}}],[\"preparations\",{\"0\":{\"88\":1},\"1\":{\"90\":1}}],[\"prepare\",{\"1\":{\"3\":1}}],[\"predict\",{\"1\":{\"80\":1}}],[\"preserve\",{\"1\":{\"72\":1}}],[\"previous\",{\"1\":{\"62\":1,\"72\":1}}],[\"previously\",{\"1\":{\"40\":1}}],[\"prefetched\",{\"1\":{\"59\":1}}],[\"prefetch\",{\"1\":{\"59\":1}}],[\"pre\",{\"1\":{\"5\":3,\"33\":1,\"51\":3}}],[\"pr\",{\"1\":{\"3\":2,\"6\":1}}],[\"providing\",{\"1\":{\"75\":1}}],[\"provides\",{\"1\":{\"43\":1}}],[\"provide\",{\"1\":{\"38\":1,\"40\":2,\"41\":1,\"50\":1,\"66\":1,\"78\":1,\"79\":1,\"92\":1}}],[\"production\",{\"1\":{\"64\":1,\"92\":1}}],[\"producers\",{\"1\":{\"35\":1}}],[\"propagated\",{\"1\":{\"83\":1}}],[\"propagate\",{\"1\":{\"59\":1,\"83\":3}}],[\"programs\",{\"1\":{\"87\":1}}],[\"programmatically\",{\"1\":{\"77\":1}}],[\"program\",{\"1\":{\"53\":1}}],[\"prometheusmiddleware\",{\"1\":{\"18\":3}}],[\"prometheus\",{\"0\":{\"18\":1},\"1\":{\"18\":2}}],[\"project\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"35\":1,\"37\":1,\"38\":1,\"40\":1,\"44\":3,\"50\":8,\"54\":2,\"60\":3,\"70\":1,\"78\":1,\"90\":1,\"91\":4,\"92\":2}}],[\"projects\",{\"1\":{\"1\":1,\"10\":1,\"35\":1,\"44\":2}}],[\"processing\",{\"1\":{\"46\":1}}],[\"process\",{\"1\":{\"10\":1,\"36\":2,\"39\":1,\"40\":2,\"41\":1,\"43\":1,\"54\":1,\"66\":2}}],[\"processes\",{\"1\":{\"10\":4,\"50\":1}}],[\"problems\",{\"1\":{\"35\":1,\"71\":1}}],[\"problem\",{\"1\":{\"3\":1,\"27\":1,\"44\":1,\"71\":1,\"92\":1}}],[\"painful\",{\"1\":{\"71\":1}}],[\"pattern\",{\"1\":{\"55\":3,\"61\":3}}],[\"patterns\",{\"1\":{\"1\":1}}],[\"pathlib\",{\"1\":{\"92\":2}}],[\"path\",{\"1\":{\"36\":2,\"38\":1,\"40\":1,\"50\":1,\"59\":1,\"61\":1,\"92\":11}}],[\"passed\",{\"1\":{\"36\":2}}],[\"pass\",{\"1\":{\"27\":1,\"57\":1,\"58\":2,\"72\":1,\"74\":1,\"75\":2,\"81\":1,\"91\":2,\"92\":2}}],[\"package\",{\"1\":{\"18\":1,\"21\":1,\"23\":1,\"25\":1,\"40\":1,\"78\":1}}],[\"packages\",{\"1\":{\"12\":1}}],[\"parse\",{\"1\":{\"30\":2,\"57\":2,\"91\":7}}],[\"parsed\",{\"1\":{\"30\":2}}],[\"parser\",{\"1\":{\"30\":3}}],[\"parses\",{\"1\":{\"24\":1,\"37\":1}}],[\"particular\",{\"1\":{\"65\":1}}],[\"part\",{\"1\":{\"21\":1,\"32\":1,\"39\":1,\"41\":1}}],[\"parts\",{\"1\":{\"12\":1}}],[\"param\",{\"1\":{\"32\":6,\"33\":2,\"39\":1}}],[\"parameter\",{\"1\":{\"10\":1,\"18\":1,\"27\":1,\"30\":3,\"32\":1,\"40\":2,\"56\":1,\"59\":2,\"61\":1,\"80\":4,\"81\":1}}],[\"parameters\",{\"0\":{\"59\":1,\"61\":1},\"1\":{\"6\":1,\"12\":1,\"17\":1,\"21\":1,\"24\":1,\"28\":1,\"57\":2}}],[\"parallel\",{\"1\":{\"6\":1}}],[\"page\",{\"1\":{\"3\":1}}],[\"writing\",{\"1\":{\"39\":2,\"79\":1}}],[\"write\",{\"1\":{\"33\":1,\"35\":1,\"51\":1,\"79\":1,\"87\":2}}],[\"wait\",{\"1\":{\"62\":2,\"65\":3,\"66\":4,\"74\":1,\"91\":1,\"92\":1}}],[\"waits\",{\"1\":{\"46\":1}}],[\"way\",{\"1\":{\"62\":1,\"78\":1,\"79\":1}}],[\"warning\",{\"1\":{\"27\":1,\"65\":1,\"75\":1}}],[\"was\",{\"1\":{\"17\":1,\"33\":1,\"47\":1,\"51\":7,\"52\":1,\"72\":1,\"74\":1}}],[\"want\",{\"1\":{\"3\":1,\"4\":1,\"6\":2,\"17\":1,\"31\":1,\"32\":1,\"33\":1,\"35\":1,\"39\":1,\"40\":1,\"43\":1,\"50\":2,\"54\":1,\"62\":1,\"65\":1,\"67\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":3,\"72\":2,\"73\":1,\"75\":4,\"77\":3,\"82\":1,\"83\":3,\"86\":1,\"87\":1,\"89\":2,\"91\":2,\"92\":1}}],[\"w\",{\"1\":{\"10\":1}}],[\"will\",{\"1\":{\"4\":1,\"6\":1,\"10\":1,\"18\":1,\"20\":1,\"31\":1,\"32\":1,\"33\":2,\"36\":1,\"50\":1,\"51\":1,\"62\":3,\"65\":1,\"67\":1,\"71\":1,\"74\":4,\"75\":1,\"77\":1,\"79\":1,\"80\":2,\"83\":1,\"84\":1,\"92\":1}}],[\"within\",{\"1\":{\"36\":1,\"62\":2}}],[\"without\",{\"1\":{\"5\":1,\"6\":1,\"32\":1,\"36\":1,\"51\":1,\"92\":1}}],[\"with\",{\"0\":{\"73\":1,\"87\":1},\"1\":{\"2\":1,\"3\":1,\"5\":1,\"6\":3,\"10\":3,\"11\":1,\"17\":2,\"18\":1,\"25\":1,\"27\":1,\"28\":1,\"29\":4,\"32\":5,\"33\":3,\"34\":2,\"35\":2,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":6,\"41\":1,\"46\":1,\"47\":3,\"48\":1,\"50\":2,\"52\":2,\"53\":2,\"54\":1,\"55\":1,\"58\":1,\"59\":1,\"62\":1,\"65\":2,\"66\":6,\"67\":1,\"69\":2,\"71\":1,\"75\":4,\"79\":1,\"81\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":2}}],[\"whith\",{\"1\":{\"75\":1}}],[\"which\",{\"1\":{\"36\":1,\"38\":1,\"41\":1,\"53\":1,\"55\":1,\"61\":1}}],[\"while\",{\"1\":{\"27\":1,\"35\":1,\"65\":1,\"66\":2,\"71\":1,\"79\":1}}],[\"why\",{\"0\":{\"44\":1},\"1\":{\"34\":1,\"55\":1,\"58\":1,\"72\":1,\"78\":1}}],[\"whether\",{\"1\":{\"32\":3,\"65\":1,\"74\":1}}],[\"when\",{\"1\":{\"16\":1,\"24\":5,\"32\":1,\"33\":1,\"36\":2,\"39\":1,\"40\":1,\"47\":1,\"56\":6,\"58\":1,\"59\":5,\"62\":1,\"67\":1,\"74\":1,\"77\":2}}],[\"where\",{\"1\":{\"10\":1,\"20\":1,\"71\":1,\"77\":1,\"80\":1}}],[\"who\",{\"1\":{\"3\":1,\"52\":1,\"62\":1}}],[\"what\",{\"0\":{\"1\":1,\"43\":1},\"1\":{\"40\":1,\"71\":1,\"91\":1,\"92\":2}}],[\"web\",{\"1\":{\"37\":3,\"38\":3,\"39\":1,\"40\":1}}],[\"were\",{\"1\":{\"36\":1,\"40\":1,\"87\":1}}],[\"well\",{\"1\":{\"18\":1,\"62\":1,\"70\":1,\"92\":1}}],[\"we\",{\"1\":{\"3\":3,\"4\":1,\"5\":2,\"6\":1,\"8\":1,\"22\":1,\"27\":1,\"29\":1,\"32\":1,\"34\":1,\"36\":1,\"37\":2,\"38\":4,\"39\":1,\"40\":6,\"41\":2,\"43\":1,\"44\":2,\"50\":2,\"55\":1,\"57\":1,\"62\":14,\"64\":1,\"65\":1,\"66\":11,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":6,\"72\":2,\"73\":3,\"75\":3,\"78\":2,\"79\":3,\"80\":2,\"82\":1,\"87\":3,\"89\":3,\"90\":4,\"91\":2,\"92\":8}}],[\"world\",{\"1\":{\"49\":1,\"65\":1}}],[\"words\",{\"1\":{\"45\":1}}],[\"word\",{\"1\":{\"24\":1,\"92\":1}}],[\"working\",{\"0\":{\"73\":1}}],[\"works\",{\"1\":{\"66\":1}}],[\"workers\",{\"0\":{\"50\":1},\"1\":{\"18\":1,\"50\":1,\"58\":1,\"59\":1}}],[\"worker\",{\"0\":{\"54\":1},\"1\":{\"10\":5,\"36\":4,\"39\":1,\"40\":2,\"41\":1,\"45\":1,\"50\":3,\"51\":2,\"53\":1,\"54\":2,\"56\":3,\"58\":2,\"62\":15,\"65\":1,\"66\":6,\"70\":1,\"77\":4,\"79\":1,\"83\":2}}],[\"work\",{\"0\":{\"80\":1},\"1\":{\"1\":1,\"40\":1,\"46\":1,\"50\":1,\"81\":1,\"91\":1}}],[\"would\",{\"1\":{\"17\":1,\"41\":1,\"91\":1}}],[\"won\",{\"1\":{\"1\":1,\"51\":1,\"57\":1,\"58\":1,\"59\":1,\"62\":1,\"75\":1,\"78\":1,\"79\":2}}],[\"os\",{\"1\":{\"90\":2}}],[\"ot\",{\"1\":{\"75\":1}}],[\"otherwise\",{\"1\":{\"10\":1,\"36\":1}}],[\"other\",{\"0\":{\"59\":1},\"1\":{\"1\":1,\"18\":1,\"35\":2,\"36\":1,\"38\":1,\"44\":1,\"69\":1,\"81\":1,\"92\":1}}],[\"old\",{\"1\":{\"72\":1}}],[\"obvious\",{\"1\":{\"72\":1}}],[\"object\",{\"1\":{\"47\":1,\"65\":1,\"75\":1}}],[\"objects\",{\"1\":{\"22\":1}}],[\"out\",{\"1\":{\"72\":1,\"92\":1}}],[\"outside\",{\"1\":{\"62\":1}}],[\"our\",{\"1\":{\"5\":1,\"40\":1,\"66\":1,\"71\":2,\"73\":1,\"90\":1,\"91\":1,\"92\":1}}],[\"over\",{\"1\":{\"65\":1,\"69\":1,\"84\":1}}],[\"overcome\",{\"1\":{\"62\":1}}],[\"override\",{\"1\":{\"49\":1}}],[\"overridden\",{\"1\":{\"9\":1}}],[\"overview\",{\"0\":{\"45\":1}}],[\"own\",{\"1\":{\"35\":1,\"51\":1,\"62\":1,\"68\":1,\"69\":1,\"70\":1,\"78\":1}}],[\"ok\",{\"1\":{\"29\":1,\"65\":1}}],[\"optimized\",{\"1\":{\"80\":1}}],[\"optional\",{\"1\":{\"29\":1,\"30\":1,\"33\":4,\"60\":1}}],[\"options\",{\"1\":{\"11\":1,\"55\":1}}],[\"option\",{\"1\":{\"6\":1,\"50\":1,\"55\":2,\"57\":1,\"58\":4,\"61\":2,\"83\":1}}],[\"open\",{\"1\":{\"77\":1,\"83\":1}}],[\"opening\",{\"1\":{\"27\":1}}],[\"operations\",{\"1\":{\"27\":1}}],[\"omit\",{\"1\":{\"81\":1}}],[\"omitted\",{\"1\":{\"24\":3}}],[\"ommited\",{\"1\":{\"24\":1}}],[\"occurs\",{\"1\":{\"16\":1}}],[\"once\",{\"1\":{\"66\":1,\"74\":1,\"80\":1}}],[\"on\",{\"1\":{\"10\":1,\"17\":4,\"23\":1,\"32\":1,\"33\":1,\"35\":2,\"37\":1,\"38\":3,\"40\":4,\"41\":1,\"43\":1,\"44\":1,\"45\":4,\"47\":1,\"51\":3,\"65\":1,\"74\":1,\"75\":3,\"79\":2,\"80\":2,\"84\":1,\"92\":1}}],[\"ones\",{\"1\":{\"72\":1}}],[\"one\",{\"1\":{\"10\":1,\"22\":1,\"36\":1,\"38\":1,\"40\":1,\"41\":1,\"48\":1,\"57\":1,\"65\":2,\"66\":4,\"71\":3,\"77\":1,\"89\":1,\"91\":3}}],[\"only\",{\"1\":{\"10\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":2,\"39\":1,\"40\":2,\"53\":1,\"61\":1,\"71\":2,\"72\":3,\"80\":1,\"81\":1,\"83\":1,\"85\":1}}],[\"orjsonserializer\",{\"1\":{\"69\":1}}],[\"orjson\",{\"1\":{\"69\":1}}],[\"ordinary\",{\"1\":{\"65\":1,\"66\":1}}],[\"order\",{\"1\":{\"24\":1,\"51\":1}}],[\"or\",{\"1\":{\"2\":1,\"3\":2,\"10\":1,\"18\":1,\"24\":2,\"28\":2,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"36\":2,\"38\":1,\"40\":5,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"50\":1,\"51\":4,\"52\":5,\"55\":2,\"57\":1,\"58\":1,\"61\":2,\"64\":2,\"65\":1,\"67\":1,\"68\":1,\"69\":1,\"72\":1,\"73\":2,\"75\":3,\"89\":1,\"92\":1}}],[\"offset\",{\"1\":{\"24\":3,\"73\":3}}],[\"officially\",{\"1\":{\"7\":1,\"8\":1}}],[\"official\",{\"1\":{\"4\":1}}],[\"of\",{\"1\":{\"1\":2,\"3\":1,\"7\":1,\"10\":3,\"12\":3,\"17\":2,\"18\":1,\"21\":2,\"23\":1,\"24\":3,\"27\":2,\"28\":2,\"29\":1,\"30\":1,\"31\":2,\"32\":6,\"33\":2,\"36\":3,\"38\":2,\"40\":2,\"41\":1,\"43\":1,\"44\":2,\"46\":1,\"49\":1,\"51\":2,\"52\":4,\"55\":2,\"56\":2,\"57\":2,\"59\":5,\"61\":3,\"62\":5,\"64\":1,\"65\":3,\"66\":3,\"67\":2,\"68\":1,\"69\":3,\"70\":1,\"71\":4,\"73\":4,\"74\":1,\"75\":5,\"77\":3,\"79\":3,\"80\":3,\"86\":1}}],[\"d\",{\"1\":{\"70\":1}}],[\"dyn\",{\"1\":{\"62\":27}}],[\"dynamically\",{\"1\":{\"62\":1}}],[\"dynamic\",{\"0\":{\"62\":1,\"75\":1},\"1\":{\"23\":1,\"62\":4,\"75\":2}}],[\"day\",{\"1\":{\"71\":1}}],[\"dark\",{\"1\":{\"45\":2}}],[\"data\",{\"1\":{\"65\":1,\"69\":1}}],[\"dataclasses\",{\"1\":{\"57\":1}}],[\"database\",{\"1\":{\"33\":1,\"77\":1,\"83\":1}}],[\"data=message\",{\"1\":{\"28\":1}}],[\"datetime\",{\"1\":{\"24\":1,\"62\":4,\"69\":1,\"73\":1,\"75\":10}}],[\"db\",{\"1\":{\"38\":1}}],[\"dp\",{\"1\":{\"36\":6}}],[\"dumps\",{\"1\":{\"70\":2}}],[\"dumpb\",{\"1\":{\"69\":1}}],[\"dummyresultbackend\",{\"0\":{\"20\":1},\"1\":{\"49\":1}}],[\"during\",{\"1\":{\"17\":1,\"31\":1,\"90\":1}}],[\"declaration\",{\"1\":{\"62\":2,\"65\":1}}],[\"declared\",{\"1\":{\"81\":2}}],[\"declare\",{\"1\":{\"35\":1}}],[\"decorator\",{\"1\":{\"48\":2,\"67\":1}}],[\"detailed\",{\"1\":{\"38\":1}}],[\"dep2\",{\"1\":{\"80\":3}}],[\"dep1\",{\"1\":{\"80\":1}}],[\"dep\",{\"1\":{\"80\":3}}],[\"depends\",{\"1\":{\"92\":1}}],[\"dependenices\",{\"1\":{\"40\":1}}],[\"dependencies\",{\"0\":{\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"85\":1,\"86\":1},\"1\":{\"4\":3,\"34\":1,\"36\":1,\"37\":2,\"38\":4,\"40\":4,\"41\":1,\"59\":1,\"78\":3,\"79\":3,\"80\":5,\"81\":3,\"82\":1,\"83\":2,\"84\":1,\"85\":1,\"86\":4,\"92\":8}}],[\"dependency\",{\"0\":{\"81\":1,\"92\":1},\"1\":{\"2\":1,\"36\":1,\"37\":3,\"38\":1,\"39\":2,\"40\":4,\"41\":4,\"44\":1,\"79\":2,\"80\":4,\"81\":2,\"83\":2,\"86\":1,\"92\":6}}],[\"depend\",{\"1\":{\"38\":1,\"40\":2,\"80\":1}}],[\"deps\",{\"1\":{\"37\":4,\"38\":2,\"41\":1}}],[\"deprecated\",{\"1\":{\"32\":1}}],[\"described\",{\"1\":{\"60\":1}}],[\"description\",{\"1\":{\"3\":1}}],[\"dest=\",{\"1\":{\"30\":1}}],[\"demo\",{\"1\":{\"30\":4}}],[\"deleting\",{\"1\":{\"33\":1}}],[\"delete\",{\"1\":{\"33\":1,\"75\":2}}],[\"delay=1\",{\"1\":{\"47\":1}}],[\"delayed\",{\"1\":{\"29\":1,\"33\":1,\"36\":1}}],[\"delay\",{\"1\":{\"29\":2}}],[\"delivery\",{\"1\":{\"27\":1}}],[\"developers\",{\"1\":{\"52\":1,\"73\":1,\"74\":1}}],[\"developer\",{\"1\":{\"27\":1}}],[\"development\",{\"1\":{\"9\":1,\"34\":1,\"65\":1}}],[\"defining\",{\"1\":{\"35\":1,\"62\":1}}],[\"define\",{\"1\":{\"11\":2,\"41\":1,\"48\":1,\"62\":4,\"68\":1,\"69\":2,\"70\":3,\"91\":2}}],[\"defined\",{\"1\":{\"11\":1,\"54\":1,\"62\":1,\"66\":1,\"71\":1,\"91\":1}}],[\"def\",{\"1\":{\"11\":1,\"17\":1,\"24\":1,\"27\":5,\"28\":1,\"30\":1,\"32\":5,\"33\":7,\"36\":5,\"39\":1,\"40\":3,\"41\":2,\"47\":2,\"48\":5,\"51\":2,\"57\":1,\"62\":3,\"65\":2,\"66\":4,\"71\":2,\"75\":1,\"79\":1,\"90\":1,\"91\":5,\"92\":3}}],[\"default=\",{\"1\":{\"30\":1}}],[\"default\",{\"0\":{\"85\":1},\"1\":{\"9\":1,\"11\":1,\"16\":1,\"17\":1,\"27\":1,\"30\":2,\"40\":2,\"49\":2,\"50\":1,\"53\":1,\"55\":1,\"58\":1,\"59\":3,\"61\":2,\"68\":2,\"69\":1,\"70\":1,\"72\":1,\"74\":1,\"80\":1,\"85\":1,\"86\":2}}],[\"dramatiq\",{\"1\":{\"44\":1}}],[\"draft\",{\"1\":{\"3\":1}}],[\"drops\",{\"1\":{\"52\":1}}],[\"drop\",{\"1\":{\"1\":1}}],[\"dive\",{\"1\":{\"87\":1}}],[\"didn\",{\"1\":{\"66\":1}}],[\"directory\",{\"1\":{\"50\":1,\"55\":2,\"58\":1,\"61\":1}}],[\"directly\",{\"1\":{\"11\":1,\"64\":1,\"78\":1,\"79\":1}}],[\"diagram\",{\"1\":{\"45\":2}}],[\"disables\",{\"1\":{\"59\":1}}],[\"disable\",{\"1\":{\"57\":1,\"58\":1}}],[\"discover\",{\"1\":{\"50\":2,\"55\":2,\"61\":1}}],[\"discuss\",{\"1\":{\"45\":1}}],[\"discussions\",{\"1\":{\"3\":1}}],[\"dispatcher\",{\"1\":{\"36\":6}}],[\"distributed\",{\"0\":{\"66\":1},\"1\":{\"35\":1,\"43\":2,\"44\":1,\"66\":1,\"89\":1}}],[\"difference\",{\"1\":{\"39\":1,\"62\":1}}],[\"differense\",{\"1\":{\"35\":1}}],[\"different\",{\"1\":{\"1\":2,\"4\":1,\"6\":2,\"25\":1,\"27\":1,\"34\":1,\"35\":4,\"41\":1,\"53\":1,\"70\":1,\"72\":1,\"92\":1}}],[\"dict\",{\"1\":{\"24\":2,\"70\":1}}],[\"docker\",{\"1\":{\"66\":1}}],[\"documentation\",{\"1\":{\"4\":1,\"30\":1,\"35\":1,\"44\":1}}],[\"down\",{\"1\":{\"36\":2}}],[\"done\",{\"1\":{\"43\":1,\"75\":1,\"90\":1}}],[\"don\",{\"1\":{\"24\":1,\"62\":1,\"65\":1,\"83\":1,\"89\":1,\"92\":1}}],[\"do\",{\"0\":{\"80\":1},\"1\":{\"3\":1,\"6\":2,\"18\":1,\"20\":1,\"27\":1,\"31\":1,\"32\":2,\"33\":2,\"49\":1,\"58\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"70\":1,\"71\":1,\"72\":1,\"75\":2,\"82\":2,\"92\":1}}],[\"doesn\",{\"1\":{\"1\":1,\"20\":2,\"28\":1,\"29\":1,\"38\":1,\"39\":1,\"41\":1,\"43\":1,\"49\":1,\"65\":1,\"68\":1,\"71\":1,\"80\":2,\"81\":1,\"90\":1}}],[\"nice\",{\"1\":{\"36\":1,\"78\":1}}],[\"named\",{\"1\":{\"50\":1,\"62\":1}}],[\"names\",{\"1\":{\"48\":2}}],[\"namespace\",{\"1\":{\"30\":1}}],[\"name=\",{\"1\":{\"33\":1,\"36\":1,\"48\":1,\"62\":3}}],[\"name\",{\"1\":{\"30\":2,\"36\":1,\"44\":1,\"47\":1,\"62\":3,\"65\":1,\"66\":2}}],[\"nats\",{\"0\":{\"15\":1},\"1\":{\"15\":2,\"64\":1}}],[\"necessary\",{\"1\":{\"65\":1}}],[\"never\",{\"1\":{\"65\":1}}],[\"network\",{\"1\":{\"65\":1,\"69\":1}}],[\"next\",{\"1\":{\"31\":1,\"74\":1}}],[\"new\",{\"1\":{\"23\":1,\"27\":5,\"30\":1,\"32\":1,\"33\":2,\"41\":1,\"46\":1,\"50\":2,\"53\":1,\"62\":2,\"66\":1,\"70\":1,\"72\":1,\"75\":2,\"86\":2}}],[\"needs\",{\"1\":{\"43\":1}}],[\"needed\",{\"1\":{\"32\":1,\"39\":1}}],[\"need\",{\"1\":{\"18\":1,\"20\":1,\"23\":1,\"27\":1,\"30\":2,\"35\":1,\"39\":1,\"41\":1,\"64\":1,\"65\":2,\"66\":4,\"71\":1,\"90\":1,\"92\":2}}],[\"normal\",{\"1\":{\"87\":1,\"91\":1}}],[\"noqa\",{\"1\":{\"75\":1}}],[\"non\",{\"1\":{\"69\":1}}],[\"none\",{\"1\":{\"20\":1,\"24\":7,\"27\":5,\"28\":2,\"30\":1,\"32\":3,\"33\":6,\"36\":1,\"39\":1,\"47\":1,\"48\":3,\"51\":1,\"62\":3,\"65\":1,\"66\":3,\"75\":1,\"79\":1}}],[\"now\",{\"1\":{\"32\":1,\"36\":1,\"40\":1,\"62\":5,\"65\":2,\"66\":4,\"71\":1,\"75\":2,\"79\":1,\"92\":2}}],[\"no\",{\"1\":{\"28\":1,\"38\":1,\"41\":1,\"57\":1,\"59\":2,\"61\":1,\"73\":1,\"83\":3}}],[\"note\",{\"1\":{\"32\":1,\"40\":1,\"51\":1,\"65\":1}}],[\"notice\",{\"1\":{\"24\":1}}],[\"not\",{\"0\":{\"44\":1},\"1\":{\"1\":1,\"3\":1,\"12\":1,\"21\":1,\"27\":1,\"32\":1,\"33\":3,\"36\":2,\"40\":3,\"55\":1,\"58\":1,\"62\":2,\"65\":3,\"66\":3,\"67\":1,\"69\":1,\"71\":1,\"72\":1,\"73\":2,\"74\":1,\"80\":1,\"90\":1,\"92\":3,\"93\":1}}],[\"number\",{\"1\":{\"10\":1,\"17\":1,\"29\":2,\"51\":1,\"59\":3,\"71\":1}}],[\"nutshell\",{\"0\":{\"1\":1}}],[\"n\",{\"1\":{\"6\":2,\"10\":2,\"71\":2}}],[\"fs\",{\"1\":{\"55\":1,\"61\":1}}],[\"fsd\",{\"1\":{\"50\":2,\"55\":1,\"61\":1}}],[\"f\",{\"1\":{\"51\":1,\"65\":2,\"66\":4}}],[\"further\",{\"1\":{\"65\":1}}],[\"fully\",{\"1\":{\"44\":1,\"90\":1}}],[\"fun\",{\"1\":{\"34\":1}}],[\"function\",{\"1\":{\"28\":1,\"32\":1,\"36\":6,\"38\":4,\"39\":1,\"40\":3,\"59\":1,\"62\":2,\"65\":4,\"66\":1,\"67\":1,\"71\":1,\"72\":2,\"75\":1,\"77\":1,\"79\":1,\"80\":2,\"81\":1,\"82\":1,\"83\":1,\"86\":1,\"91\":3,\"92\":2}}],[\"functionality\",{\"1\":{\"25\":1,\"43\":2,\"57\":1,\"58\":1}}],[\"functions\",{\"1\":{\"9\":1,\"17\":1,\"36\":2,\"40\":2,\"43\":2,\"44\":1,\"52\":1,\"67\":1,\"72\":2,\"78\":1,\"81\":1,\"87\":1,\"90\":1}}],[\"future\",{\"1\":{\"32\":1,\"75\":1}}],[\"fancier\",{\"1\":{\"65\":1}}],[\"fails\",{\"1\":{\"57\":1}}],[\"failed\",{\"1\":{\"51\":1}}],[\"factory\",{\"1\":{\"38\":1,\"40\":1}}],[\"faster\",{\"1\":{\"69\":1}}],[\"fastapi\",{\"0\":{\"40\":1},\"1\":{\"37\":1,\"40\":14,\"41\":8,\"78\":1,\"92\":1}}],[\"faststream\",{\"0\":{\"35\":1},\"1\":{\"35\":15}}],[\"false\",{\"1\":{\"32\":1}}],[\"favorite\",{\"1\":{\"2\":1,\"30\":1,\"34\":1}}],[\"fly\",{\"1\":{\"75\":1}}],[\"flow\",{\"1\":{\"52\":1}}],[\"float\",{\"1\":{\"29\":1}}],[\"flag\",{\"1\":{\"41\":1,\"74\":1}}],[\"flexible\",{\"1\":{\"1\":1}}],[\"fits\",{\"1\":{\"64\":1}}],[\"fit\",{\"1\":{\"43\":1}}],[\"fixtures\",{\"1\":{\"92\":2}}],[\"fixture\",{\"1\":{\"39\":3,\"41\":5,\"90\":2,\"92\":3}}],[\"filter\",{\"1\":{\"72\":1}}],[\"filters\",{\"1\":{\"36\":1}}],[\"filled\",{\"1\":{\"38\":1}}],[\"files\",{\"1\":{\"55\":3,\"58\":2,\"61\":3}}],[\"file\",{\"1\":{\"36\":1,\"38\":1,\"40\":1,\"50\":1,\"58\":1,\"65\":1,\"66\":2,\"83\":1,\"90\":2}}],[\"field\",{\"1\":{\"27\":1,\"31\":1,\"73\":2}}],[\"fields\",{\"1\":{\"27\":1,\"28\":1,\"73\":2,\"79\":2}}],[\"finds\",{\"1\":{\"24\":1}}],[\"find\",{\"1\":{\"7\":1,\"38\":1,\"40\":1,\"44\":1,\"50\":1,\"64\":1,\"65\":1,\"72\":1}}],[\"first\",{\"0\":{\"74\":1,\"86\":1},\"1\":{\"3\":1,\"30\":1,\"38\":1,\"61\":2,\"66\":2,\"74\":2,\"86\":1}}],[\"frameworks\",{\"1\":{\"34\":1}}],[\"framework\",{\"0\":{\"34\":1},\"1\":{\"34\":1,\"37\":1,\"40\":1}}],[\"from\",{\"1\":{\"3\":1,\"4\":1,\"6\":1,\"10\":1,\"11\":1,\"17\":1,\"18\":1,\"23\":2,\"24\":2,\"27\":4,\"30\":3,\"32\":4,\"33\":3,\"35\":3,\"36\":8,\"37\":1,\"38\":2,\"40\":5,\"41\":2,\"46\":2,\"47\":1,\"49\":2,\"51\":2,\"52\":1,\"62\":7,\"64\":2,\"65\":2,\"66\":6,\"67\":1,\"69\":1,\"70\":1,\"71\":4,\"72\":3,\"73\":1,\"74\":1,\"75\":5,\"77\":2,\"79\":1,\"85\":2,\"90\":1,\"91\":3,\"92\":4}}],[\"frustrated\",{\"1\":{\"3\":1}}],[\"few\",{\"1\":{\"74\":1}}],[\"feature\",{\"1\":{\"44\":1,\"58\":1,\"81\":1,\"83\":1}}],[\"features\",{\"1\":{\"1\":1,\"35\":1,\"57\":1}}],[\"fetching\",{\"1\":{\"32\":2}}],[\"fetch\",{\"1\":{\"22\":1,\"32\":2}}],[\"feel\",{\"1\":{\"3\":1}}],[\"focused\",{\"1\":{\"35\":2}}],[\"found\",{\"1\":{\"25\":1,\"51\":1,\"62\":1,\"65\":1,\"66\":2,\"93\":1}}],[\"following\",{\"1\":{\"24\":1,\"50\":1}}],[\"follow\",{\"1\":{\"4\":1}}],[\"folks\",{\"1\":{\"3\":1}}],[\"force\",{\"1\":{\"68\":1,\"80\":1}}],[\"form\",{\"1\":{\"47\":2}}],[\"formatter\",{\"1\":{\"70\":3}}],[\"formatters\",{\"0\":{\"70\":1},\"1\":{\"70\":3}}],[\"format\",{\"0\":{\"68\":1},\"1\":{\"24\":1,\"68\":4,\"69\":3,\"70\":2}}],[\"forget\",{\"1\":{\"24\":1,\"65\":1}}],[\"for\",{\"0\":{\"0\":1,\"13\":1},\"1\":{\"1\":2,\"3\":3,\"4\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":2,\"17\":2,\"18\":2,\"20\":1,\"22\":1,\"23\":2,\"24\":1,\"27\":2,\"28\":2,\"29\":1,\"31\":1,\"33\":1,\"35\":5,\"37\":2,\"38\":1,\"39\":4,\"40\":1,\"41\":2,\"43\":3,\"46\":4,\"47\":2,\"48\":2,\"49\":1,\"51\":4,\"52\":1,\"53\":1,\"55\":2,\"56\":1,\"57\":1,\"59\":5,\"60\":1,\"61\":1,\"62\":5,\"64\":1,\"65\":4,\"66\":2,\"69\":2,\"70\":1,\"71\":1,\"72\":2,\"73\":4,\"74\":2,\"75\":4,\"77\":1,\"79\":2,\"80\":5,\"81\":4,\"83\":1,\"86\":2,\"89\":2,\"92\":5}}],[\"msgpackserializer\",{\"1\":{\"69\":1}}],[\"msgpack\",{\"1\":{\"69\":2}}],[\"m\",{\"1\":{\"36\":1,\"65\":1}}],[\"mutate\",{\"1\":{\"92\":1}}],[\"much\",{\"1\":{\"43\":1}}],[\"multiple\",{\"0\":{\"72\":1},\"1\":{\"36\":1,\"44\":2,\"55\":1,\"61\":1,\"72\":1}}],[\"must\",{\"1\":{\"29\":2,\"31\":1,\"32\":2,\"33\":2,\"40\":1,\"46\":1,\"49\":1,\"66\":1,\"92\":1}}],[\"minutes=1\",{\"1\":{\"75\":2}}],[\"minutes=5\",{\"1\":{\"71\":1}}],[\"minutes\",{\"1\":{\"71\":1,\"75\":1}}],[\"minute\",{\"1\":{\"62\":1,\"74\":3}}],[\"minimal\",{\"1\":{\"32\":1,\"33\":1}}],[\"might\",{\"1\":{\"35\":1,\"44\":1,\"69\":1,\"70\":1,\"73\":1,\"74\":1}}],[\"middleware\",{\"0\":{\"17\":1,\"18\":1},\"1\":{\"17\":2,\"31\":3,\"51\":4}}],[\"middlewares\",{\"0\":{\"16\":1,\"31\":1,\"51\":1},\"1\":{\"16\":2,\"17\":2,\"18\":1,\"31\":4,\"44\":1,\"51\":4}}],[\"md\",{\"1\":{\"12\":1,\"21\":1,\"37\":1}}],[\"mymiddleware\",{\"1\":{\"51\":1}}],[\"myschedulesource\",{\"1\":{\"33\":1}}],[\"myresultbackend\",{\"1\":{\"32\":1}}],[\"mycommand\",{\"1\":{\"30\":1}}],[\"mybroker\",{\"1\":{\"27\":1,\"38\":1,\"50\":1,\"54\":1,\"56\":1,\"65\":1}}],[\"my\",{\"1\":{\"11\":1,\"24\":1,\"28\":1,\"30\":2,\"36\":4,\"38\":1,\"40\":1,\"47\":3,\"48\":11,\"50\":3,\"51\":2,\"54\":2,\"60\":3,\"75\":6,\"80\":1,\"81\":1,\"83\":1}}],[\"merge\",{\"1\":{\"72\":5}}],[\"merging\",{\"1\":{\"3\":1}}],[\"me\",{\"1\":{\"71\":1}}],[\"means\",{\"1\":{\"41\":1}}],[\"meant\",{\"1\":{\"34\":1,\"92\":1}}],[\"mechanism\",{\"1\":{\"30\":1}}],[\"message\",{\"0\":{\"68\":1},\"1\":{\"27\":8,\"28\":3,\"29\":3,\"30\":1,\"31\":1,\"35\":1,\"36\":7,\"46\":1,\"47\":2,\"48\":2,\"51\":14,\"52\":3,\"59\":1,\"68\":3,\"69\":2,\"70\":3}}],[\"messages\",{\"0\":{\"48\":1},\"1\":{\"10\":2,\"28\":1,\"36\":2,\"45\":2,\"46\":3,\"62\":1,\"77\":1}}],[\"method\",{\"1\":{\"27\":3,\"28\":2,\"30\":1,\"31\":1,\"33\":5,\"46\":2,\"62\":1,\"65\":3,\"67\":1,\"75\":3,\"77\":1,\"92\":1}}],[\"methods\",{\"1\":{\"27\":2,\"46\":1,\"51\":1,\"65\":1,\"69\":1,\"70\":1,\"75\":3}}],[\"metrics\",{\"1\":{\"18\":4}}],[\"mark\",{\"1\":{\"40\":1,\"91\":2,\"92\":2}}],[\"maintained\",{\"1\":{\"44\":1}}],[\"main\",{\"1\":{\"36\":6,\"38\":3,\"40\":1,\"43\":1,\"46\":1,\"47\":2,\"48\":2,\"62\":11,\"65\":5,\"66\":7,\"90\":1}}],[\"magic\",{\"1\":{\"27\":1,\"37\":1}}],[\"maximum\",{\"1\":{\"17\":1,\"59\":2}}],[\"max\",{\"1\":{\"17\":2,\"59\":3}}],[\"maybe\",{\"1\":{\"71\":1,\"89\":1}}],[\"may\",{\"1\":{\"10\":1,\"27\":1,\"31\":1,\"33\":4,\"46\":1,\"48\":1,\"52\":1,\"53\":1,\"55\":1,\"61\":1,\"65\":1,\"67\":1,\"71\":3,\"72\":1,\"75\":2,\"86\":1,\"91\":1,\"92\":1}}],[\"manner\",{\"1\":{\"43\":1}}],[\"many\",{\"1\":{\"10\":1,\"27\":1,\"40\":1,\"43\":2,\"71\":1,\"80\":1}}],[\"manually\",{\"1\":{\"5\":1,\"50\":1,\"75\":1,\"92\":2}}],[\"managing\",{\"1\":{\"4\":1}}],[\"manager\",{\"0\":{\"0\":1},\"1\":{\"1\":1,\"2\":1}}],[\"malware\",{\"1\":{\"3\":1}}],[\"makes\",{\"1\":{\"37\":1}}],[\"make\",{\"1\":{\"3\":2,\"28\":1,\"34\":1,\"37\":1,\"40\":4,\"43\":2,\"46\":1,\"79\":1}}],[\"most\",{\"1\":{\"46\":1}}],[\"mocked\",{\"1\":{\"38\":1,\"40\":1}}],[\"mock\",{\"1\":{\"38\":1}}],[\"modified\",{\"1\":{\"92\":2}}],[\"modify\",{\"1\":{\"51\":2,\"58\":2,\"90\":1,\"92\":4}}],[\"model\",{\"1\":{\"73\":1}}],[\"models\",{\"1\":{\"57\":1}}],[\"modern\",{\"1\":{\"1\":1}}],[\"module2\",{\"1\":{\"54\":1,\"60\":1}}],[\"module1\",{\"1\":{\"54\":1,\"60\":1}}],[\"module\",{\"1\":{\"50\":1,\"60\":1,\"65\":1,\"69\":1,\"71\":3,\"72\":1,\"74\":1}}],[\"modules\",{\"1\":{\"24\":1,\"50\":3,\"54\":1,\"55\":1,\"65\":1}}],[\"modular\",{\"1\":{\"43\":1}}],[\"more\",{\"1\":{\"1\":1,\"12\":1,\"21\":1,\"23\":1,\"30\":1,\"35\":5,\"36\":1,\"37\":1,\"38\":1,\"50\":1,\"53\":1,\"62\":1,\"65\":2,\"66\":2,\"71\":1,\"72\":1,\"83\":1,\"86\":1}}],[\"saved\",{\"1\":{\"51\":1,\"56\":2,\"59\":2}}],[\"save\",{\"1\":{\"51\":1}}],[\"same\",{\"1\":{\"1\":1,\"9\":1,\"17\":1,\"29\":1,\"30\":1,\"36\":1,\"38\":4,\"40\":1,\"66\":1,\"80\":1,\"90\":1}}],[\"script\",{\"1\":{\"66\":1}}],[\"scenario\",{\"1\":{\"65\":1}}],[\"scenarios\",{\"1\":{\"49\":1}}],[\"scope=\",{\"1\":{\"92\":1}}],[\"scope\",{\"1\":{\"62\":2}}],[\"scheduling\",{\"0\":{\"71\":1,\"75\":1},\"1\":{\"35\":1,\"75\":1}}],[\"schedule=\",{\"1\":{\"24\":1,\"62\":1,\"71\":1}}],[\"scheduledtaskcancellederror\",{\"1\":{\"33\":1}}],[\"scheduledtask\",{\"1\":{\"33\":6,\"73\":2}}],[\"scheduled\",{\"1\":{\"24\":1,\"33\":1,\"75\":2}}],[\"schedulers\",{\"1\":{\"75\":1}}],[\"scheduler>\",{\"1\":{\"60\":1}}],[\"scheduler\",{\"0\":{\"60\":1},\"1\":{\"23\":1,\"24\":2,\"35\":1,\"53\":1,\"60\":4,\"61\":3,\"62\":11,\"71\":11,\"72\":1,\"73\":1,\"74\":6,\"75\":4}}],[\"schedulesources\",{\"1\":{\"75\":1}}],[\"schedulesource\",{\"1\":{\"33\":3}}],[\"schedules\",{\"1\":{\"23\":2,\"33\":2,\"44\":1,\"71\":1,\"72\":3,\"75\":3}}],[\"schedule\",{\"0\":{\"22\":1,\"33\":1},\"1\":{\"22\":2,\"23\":1,\"24\":3,\"33\":15,\"60\":1,\"62\":2,\"71\":3,\"72\":3,\"73\":1,\"74\":1,\"75\":18}}],[\"switching\",{\"1\":{\"45\":1}}],[\"smooth\",{\"1\":{\"40\":1}}],[\"smaller\",{\"1\":{\"69\":1}}],[\"small\",{\"1\":{\"10\":1}}],[\"sleep\",{\"1\":{\"36\":1,\"47\":1,\"48\":3,\"51\":1,\"62\":2,\"71\":1}}],[\"system\",{\"1\":{\"46\":2,\"50\":1,\"83\":1}}],[\"systems\",{\"1\":{\"35\":1,\"59\":1}}],[\"sys\",{\"1\":{\"36\":1}}],[\"sync\",{\"1\":{\"31\":1,\"51\":2,\"59\":1,\"67\":1}}],[\"synchronously\",{\"1\":{\"1\":1}}],[\"synchronous\",{\"1\":{\"1\":1,\"44\":1,\"67\":1}}],[\"skipping\",{\"0\":{\"74\":1}}],[\"skips\",{\"1\":{\"61\":1}}],[\"skip\",{\"1\":{\"32\":1,\"61\":2,\"74\":2}}],[\"still\",{\"1\":{\"62\":1,\"65\":2,\"89\":1}}],[\"stop\",{\"1\":{\"67\":1}}],[\"stops\",{\"1\":{\"52\":1}}],[\"storage\",{\"1\":{\"23\":1,\"32\":1}}],[\"stored\",{\"1\":{\"45\":1,\"50\":1,\"79\":1}}],[\"store\",{\"1\":{\"19\":1,\"20\":1,\"32\":1,\"49\":1,\"51\":1,\"66\":2,\"75\":1,\"79\":1}}],[\"statement\",{\"1\":{\"90\":1}}],[\"state\",{\"0\":{\"76\":1,\"77\":1},\"1\":{\"38\":2,\"40\":1,\"77\":1,\"79\":7,\"85\":1}}],[\"started\",{\"0\":{\"63\":1}}],[\"start\",{\"1\":{\"36\":1,\"39\":1,\"50\":2,\"61\":1,\"66\":2,\"71\":2,\"74\":4,\"77\":1}}],[\"starts\",{\"1\":{\"36\":1}}],[\"starting\",{\"1\":{\"32\":1,\"33\":1,\"36\":1}}],[\"startup\",{\"1\":{\"27\":4,\"32\":1,\"33\":1,\"34\":1,\"36\":3,\"37\":3,\"38\":2,\"40\":4,\"44\":1,\"62\":3,\"65\":4,\"66\":4,\"75\":1,\"77\":5,\"79\":3,\"80\":1,\"82\":2}}],[\"stdout\",{\"1\":{\"36\":1}}],[\"structure\",{\"1\":{\"45\":1,\"50\":1,\"65\":1,\"69\":1}}],[\"struggle\",{\"1\":{\"3\":1}}],[\"stream=sys\",{\"1\":{\"36\":1}}],[\"string\",{\"1\":{\"24\":1,\"27\":1,\"40\":1,\"73\":1}}],[\"str\",{\"1\":{\"24\":4,\"30\":1,\"32\":3,\"33\":1,\"75\":1,\"91\":3,\"92\":2}}],[\"size\",{\"1\":{\"69\":1}}],[\"signatures\",{\"1\":{\"57\":1}}],[\"signature\",{\"1\":{\"51\":1}}],[\"simultaneously\",{\"1\":{\"59\":1}}],[\"similar\",{\"1\":{\"44\":1,\"62\":1,\"78\":1}}],[\"simply\",{\"1\":{\"37\":1,\"58\":1,\"60\":1,\"72\":1}}],[\"simpleretrymiddleware\",{\"1\":{\"17\":2,\"51\":1}}],[\"simple\",{\"0\":{\"17\":1},\"1\":{\"34\":1,\"36\":1,\"45\":1,\"50\":1,\"65\":1,\"91\":1}}],[\"side\",{\"1\":{\"36\":1,\"45\":2,\"51\":2}}],[\"since\",{\"1\":{\"3\":1,\"30\":2,\"39\":1,\"71\":1,\"75\":1,\"79\":1,\"80\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"shipped\",{\"1\":{\"53\":1}}],[\"shifted\",{\"1\":{\"30\":1}}],[\"shutting\",{\"1\":{\"36\":2}}],[\"shutdown\",{\"1\":{\"27\":4,\"32\":2,\"33\":2,\"34\":1,\"36\":3,\"40\":3,\"44\":1,\"59\":2,\"62\":3,\"65\":1,\"66\":2,\"77\":2,\"82\":1}}],[\"show\",{\"1\":{\"30\":1}}],[\"shown\",{\"1\":{\"18\":1,\"71\":1}}],[\"shortening\",{\"1\":{\"47\":1}}],[\"short\",{\"1\":{\"30\":1}}],[\"shoule\",{\"1\":{\"24\":2}}],[\"should\",{\"1\":{\"3\":1,\"28\":2,\"30\":1,\"38\":1,\"40\":2,\"59\":1,\"69\":2,\"71\":1,\"73\":1,\"74\":3,\"91\":2,\"92\":1}}],[\"shared\",{\"0\":{\"11\":2},\"1\":{\"11\":6}}],[\"specify\",{\"1\":{\"36\":1,\"40\":1,\"50\":1,\"54\":1,\"62\":1,\"73\":1}}],[\"specified\",{\"1\":{\"24\":2,\"32\":1,\"55\":1,\"61\":1}}],[\"specific\",{\"1\":{\"16\":1,\"24\":1,\"35\":1,\"68\":1,\"73\":3,\"75\":1}}],[\"special\",{\"1\":{\"9\":1,\"11\":1}}],[\"speedup\",{\"1\":{\"6\":1}}],[\"suggest\",{\"1\":{\"75\":1,\"78\":1,\"90\":1,\"92\":1}}],[\"successfully\",{\"1\":{\"62\":3,\"83\":1}}],[\"such\",{\"1\":{\"27\":1,\"30\":1,\"40\":2,\"58\":1,\"91\":1}}],[\"subdependencies\",{\"1\":{\"80\":1}}],[\"subclass\",{\"1\":{\"69\":1,\"70\":1}}],[\"subclassing\",{\"1\":{\"51\":1}}],[\"subcommand\",{\"1\":{\"30\":1}}],[\"subcommands\",{\"1\":{\"30\":2,\"53\":1}}],[\"submodule\",{\"1\":{\"50\":2}}],[\"subscribes\",{\"1\":{\"46\":1}}],[\"support\",{\"1\":{\"28\":1,\"33\":1,\"59\":1,\"75\":1}}],[\"supports\",{\"1\":{\"28\":1,\"56\":1,\"58\":2,\"69\":1,\"84\":1}}],[\"supported\",{\"1\":{\"7\":1,\"8\":1}}],[\"super\",{\"1\":{\"25\":1,\"27\":4,\"31\":1}}],[\"suitable\",{\"1\":{\"10\":1,\"92\":1}}],[\"sure\",{\"1\":{\"3\":1,\"48\":1}}],[\"solve\",{\"1\":{\"35\":1,\"44\":1,\"71\":1}}],[\"solves\",{\"1\":{\"3\":1}}],[\"sooner\",{\"1\":{\"29\":1}}],[\"somewhere\",{\"1\":{\"40\":1,\"90\":1}}],[\"sometimes\",{\"1\":{\"32\":1,\"55\":1,\"71\":1,\"72\":1,\"73\":2,\"75\":1}}],[\"something\",{\"1\":{\"3\":1,\"32\":2,\"33\":2,\"36\":1,\"38\":1,\"43\":1,\"48\":2,\"80\":1,\"82\":2}}],[\"some\",{\"1\":{\"27\":1,\"31\":2,\"48\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"65\":1,\"66\":1,\"69\":1,\"71\":2,\"72\":1,\"74\":1,\"75\":1}}],[\"source\",{\"0\":{\"33\":1},\"1\":{\"22\":1,\"23\":4,\"24\":2,\"33\":8,\"72\":1,\"73\":1,\"74\":1,\"75\":13}}],[\"sources=\",{\"1\":{\"23\":1,\"24\":1,\"71\":1,\"75\":1}}],[\"sources\",{\"0\":{\"22\":1,\"72\":1},\"1\":{\"23\":1,\"24\":2,\"33\":1,\"62\":1,\"71\":2,\"72\":4,\"75\":2}}],[\"so\",{\"1\":{\"18\":1,\"28\":1,\"31\":1,\"35\":1,\"36\":1,\"38\":1,\"40\":1,\"62\":1,\"71\":1,\"72\":1,\"92\":1}}],[\"searches\",{\"1\":{\"55\":1,\"61\":1}}],[\"search\",{\"1\":{\"53\":1,\"55\":1,\"61\":1,\"64\":1}}],[\"seen\",{\"1\":{\"44\":1}}],[\"see\",{\"1\":{\"36\":1,\"40\":1,\"45\":1,\"66\":1,\"75\":1,\"77\":1,\"81\":2,\"90\":1}}],[\"sequence\",{\"1\":{\"30\":2,\"45\":1}}],[\"sent\",{\"1\":{\"29\":1,\"33\":4,\"45\":1,\"47\":1,\"51\":3}}],[\"sends\",{\"1\":{\"71\":1}}],[\"sending\",{\"1\":{\"40\":1,\"71\":1}}],[\"send\",{\"1\":{\"1\":1,\"24\":1,\"27\":2,\"33\":2,\"36\":3,\"43\":1,\"44\":1,\"51\":4,\"62\":3,\"65\":3,\"66\":2,\"69\":1,\"70\":2,\"90\":1}}],[\"seriazier\",{\"1\":{\"70\":1}}],[\"serialization\",{\"1\":{\"69\":1}}],[\"serializes\",{\"1\":{\"70\":1}}],[\"serializer\",{\"1\":{\"69\":5,\"70\":1}}],[\"serializers\",{\"0\":{\"69\":1},\"1\":{\"44\":1,\"69\":4}}],[\"serialize\",{\"1\":{\"69\":1}}],[\"serializing\",{\"1\":{\"27\":1}}],[\"server=server\",{\"1\":{\"39\":1}}],[\"server\",{\"1\":{\"18\":2,\"39\":4,\"43\":1}}],[\"self\",{\"1\":{\"27\":5,\"28\":2,\"30\":1,\"31\":2,\"32\":5,\"33\":7,\"51\":2}}],[\"second\",{\"1\":{\"38\":1,\"47\":3,\"62\":1}}],[\"seconds=10\",{\"1\":{\"75\":1}}],[\"seconds=5\",{\"1\":{\"75\":2}}],[\"seconds=2\",{\"1\":{\"62\":1}}],[\"seconds\",{\"1\":{\"19\":1,\"29\":1,\"59\":1,\"65\":2,\"66\":4,\"71\":1,\"74\":1}}],[\"section\",{\"1\":{\"7\":1,\"8\":1,\"50\":1,\"60\":1,\"65\":1,\"66\":1,\"71\":1}}],[\"separate\",{\"1\":{\"12\":1,\"21\":1,\"65\":1}}],[\"several\",{\"1\":{\"3\":1,\"16\":1,\"29\":1,\"37\":1,\"75\":1}}],[\"sets\",{\"1\":{\"92\":1}}],[\"setup\",{\"0\":{\"89\":1},\"1\":{\"36\":1}}],[\"settings\",{\"1\":{\"5\":1}}],[\"setting\",{\"0\":{\"4\":1},\"1\":{\"36\":1}}],[\"set\",{\"1\":{\"1\":1,\"27\":1,\"28\":2,\"32\":2,\"59\":2,\"61\":1,\"62\":1,\"65\":1,\"89\":2}}],[\"s\",{\"1\":{\"1\":2,\"10\":1,\"11\":1,\"29\":3,\"30\":1,\"31\":1,\"32\":3,\"33\":4,\"34\":1,\"35\":1,\"36\":4,\"37\":1,\"38\":4,\"39\":2,\"40\":3,\"41\":1,\"44\":1,\"45\":1,\"48\":1,\"50\":2,\"52\":2,\"55\":2,\"58\":1,\"59\":1,\"61\":1,\"62\":2,\"65\":5,\"66\":4,\"71\":4,\"72\":2,\"73\":2,\"75\":6,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":4,\"87\":1,\"90\":2,\"91\":3,\"92\":8}}],[\"tzinfo\",{\"1\":{\"75\":1}}],[\"t201\",{\"1\":{\"75\":1}}],[\"tp\",{\"1\":{\"55\":1,\"61\":1}}],[\"tkq\",{\"1\":{\"36\":1}}],[\"transaction\",{\"1\":{\"83\":1}}],[\"treated\",{\"1\":{\"80\":1}}],[\"try\",{\"1\":{\"34\":1,\"40\":1,\"45\":1,\"51\":1,\"62\":3,\"78\":1,\"92\":1}}],[\"true\",{\"1\":{\"11\":1,\"27\":1,\"32\":1,\"71\":1,\"90\":1}}],[\"till\",{\"1\":{\"62\":1}}],[\"tip\",{\"1\":{\"32\":1,\"45\":1,\"64\":1,\"71\":1,\"77\":1}}],[\"timeoutexception\",{\"1\":{\"67\":1}}],[\"timeouts\",{\"0\":{\"67\":1},\"1\":{\"67\":1}}],[\"timeout=2\",{\"1\":{\"65\":1,\"66\":2}}],[\"timeout\",{\"1\":{\"59\":1,\"67\":1}}],[\"timezones\",{\"0\":{\"73\":1}}],[\"timezone\",{\"1\":{\"24\":1,\"73\":2}}],[\"timedelta\",{\"1\":{\"24\":1,\"62\":1,\"71\":1,\"73\":1,\"75\":3}}],[\"times\",{\"1\":{\"10\":1,\"17\":1,\"55\":1,\"61\":1,\"71\":1,\"80\":1}}],[\"time\",{\"1\":{\"3\":2,\"19\":1,\"24\":5,\"47\":1,\"58\":1,\"59\":1,\"62\":3,\"65\":1,\"66\":3,\"67\":1,\"71\":1,\"72\":1,\"73\":3,\"75\":4,\"87\":1}}],[\"typos\",{\"1\":{\"79\":1}}],[\"typing\",{\"1\":{\"27\":1,\"30\":1,\"32\":1,\"33\":1,\"40\":1}}],[\"types\",{\"1\":{\"36\":2,\"38\":1,\"40\":2,\"56\":1,\"57\":1,\"65\":1,\"79\":1}}],[\"typevar\",{\"1\":{\"32\":2}}],[\"typer\",{\"1\":{\"30\":1}}],[\"type\",{\"0\":{\"57\":1},\"1\":{\"10\":1,\"24\":6,\"27\":1,\"32\":2,\"49\":1,\"56\":2,\"57\":3,\"59\":2,\"70\":1,\"79\":1,\"81\":1,\"84\":1}}],[\"tell\",{\"1\":{\"89\":1}}],[\"telegram\",{\"1\":{\"36\":1}}],[\"teardown\",{\"1\":{\"82\":1}}],[\"terms\",{\"1\":{\"73\":1}}],[\"terminal\",{\"1\":{\"50\":1,\"65\":1}}],[\"template\",{\"1\":{\"27\":1}}],[\"testclient\",{\"1\":{\"39\":2}}],[\"test=\",{\"1\":{\"30\":1}}],[\"testings\",{\"1\":{\"6\":1}}],[\"testing\",{\"0\":{\"6\":1,\"39\":1,\"41\":1,\"87\":1,\"91\":1},\"1\":{\"41\":2,\"89\":2,\"90\":1}}],[\"test\",{\"1\":{\"3\":1,\"6\":1,\"17\":1,\"30\":9,\"39\":4,\"41\":1,\"50\":5,\"91\":5,\"92\":6}}],[\"testserver\",{\"1\":{\"39\":2}}],[\"tests\",{\"0\":{\"90\":1},\"1\":{\"3\":1,\"6\":1,\"39\":2,\"41\":2,\"87\":2,\"89\":1,\"91\":1,\"92\":2}}],[\"two\",{\"1\":{\"27\":1,\"34\":1,\"38\":1,\"40\":2,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"55\":1,\"72\":1,\"85\":1}}],[\"takskiq\",{\"1\":{\"84\":1}}],[\"take\",{\"1\":{\"38\":2,\"50\":1,\"51\":1,\"69\":1,\"70\":1}}],[\"takes\",{\"1\":{\"3\":1,\"27\":1,\"28\":1,\"38\":1,\"40\":1}}],[\"tab\",{\"1\":{\"79\":1}}],[\"table\",{\"1\":{\"44\":1}}],[\"target\",{\"1\":{\"57\":1}}],[\"tasks\",{\"0\":{\"11\":1,\"65\":1,\"71\":1,\"91\":1},\"1\":{\"1\":1,\"9\":2,\"10\":1,\"11\":4,\"22\":1,\"24\":1,\"29\":1,\"31\":1,\"33\":3,\"35\":2,\"36\":2,\"38\":1,\"40\":2,\"41\":1,\"43\":1,\"44\":1,\"48\":1,\"50\":7,\"54\":1,\"55\":5,\"57\":1,\"58\":1,\"59\":3,\"60\":1,\"61\":4,\"62\":5,\"65\":2,\"66\":1,\"71\":3,\"72\":2,\"73\":1,\"74\":3,\"75\":2,\"79\":1,\"83\":1,\"87\":1,\"90\":1,\"91\":1,\"92\":2}}],[\"taskiqevents\",{\"1\":{\"79\":1}}],[\"taskiqdependency\",{\"1\":{\"81\":1}}],[\"taskiqdependencies\",{\"1\":{\"78\":1}}],[\"taskiqdepends\",{\"1\":{\"36\":2,\"40\":4,\"80\":1}}],[\"taskiqstate\",{\"1\":{\"77\":1,\"79\":1,\"85\":2}}],[\"taskiqserializer\",{\"1\":{\"68\":1,\"69\":1}}],[\"taskiqscheduler\",{\"1\":{\"23\":2,\"24\":2,\"62\":2,\"71\":3,\"72\":1,\"75\":2}}],[\"taskiqformatter\",{\"1\":{\"68\":1,\"70\":1}}],[\"taskiqtask\",{\"1\":{\"65\":1}}],[\"taskiqmessage\",{\"1\":{\"51\":4}}],[\"taskiqmiddleware\",{\"1\":{\"31\":1,\"51\":3}}],[\"taskiqresult\",{\"1\":{\"32\":3,\"49\":1}}],[\"taskiqcmd\",{\"1\":{\"30\":3}}],[\"taskiq\",{\"0\":{\"1\":1,\"25\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"40\":1,\"43\":1,\"68\":1,\"87\":1},\"1\":{\"1\":1,\"2\":2,\"3\":1,\"4\":1,\"7\":1,\"10\":2,\"11\":1,\"12\":1,\"13\":2,\"14\":2,\"15\":2,\"16\":1,\"17\":1,\"18\":2,\"21\":3,\"23\":3,\"24\":2,\"25\":2,\"27\":2,\"28\":1,\"30\":6,\"31\":3,\"32\":3,\"33\":2,\"34\":2,\"35\":10,\"36\":16,\"38\":4,\"39\":3,\"40\":9,\"41\":3,\"43\":5,\"44\":2,\"45\":1,\"46\":2,\"47\":1,\"49\":2,\"50\":7,\"51\":4,\"53\":4,\"54\":1,\"55\":1,\"56\":2,\"57\":2,\"58\":3,\"60\":2,\"62\":10,\"64\":4,\"65\":4,\"66\":15,\"68\":1,\"69\":4,\"70\":1,\"71\":7,\"72\":1,\"73\":1,\"74\":2,\"75\":2,\"77\":1,\"78\":1,\"83\":1,\"84\":1,\"85\":3,\"86\":2,\"87\":1,\"90\":2,\"91\":2,\"92\":5}}],[\"task\",{\"0\":{\"0\":1},\"1\":{\"1\":1,\"11\":4,\"17\":5,\"24\":9,\"29\":1,\"31\":1,\"32\":10,\"33\":10,\"36\":9,\"38\":1,\"40\":2,\"44\":2,\"46\":1,\"47\":12,\"48\":15,\"50\":1,\"51\":2,\"52\":4,\"55\":1,\"56\":3,\"57\":3,\"59\":1,\"61\":1,\"62\":51,\"65\":9,\"66\":15,\"67\":3,\"70\":1,\"71\":7,\"72\":2,\"73\":2,\"74\":1,\"75\":9,\"80\":1,\"81\":1,\"82\":3,\"91\":8,\"92\":6}}],[\"thrown\",{\"1\":{\"59\":1}}],[\"throw\",{\"1\":{\"57\":1}}],[\"throughout\",{\"1\":{\"62\":1}}],[\"through\",{\"1\":{\"52\":1}}],[\"three\",{\"1\":{\"36\":1,\"56\":1}}],[\"threads\",{\"1\":{\"59\":2}}],[\"threadpool\",{\"1\":{\"59\":1}}],[\"thread\",{\"1\":{\"9\":1}}],[\"than\",{\"1\":{\"35\":1,\"65\":1,\"69\":1,\"71\":1}}],[\"that\",{\"1\":{\"3\":1,\"6\":1,\"17\":2,\"18\":1,\"28\":1,\"30\":3,\"33\":3,\"34\":1,\"35\":2,\"36\":4,\"38\":2,\"39\":1,\"40\":4,\"41\":1,\"43\":1,\"44\":2,\"46\":1,\"47\":1,\"48\":1,\"50\":1,\"51\":1,\"52\":2,\"55\":1,\"57\":1,\"58\":1,\"64\":1,\"65\":3,\"66\":4,\"70\":1,\"71\":3,\"72\":1,\"73\":3,\"74\":1,\"75\":5,\"78\":1,\"79\":1,\"83\":1,\"84\":1,\"89\":2,\"91\":2,\"92\":3}}],[\"think\",{\"1\":{\"92\":1}}],[\"things\",{\"1\":{\"34\":1,\"40\":1,\"46\":1,\"80\":1}}],[\"thing\",{\"1\":{\"6\":1,\"41\":1}}],[\"this\",{\"1\":{\"3\":1,\"4\":2,\"7\":1,\"8\":1,\"9\":2,\"10\":4,\"11\":4,\"17\":2,\"18\":1,\"19\":1,\"20\":2,\"21\":2,\"23\":2,\"24\":3,\"27\":1,\"29\":2,\"30\":2,\"32\":1,\"33\":9,\"35\":1,\"36\":10,\"37\":1,\"38\":8,\"39\":3,\"40\":5,\"41\":4,\"44\":1,\"45\":1,\"47\":3,\"48\":2,\"50\":2,\"51\":1,\"52\":3,\"54\":1,\"55\":2,\"56\":1,\"57\":2,\"58\":5,\"59\":2,\"61\":3,\"62\":5,\"65\":4,\"66\":3,\"67\":1,\"68\":1,\"71\":3,\"72\":1,\"73\":1,\"74\":4,\"75\":3,\"77\":4,\"78\":1,\"79\":4,\"80\":7,\"81\":1,\"82\":3,\"83\":2,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":5}}],[\"therefore\",{\"1\":{\"79\":1}}],[\"there\",{\"1\":{\"40\":1}}],[\"their\",{\"1\":{\"40\":1,\"62\":1}}],[\"then\",{\"1\":{\"39\":1,\"74\":1}}],[\"they\",{\"1\":{\"18\":1,\"35\":1,\"51\":1,\"74\":2,\"81\":1}}],[\"theme\",{\"1\":{\"45\":2}}],[\"them\",{\"1\":{\"12\":1,\"27\":1,\"29\":2,\"37\":1,\"48\":1,\"62\":3,\"71\":1,\"72\":2,\"87\":1}}],[\"these\",{\"1\":{\"11\":1,\"12\":2,\"22\":1,\"25\":1,\"29\":1,\"35\":1,\"40\":1,\"73\":1,\"75\":2,\"77\":1}}],[\"the\",{\"1\":{\"1\":1,\"3\":2,\"4\":2,\"6\":1,\"7\":1,\"9\":2,\"10\":4,\"12\":1,\"17\":3,\"21\":1,\"24\":9,\"25\":1,\"27\":7,\"28\":2,\"29\":6,\"30\":6,\"31\":2,\"32\":2,\"33\":3,\"35\":3,\"36\":15,\"37\":4,\"38\":10,\"39\":3,\"40\":6,\"43\":4,\"44\":1,\"45\":4,\"46\":10,\"47\":3,\"49\":1,\"50\":5,\"51\":14,\"52\":6,\"54\":1,\"55\":1,\"56\":5,\"57\":5,\"58\":1,\"59\":1,\"61\":2,\"62\":23,\"64\":4,\"65\":22,\"66\":25,\"67\":2,\"68\":2,\"69\":8,\"70\":5,\"71\":8,\"72\":4,\"73\":4,\"74\":8,\"75\":13,\"77\":9,\"78\":2,\"79\":9,\"80\":14,\"81\":4,\"82\":3,\"83\":1,\"86\":2,\"89\":1,\"90\":6,\"92\":4}}],[\"top\",{\"1\":{\"44\":1}}],[\"took\",{\"1\":{\"65\":2,\"66\":4}}],[\"too\",{\"1\":{\"40\":1,\"81\":1}}],[\"tool\",{\"1\":{\"30\":1}}],[\"token\",{\"1\":{\"36\":1}}],[\"token=\",{\"1\":{\"36\":1}}],[\"total\",{\"1\":{\"10\":1,\"71\":1}}],[\"tox\",{\"1\":{\"6\":4}}],[\"together\",{\"1\":{\"3\":1,\"72\":1}}],[\"to\",{\"1\":{\"1\":1,\"3\":2,\"4\":2,\"5\":1,\"6\":5,\"9\":1,\"10\":2,\"11\":4,\"16\":1,\"17\":5,\"18\":2,\"19\":1,\"22\":1,\"23\":3,\"24\":8,\"25\":1,\"27\":6,\"28\":1,\"30\":7,\"31\":4,\"32\":7,\"33\":17,\"34\":4,\"35\":5,\"36\":13,\"37\":5,\"38\":6,\"39\":5,\"40\":9,\"41\":2,\"43\":7,\"44\":1,\"45\":2,\"46\":3,\"47\":5,\"48\":3,\"49\":1,\"50\":11,\"51\":3,\"52\":5,\"53\":2,\"54\":3,\"55\":1,\"57\":4,\"58\":5,\"59\":5,\"60\":4,\"61\":3,\"62\":14,\"64\":1,\"65\":11,\"66\":11,\"67\":4,\"68\":1,\"69\":6,\"70\":6,\"71\":9,\"72\":8,\"73\":4,\"74\":2,\"75\":13,\"77\":4,\"78\":2,\"79\":1,\"80\":5,\"82\":3,\"83\":6,\"84\":1,\"86\":4,\"87\":3,\"89\":3,\"90\":3,\"91\":2,\"92\":8}}],[\"t\",{\"1\":{\"1\":2,\"20\":2,\"24\":1,\"28\":1,\"29\":1,\"38\":1,\"39\":1,\"41\":1,\"43\":1,\"44\":1,\"47\":1,\"49\":1,\"51\":1,\"57\":1,\"58\":1,\"59\":1,\"62\":2,\"65\":2,\"66\":1,\"68\":1,\"71\":1,\"75\":1,\"78\":1,\"79\":2,\"80\":2,\"81\":1,\"83\":1,\"89\":1,\"90\":1,\"92\":1}}],[\"cwd\",{\"1\":{\"92\":2}}],[\"cbor\",{\"1\":{\"69\":1}}],[\"cborserializer\",{\"1\":{\"69\":1}}],[\"cmd\",{\"1\":{\"30\":2}}],[\"changing\",{\"1\":{\"51\":1}}],[\"changed\",{\"1\":{\"68\":1}}],[\"change\",{\"1\":{\"47\":2,\"50\":1,\"66\":1}}],[\"channel\",{\"1\":{\"28\":1,\"46\":1}}],[\"chat\",{\"1\":{\"36\":3}}],[\"check\",{\"1\":{\"32\":2,\"36\":1,\"65\":1,\"71\":1,\"73\":1,\"74\":1}}],[\"choose\",{\"1\":{\"10\":1}}],[\"creation\",{\"1\":{\"62\":2}}],[\"creating\",{\"1\":{\"39\":1,\"43\":1,\"68\":1}}],[\"creates\",{\"1\":{\"39\":1,\"46\":1}}],[\"createdschedule\",{\"1\":{\"75\":1}}],[\"created\",{\"1\":{\"30\":1,\"37\":2,\"38\":1,\"40\":1,\"44\":1,\"62\":2}}],[\"create\",{\"1\":{\"3\":2,\"11\":1,\"32\":1,\"33\":1,\"36\":1,\"37\":1,\"39\":1,\"62\":6,\"65\":1,\"79\":1,\"84\":1}}],[\"critical\",{\"1\":{\"32\":1,\"46\":1}}],[\"cron=\",{\"1\":{\"33\":1}}],[\"crontab\",{\"1\":{\"24\":1}}],[\"cron\",{\"1\":{\"24\":7,\"62\":1,\"71\":1,\"73\":3,\"75\":3}}],[\"custom\",{\"0\":{\"12\":1},\"1\":{\"39\":1,\"41\":2,\"44\":1,\"48\":1,\"59\":2,\"61\":1,\"72\":1,\"92\":2}}],[\"currently\",{\"1\":{\"22\":1,\"72\":1,\"75\":1,\"89\":1}}],[\"current\",{\"1\":{\"9\":1,\"22\":1,\"31\":1,\"32\":1,\"36\":1,\"37\":1,\"38\":3,\"39\":1,\"50\":1,\"52\":1,\"55\":2,\"61\":1,\"62\":3,\"79\":1}}],[\"came\",{\"1\":{\"92\":1}}],[\"cached\",{\"1\":{\"80\":2}}],[\"cache\",{\"1\":{\"80\":1}}],[\"cache=false\",{\"1\":{\"80\":1}}],[\"case\",{\"1\":{\"74\":1,\"75\":1,\"83\":1}}],[\"cases\",{\"1\":{\"20\":1,\"43\":1,\"51\":1}}],[\"cast\",{\"1\":{\"57\":2}}],[\"casts\",{\"0\":{\"57\":1},\"1\":{\"57\":1}}],[\"caught\",{\"1\":{\"51\":1}}],[\"calculate\",{\"1\":{\"43\":1}}],[\"calling\",{\"1\":{\"52\":1,\"65\":1,\"67\":1,\"75\":1,\"92\":1}}],[\"called\",{\"1\":{\"40\":1,\"53\":1,\"73\":1,\"77\":2,\"86\":1,\"92\":2}}],[\"calls\",{\"1\":{\"36\":2}}],[\"call\",{\"1\":{\"27\":1,\"31\":1,\"36\":2,\"38\":1,\"39\":1,\"40\":2,\"46\":1,\"47\":1,\"57\":1,\"65\":5,\"66\":1,\"71\":1,\"75\":1,\"77\":1,\"91\":2}}],[\"capable\",{\"1\":{\"23\":1}}],[\"careful\",{\"1\":{\"10\":1,\"20\":1,\"71\":2}}],[\"cancelled\",{\"1\":{\"62\":2}}],[\"cancellederror\",{\"1\":{\"62\":3}}],[\"cancel\",{\"1\":{\"62\":3}}],[\"cancels\",{\"1\":{\"33\":1}}],[\"cancelation\",{\"1\":{\"33\":1}}],[\"cannot\",{\"1\":{\"11\":1,\"20\":1,\"40\":1,\"45\":1,\"49\":1,\"65\":1,\"79\":2,\"80\":1}}],[\"can\",{\"1\":{\"2\":1,\"4\":1,\"5\":1,\"6\":3,\"7\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"17\":1,\"18\":3,\"21\":2,\"24\":4,\"25\":2,\"27\":3,\"28\":2,\"30\":4,\"31\":2,\"32\":1,\"33\":1,\"35\":4,\"36\":4,\"37\":1,\"38\":5,\"40\":2,\"43\":3,\"44\":1,\"47\":1,\"48\":3,\"49\":1,\"50\":4,\"51\":6,\"52\":2,\"53\":1,\"55\":1,\"56\":1,\"62\":4,\"64\":2,\"65\":4,\"66\":5,\"67\":1,\"68\":2,\"69\":1,\"70\":3,\"71\":3,\"72\":3,\"73\":2,\"74\":1,\"75\":6,\"77\":6,\"78\":2,\"79\":4,\"80\":2,\"81\":5,\"82\":1,\"83\":2,\"84\":1,\"86\":2,\"89\":3,\"90\":1,\"91\":1,\"92\":4}}],[\"clear\",{\"1\":{\"92\":1}}],[\"close\",{\"1\":{\"39\":1}}],[\"closure\",{\"1\":{\"28\":1}}],[\"closing\",{\"1\":{\"27\":1}}],[\"cloned\",{\"1\":{\"4\":1}}],[\"class\",{\"0\":{\"81\":1},\"1\":{\"27\":4,\"30\":5,\"31\":1,\"32\":2,\"33\":2,\"46\":2,\"47\":1,\"51\":1,\"52\":1,\"59\":1,\"68\":2,\"69\":1,\"70\":1,\"73\":1,\"75\":1,\"81\":1,\"84\":2}}],[\"classes\",{\"1\":{\"25\":3,\"40\":1,\"78\":1,\"81\":3}}],[\"clien\",{\"1\":{\"36\":1}}],[\"client\",{\"1\":{\"10\":1,\"18\":1,\"39\":9,\"45\":1,\"51\":1,\"77\":3}}],[\"click\",{\"1\":{\"30\":1}}],[\"cli\",{\"0\":{\"30\":1,\"53\":1},\"1\":{\"24\":1,\"30\":2,\"43\":1,\"50\":1,\"53\":1,\"58\":1,\"65\":1,\"66\":2}}],[\"covered\",{\"1\":{\"73\":1}}],[\"coroutine\",{\"1\":{\"62\":1}}],[\"correct\",{\"1\":{\"38\":1,\"49\":1,\"66\":2,\"70\":1,\"87\":1,\"89\":1}}],[\"correctly\",{\"1\":{\"24\":1,\"48\":1}}],[\"core\",{\"1\":{\"12\":1,\"21\":1,\"25\":1,\"43\":1,\"53\":1,\"64\":1}}],[\"cool\",{\"1\":{\"24\":1,\"27\":1,\"32\":1,\"40\":2,\"45\":1,\"50\":1,\"64\":1,\"65\":1,\"67\":1,\"71\":1,\"75\":1,\"77\":1}}],[\"couldn\",{\"1\":{\"44\":1}}],[\"course\",{\"1\":{\"18\":1,\"71\":1,\"79\":1}}],[\"count=3\",{\"1\":{\"17\":1}}],[\"code\",{\"1\":{\"16\":1,\"31\":1,\"62\":1,\"65\":2,\"66\":2,\"77\":2,\"78\":1,\"79\":1,\"80\":1,\"92\":1}}],[\"component\",{\"1\":{\"45\":1}}],[\"components\",{\"0\":{\"7\":1}}],[\"comparison\",{\"1\":{\"44\":1}}],[\"compatible\",{\"1\":{\"27\":1}}],[\"completion\",{\"1\":{\"78\":1,\"79\":3}}],[\"completed\",{\"1\":{\"36\":1,\"82\":1,\"83\":1}}],[\"complete\",{\"1\":{\"36\":1,\"38\":1,\"51\":1,\"66\":2}}],[\"completely\",{\"1\":{\"33\":1}}],[\"complex\",{\"1\":{\"35\":1,\"62\":1,\"72\":1}}],[\"comes\",{\"1\":{\"25\":1,\"53\":1}}],[\"common\",{\"1\":{\"80\":3}}],[\"communication\",{\"1\":{\"35\":1,\"43\":1}}],[\"communicate\",{\"1\":{\"10\":1,\"35\":1}}],[\"commit\",{\"1\":{\"5\":3,\"83\":1}}],[\"commands\",{\"1\":{\"53\":2}}],[\"command\",{\"1\":{\"4\":2,\"5\":1,\"6\":2,\"30\":1,\"36\":3,\"46\":1,\"50\":1,\"62\":2,\"66\":2,\"71\":2,\"74\":1,\"83\":1}}],[\"convert\",{\"1\":{\"82\":1}}],[\"conventions\",{\"0\":{\"29\":1},\"1\":{\"29\":1}}],[\"convinient\",{\"1\":{\"73\":1,\"74\":1}}],[\"conftest\",{\"1\":{\"90\":1}}],[\"conflicts\",{\"1\":{\"72\":1}}],[\"configuration\",{\"1\":{\"59\":1}}],[\"configures\",{\"1\":{\"61\":1}}],[\"configure\",{\"1\":{\"59\":1,\"61\":1}}],[\"configured\",{\"1\":{\"5\":1,\"18\":1,\"56\":1}}],[\"constructor\",{\"1\":{\"81\":1}}],[\"constraint\",{\"1\":{\"67\":1}}],[\"consumers\",{\"1\":{\"35\":1}}],[\"considers\",{\"1\":{\"24\":1}}],[\"consider\",{\"1\":{\"1\":1,\"44\":1}}],[\"connectionpool\",{\"1\":{\"79\":1}}],[\"connections\",{\"1\":{\"27\":1}}],[\"connection\",{\"1\":{\"27\":1,\"40\":1,\"77\":1,\"79\":2,\"90\":1}}],[\"continue\",{\"1\":{\"66\":1}}],[\"control\",{\"1\":{\"52\":1,\"80\":1}}],[\"contributors\",{\"1\":{\"3\":2}}],[\"contributions\",{\"1\":{\"3\":1}}],[\"contribution\",{\"0\":{\"3\":1}}],[\"contexts\",{\"1\":{\"52\":1}}],[\"context\",{\"0\":{\"52\":1},\"1\":{\"37\":1,\"39\":6,\"41\":4,\"52\":4,\"77\":1,\"78\":1,\"79\":2,\"85\":3,\"86\":1,\"92\":5}}],[\"contents\",{\"0\":{\"26\":1}}],[\"ci\",{\"1\":{\"3\":2}}],[\"celery\",{\"1\":{\"1\":1,\"35\":1,\"44\":1,\"70\":1}}],[\"avoid\",{\"1\":{\"74\":1}}],[\"available\",{\"0\":{\"7\":1,\"8\":1,\"16\":1,\"19\":1,\"22\":1},\"1\":{\"18\":1,\"32\":1,\"37\":1,\"65\":1,\"71\":1,\"75\":1,\"86\":1}}],[\"ago\",{\"1\":{\"74\":1}}],[\"again\",{\"1\":{\"66\":1}}],[\"against\",{\"1\":{\"4\":1,\"6\":1}}],[\"amqp\",{\"1\":{\"66\":4,\"71\":2}}],[\"amount\",{\"1\":{\"59\":1,\"67\":1,\"79\":1}}],[\"api\",{\"1\":{\"62\":2}}],[\"app=app\",{\"1\":{\"39\":1}}],[\"append\",{\"1\":{\"37\":1}}],[\"application\",{\"1\":{\"37\":2,\"38\":8,\"39\":4,\"40\":2,\"41\":2,\"61\":1,\"62\":1,\"86\":1}}],[\"applications\",{\"1\":{\"37\":1}}],[\"app\",{\"1\":{\"35\":1,\"37\":4,\"38\":1,\"39\":3,\"40\":7,\"41\":4,\"92\":1}}],[\"approved\",{\"1\":{\"3\":1}}],[\"autocompleted\",{\"1\":{\"79\":2}}],[\"autocompletion\",{\"1\":{\"79\":1}}],[\"autocompetion\",{\"1\":{\"78\":1}}],[\"automatic\",{\"1\":{\"57\":1}}],[\"automatically\",{\"1\":{\"41\":1,\"50\":2,\"92\":1}}],[\"auto\",{\"0\":{\"55\":1},\"1\":{\"55\":1,\"79\":3}}],[\"autouse\",{\"1\":{\"41\":1,\"92\":1}}],[\"autouse=true\",{\"1\":{\"41\":1,\"92\":1}}],[\"adopt\",{\"1\":{\"43\":1}}],[\"advice\",{\"1\":{\"41\":1}}],[\"adaptive\",{\"1\":{\"34\":1}}],[\"adds\",{\"1\":{\"36\":1,\"38\":1,\"72\":2}}],[\"added\",{\"1\":{\"33\":1,\"72\":1,\"90\":1,\"92\":1}}],[\"addition\",{\"1\":{\"75\":1}}],[\"additional\",{\"1\":{\"24\":1,\"47\":1,\"52\":1,\"73\":1,\"75\":1}}],[\"adding\",{\"0\":{\"38\":1,\"86\":1},\"1\":{\"18\":1,\"23\":1,\"51\":1,\"77\":1}}],[\"addr=\",{\"1\":{\"18\":1}}],[\"add\",{\"1\":{\"3\":1,\"11\":1,\"17\":2,\"24\":1,\"27\":1,\"30\":4,\"33\":1,\"34\":2,\"36\":1,\"37\":2,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"47\":1,\"48\":2,\"50\":1,\"53\":1,\"62\":1,\"65\":4,\"66\":6,\"67\":1,\"71\":1,\"75\":3,\"77\":2,\"79\":1,\"83\":1,\"86\":4,\"91\":3,\"92\":3}}],[\"aaa\",{\"1\":{\"30\":2}}],[\"aaaaa\",{\"1\":{\"17\":1}}],[\"await\",{\"1\":{\"27\":2,\"36\":6,\"39\":2,\"40\":2,\"47\":3,\"48\":5,\"51\":1,\"62\":14,\"65\":4,\"66\":9,\"71\":2,\"75\":7,\"91\":4,\"92\":3}}],[\"achieve\",{\"1\":{\"87\":1}}],[\"achieved\",{\"1\":{\"77\":1}}],[\"according\",{\"1\":{\"71\":1}}],[\"access\",{\"1\":{\"36\":1,\"77\":1,\"79\":1}}],[\"actively\",{\"1\":{\"44\":1}}],[\"actions\",{\"1\":{\"33\":2,\"36\":1,\"51\":1}}],[\"actually\",{\"1\":{\"90\":1}}],[\"actual\",{\"1\":{\"20\":1,\"89\":1,\"90\":1}}],[\"acknowledge\",{\"1\":{\"59\":1}}],[\"acknowledged\",{\"1\":{\"56\":3}}],[\"acknowledgements\",{\"0\":{\"56\":1},\"1\":{\"56\":1,\"59\":1}}],[\"acknowledgement\",{\"0\":{\"28\":1},\"1\":{\"59\":1}}],[\"ack=message\",{\"1\":{\"28\":1}}],[\"ack\",{\"1\":{\"28\":2,\"56\":2,\"59\":1}}],[\"acking\",{\"1\":{\"28\":1}}],[\"ackablemessage\",{\"1\":{\"27\":2,\"28\":3}}],[\"atomic\",{\"1\":{\"83\":1}}],[\"attempts\",{\"1\":{\"51\":1}}],[\"at\",{\"1\":{\"18\":1,\"30\":1,\"38\":1,\"50\":1,\"65\":1,\"66\":2,\"69\":1,\"70\":1,\"71\":2,\"77\":2,\"82\":2}}],[\"aiopika\",{\"1\":{\"66\":1}}],[\"aiopikabroker\",{\"0\":{\"13\":1},\"1\":{\"66\":7,\"71\":4}}],[\"aiotasks\",{\"1\":{\"44\":1}}],[\"aiohttp\",{\"0\":{\"37\":1},\"1\":{\"37\":8,\"38\":8,\"39\":4}}],[\"aiogram\",{\"0\":{\"36\":1},\"1\":{\"36\":14}}],[\"aio\",{\"1\":{\"13\":2,\"64\":1,\"66\":6,\"71\":2}}],[\"article\",{\"1\":{\"62\":1}}],[\"articles\",{\"1\":{\"41\":1}}],[\"arq\",{\"1\":{\"44\":1}}],[\"arg2=\",{\"1\":{\"75\":4}}],[\"arg2\",{\"1\":{\"75\":6}}],[\"arg1\",{\"1\":{\"75\":2}}],[\"arg\",{\"1\":{\"59\":1}}],[\"argument\",{\"1\":{\"30\":1,\"38\":1,\"61\":1}}],[\"argumentparser\",{\"1\":{\"30\":2}}],[\"arguments\",{\"1\":{\"24\":1,\"30\":3,\"38\":1,\"47\":1,\"92\":2}}],[\"argparse\",{\"1\":{\"30\":1}}],[\"args=\",{\"1\":{\"33\":1}}],[\"args\",{\"1\":{\"24\":3,\"30\":4,\"36\":2,\"59\":1,\"62\":1,\"71\":1,\"75\":1}}],[\"architecture\",{\"0\":{\"45\":1},\"1\":{\"10\":1}}],[\"are\",{\"0\":{\"79\":1},\"1\":{\"9\":1,\"10\":1,\"12\":1,\"19\":1,\"22\":1,\"27\":1,\"29\":2,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"45\":2,\"46\":1,\"48\":1,\"51\":3,\"59\":1,\"66\":1,\"77\":2,\"80\":2,\"82\":1,\"90\":1}}],[\"ability\",{\"1\":{\"44\":1,\"52\":1,\"86\":1}}],[\"abilities\",{\"1\":{\"12\":1,\"21\":1}}],[\"abc\",{\"1\":{\"25\":1,\"27\":1,\"30\":2,\"31\":1,\"32\":2,\"33\":1,\"46\":1,\"49\":1,\"51\":2}}],[\"abstractions\",{\"1\":{\"43\":1}}],[\"abstract\",{\"1\":{\"25\":3,\"27\":1,\"30\":1,\"31\":1,\"33\":1,\"46\":1}}],[\"abort\",{\"1\":{\"44\":1}}],[\"about\",{\"1\":{\"12\":1,\"21\":1,\"30\":1,\"32\":1,\"35\":1,\"37\":1,\"41\":1,\"50\":1,\"62\":1,\"65\":2,\"66\":2}}],[\"above\",{\"1\":{\"6\":1,\"79\":1}}],[\"able\",{\"1\":{\"1\":1,\"33\":3,\"38\":2,\"52\":1,\"62\":1,\"84\":1}}],[\"after\",{\"1\":{\"4\":2,\"17\":1,\"18\":1,\"30\":1,\"31\":1,\"33\":1,\"36\":1,\"37\":1,\"38\":1,\"41\":1,\"51\":6,\"56\":1,\"61\":1,\"62\":2,\"64\":1,\"66\":3,\"79\":1,\"82\":2,\"90\":1,\"92\":1}}],[\"alert\",{\"1\":{\"67\":1}}],[\"although\",{\"1\":{\"35\":1}}],[\"alter\",{\"1\":{\"27\":1}}],[\"always\",{\"1\":{\"20\":1,\"31\":1,\"71\":1}}],[\"along\",{\"1\":{\"11\":1,\"27\":1,\"35\":1}}],[\"allows\",{\"1\":{\"17\":1,\"35\":2,\"36\":1,\"38\":1,\"57\":1,\"62\":1,\"87\":1}}],[\"allow\",{\"1\":{\"16\":1}}],[\"all\",{\"1\":{\"3\":1,\"4\":2,\"5\":2,\"9\":1,\"10\":2,\"11\":1,\"24\":2,\"25\":1,\"30\":2,\"36\":1,\"37\":1,\"38\":2,\"45\":2,\"50\":2,\"51\":1,\"55\":2,\"61\":1,\"62\":1,\"66\":2,\"72\":2,\"74\":1,\"80\":1,\"92\":3}}],[\"also\",{\"1\":{\"1\":1,\"6\":1,\"11\":1,\"30\":2,\"31\":1,\"38\":1,\"39\":1,\"40\":1,\"48\":2,\"52\":2,\"58\":1,\"62\":2,\"65\":2,\"66\":1,\"69\":3,\"80\":2,\"81\":1}}],[\"almost\",{\"1\":{\"1\":1,\"35\":1}}],[\"annotations\",{\"1\":{\"84\":1}}],[\"annotate\",{\"1\":{\"40\":1}}],[\"annotated\",{\"1\":{\"40\":1,\"79\":1}}],[\"annoying\",{\"1\":{\"58\":1}}],[\"another\",{\"1\":{\"41\":1,\"43\":1,\"84\":1,\"89\":1}}],[\"anywhere\",{\"1\":{\"91\":1}}],[\"anyio\",{\"1\":{\"90\":2,\"91\":2,\"92\":2}}],[\"anything\",{\"1\":{\"20\":1,\"49\":1,\"51\":1,\"75\":1}}],[\"any\",{\"1\":{\"1\":1,\"6\":1,\"20\":1,\"24\":3,\"38\":2,\"40\":2,\"44\":1,\"57\":1,\"65\":1,\"66\":1,\"68\":2,\"70\":1,\"79\":2,\"83\":1}}],[\"and\",{\"0\":{\"11\":1,\"76\":1},\"1\":{\"1\":2,\"3\":1,\"6\":1,\"10\":1,\"12\":1,\"20\":1,\"21\":1,\"24\":1,\"27\":2,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"34\":4,\"35\":4,\"36\":1,\"37\":2,\"38\":3,\"39\":1,\"40\":6,\"43\":3,\"44\":2,\"45\":3,\"46\":2,\"47\":2,\"48\":1,\"49\":3,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"57\":1,\"62\":5,\"64\":1,\"65\":4,\"66\":2,\"69\":3,\"70\":3,\"71\":2,\"72\":1,\"74\":2,\"75\":3,\"78\":1,\"79\":2,\"80\":2,\"81\":1,\"82\":2,\"83\":1,\"84\":1,\"86\":1,\"90\":2,\"91\":6,\"92\":1}}],[\"an\",{\"1\":{\"1\":1,\"3\":1,\"36\":1,\"38\":2,\"40\":1,\"46\":1,\"47\":1,\"50\":1,\"55\":1,\"62\":1,\"65\":2,\"66\":1,\"70\":1,\"73\":4,\"75\":3,\"77\":1,\"81\":1,\"82\":1,\"86\":1,\"89\":2,\"90\":3}}],[\"aside\",{\"1\":{\"72\":1}}],[\"assert\",{\"1\":{\"91\":2,\"92\":2}}],[\"assemble\",{\"1\":{\"72\":1}}],[\"assume\",{\"1\":{\"50\":1,\"79\":1}}],[\"assumes\",{\"1\":{\"6\":1,\"73\":1}}],[\"assign\",{\"1\":{\"48\":1,\"62\":1}}],[\"assigned\",{\"1\":{\"47\":1,\"75\":1}}],[\"asynchronous\",{\"1\":{\"82\":1}}],[\"asynchronously\",{\"1\":{\"82\":1}}],[\"asyncresultbackend\",{\"1\":{\"32\":3,\"49\":1}}],[\"asyncgenerator\",{\"1\":{\"27\":2,\"28\":1,\"39\":1}}],[\"asyncbroker\",{\"1\":{\"27\":3,\"46\":2,\"86\":1,\"90\":2}}],[\"async\",{\"0\":{\"11\":1,\"90\":1},\"1\":{\"11\":2,\"17\":1,\"24\":1,\"27\":4,\"28\":1,\"31\":1,\"32\":5,\"33\":7,\"35\":1,\"36\":5,\"38\":1,\"39\":1,\"40\":3,\"44\":1,\"47\":4,\"48\":10,\"51\":4,\"57\":1,\"59\":2,\"62\":3,\"65\":2,\"66\":4,\"71\":2,\"75\":1,\"79\":1,\"90\":2,\"91\":5,\"92\":3}}],[\"asyncio\",{\"0\":{\"0\":1},\"1\":{\"1\":1,\"36\":4,\"39\":1,\"44\":1,\"47\":3,\"48\":3,\"51\":2,\"62\":14,\"65\":2,\"66\":4,\"71\":1,\"90\":1}}],[\"ask\",{\"1\":{\"3\":1}}],[\"as\",{\"0\":{\"81\":1},\"1\":{\"1\":1,\"5\":1,\"12\":1,\"18\":1,\"21\":1,\"23\":1,\"24\":1,\"27\":3,\"29\":1,\"30\":1,\"31\":1,\"35\":2,\"38\":2,\"39\":3,\"40\":7,\"41\":1,\"50\":1,\"52\":1,\"57\":3,\"60\":1,\"62\":5,\"64\":2,\"66\":1,\"70\":2,\"71\":1,\"75\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":2,\"87\":1,\"90\":2,\"91\":2,\"92\":1}}],[\"a\",{\"0\":{\"1\":1,\"81\":1},\"1\":{\"1\":3,\"3\":2,\"5\":2,\"6\":1,\"7\":1,\"9\":1,\"11\":2,\"12\":1,\"17\":3,\"21\":1,\"23\":1,\"24\":1,\"27\":10,\"28\":4,\"30\":1,\"31\":2,\"32\":9,\"33\":6,\"35\":5,\"36\":3,\"37\":2,\"38\":5,\"39\":5,\"40\":7,\"41\":4,\"43\":2,\"44\":4,\"46\":2,\"47\":5,\"50\":5,\"51\":2,\"52\":4,\"55\":1,\"57\":1,\"59\":1,\"61\":2,\"62\":20,\"65\":6,\"66\":2,\"67\":2,\"69\":2,\"70\":7,\"71\":5,\"72\":2,\"73\":2,\"74\":2,\"75\":2,\"77\":3,\"79\":2,\"80\":2,\"83\":1,\"84\":1,\"86\":1,\"90\":1,\"91\":3,\"92\":4}}],[\"illustration\",{\"1\":{\"62\":1,\"92\":1}}],[\"imemory\",{\"1\":{\"90\":1}}],[\"immediately\",{\"1\":{\"61\":1}}],[\"imagine\",{\"1\":{\"41\":1,\"71\":1}}],[\"implements\",{\"1\":{\"29\":1,\"30\":1}}],[\"implement\",{\"1\":{\"25\":1,\"27\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":6,\"43\":1,\"46\":2,\"49\":1,\"51\":1,\"62\":2,\"69\":1,\"70\":1,\"71\":2}}],[\"implementations\",{\"1\":{\"69\":2}}],[\"implementation\",{\"1\":{\"1\":1,\"68\":1,\"69\":1,\"70\":1,\"78\":1}}],[\"importing\",{\"0\":{\"55\":1}}],[\"important\",{\"1\":{\"32\":1,\"39\":1,\"40\":1,\"41\":1,\"51\":1,\"65\":1}}],[\"import\",{\"1\":{\"11\":1,\"17\":1,\"18\":1,\"23\":2,\"24\":3,\"27\":2,\"30\":3,\"32\":3,\"33\":2,\"35\":3,\"36\":11,\"37\":2,\"38\":1,\"39\":1,\"40\":6,\"41\":1,\"47\":2,\"50\":2,\"51\":3,\"55\":1,\"60\":1,\"61\":1,\"62\":11,\"65\":3,\"66\":7,\"71\":5,\"75\":2,\"90\":2,\"91\":5,\"92\":6}}],[\"imported\",{\"1\":{\"11\":1}}],[\"i\",{\"1\":{\"36\":1,\"65\":1,\"66\":1,\"92\":1}}],[\"ide\",{\"1\":{\"79\":1}}],[\"idea\",{\"1\":{\"43\":1}}],[\"id\",{\"1\":{\"32\":10,\"33\":2,\"36\":3,\"47\":1,\"75\":3}}],[\"ignored\",{\"1\":{\"58\":1}}],[\"ignore\",{\"1\":{\"27\":1,\"30\":1,\"32\":2}}],[\"if\",{\"1\":{\"3\":1,\"4\":1,\"6\":2,\"10\":2,\"17\":1,\"18\":1,\"24\":1,\"27\":2,\"28\":2,\"29\":4,\"31\":1,\"32\":2,\"33\":1,\"35\":1,\"36\":5,\"39\":1,\"40\":4,\"41\":1,\"43\":1,\"44\":1,\"45\":1,\"50\":4,\"51\":2,\"57\":2,\"58\":1,\"59\":1,\"61\":1,\"62\":3,\"65\":5,\"66\":5,\"67\":1,\"69\":1,\"70\":1,\"71\":3,\"72\":2,\"73\":2,\"74\":3,\"75\":2,\"77\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":4,\"86\":1,\"87\":1,\"89\":1,\"90\":3,\"91\":2,\"92\":2}}],[\"itself\",{\"1\":{\"92\":1}}],[\"its\",{\"1\":{\"4\":1,\"35\":1,\"38\":1,\"40\":1,\"51\":1}}],[\"it\",{\"1\":{\"1\":5,\"3\":1,\"4\":2,\"5\":1,\"6\":3,\"9\":2,\"10\":2,\"11\":2,\"17\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":3,\"27\":2,\"28\":1,\"29\":2,\"30\":1,\"31\":1,\"32\":3,\"33\":4,\"35\":3,\"36\":3,\"37\":2,\"38\":4,\"39\":1,\"40\":5,\"41\":4,\"43\":2,\"45\":1,\"46\":2,\"47\":2,\"48\":2,\"49\":2,\"50\":2,\"51\":2,\"52\":3,\"55\":2,\"56\":2,\"57\":1,\"58\":1,\"60\":1,\"61\":2,\"62\":7,\"64\":1,\"65\":7,\"66\":1,\"67\":1,\"69\":3,\"70\":3,\"71\":4,\"72\":3,\"73\":2,\"74\":3,\"75\":4,\"78\":1,\"80\":1,\"81\":3,\"83\":1,\"90\":2,\"91\":5,\"92\":8}}],[\"indicates\",{\"1\":{\"89\":1}}],[\"input\",{\"1\":{\"57\":1}}],[\"inside\",{\"1\":{\"52\":1,\"62\":1}}],[\"instead\",{\"1\":{\"44\":1,\"62\":1,\"66\":1,\"75\":1}}],[\"instances\",{\"1\":{\"62\":1,\"71\":1}}],[\"instance\",{\"1\":{\"36\":3,\"47\":1,\"52\":1,\"71\":1,\"73\":1,\"75\":2}}],[\"installed\",{\"1\":{\"6\":1,\"50\":1}}],[\"install\",{\"1\":{\"2\":2,\"4\":7,\"5\":2,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"18\":2,\"21\":2,\"23\":1,\"35\":2,\"36\":2,\"37\":2,\"38\":2,\"50\":1,\"58\":1,\"64\":1,\"66\":3,\"69\":2,\"90\":1}}],[\"installation\",{\"0\":{\"2\":1,\"64\":1},\"1\":{\"5\":1,\"36\":1,\"37\":1,\"38\":1,\"64\":1,\"66\":2}}],[\"instructions\",{\"1\":{\"4\":1}}],[\"infinite\",{\"1\":{\"36\":1,\"46\":1}}],[\"info\",{\"1\":{\"32\":1,\"36\":3,\"50\":2,\"59\":1,\"61\":1,\"66\":1}}],[\"information\",{\"1\":{\"23\":1,\"27\":1,\"32\":2,\"51\":1,\"62\":1,\"65\":2,\"66\":1,\"73\":1}}],[\"injected\",{\"1\":{\"40\":2}}],[\"injection\",{\"0\":{\"92\":1},\"1\":{\"37\":2,\"39\":1,\"40\":2,\"44\":1,\"79\":1}}],[\"inject\",{\"1\":{\"31\":1}}],[\"incoming\",{\"1\":{\"30\":1,\"57\":1}}],[\"includes\",{\"1\":{\"19\":1}}],[\"into\",{\"1\":{\"87\":1}}],[\"introduce\",{\"1\":{\"71\":1}}],[\"introduction\",{\"0\":{\"42\":1}}],[\"integrate\",{\"1\":{\"78\":1}}],[\"integration\",{\"0\":{\"38\":1},\"1\":{\"35\":1,\"36\":5,\"38\":1,\"40\":1}}],[\"integrations\",{\"0\":{\"34\":1},\"1\":{\"34\":2}}],[\"intensive\",{\"1\":{\"36\":1}}],[\"interpreted\",{\"1\":{\"89\":1}}],[\"internals\",{\"1\":{\"66\":1}}],[\"internal\",{\"1\":{\"65\":1}}],[\"interservice\",{\"1\":{\"43\":1}}],[\"interact\",{\"1\":{\"33\":3}}],[\"interface\",{\"1\":{\"24\":1,\"50\":1,\"86\":1,\"90\":1}}],[\"int\",{\"1\":{\"29\":1,\"36\":1,\"57\":2,\"65\":2,\"66\":4,\"71\":4,\"75\":1,\"91\":10}}],[\"initially\",{\"1\":{\"47\":1}}],[\"initialize\",{\"1\":{\"36\":1,\"37\":1,\"77\":1}}],[\"initialization\",{\"1\":{\"36\":1,\"38\":1}}],[\"init\",{\"1\":{\"27\":2,\"36\":3,\"37\":1,\"38\":1,\"40\":2,\"41\":1,\"92\":1}}],[\"invoking\",{\"1\":{\"24\":3}}],[\"inmemory\",{\"1\":{\"41\":1,\"47\":1,\"90\":1}}],[\"inmemoryresultbackend\",{\"1\":{\"9\":1,\"49\":1}}],[\"inmemorybroker\",{\"0\":{\"9\":1},\"1\":{\"39\":2,\"41\":1,\"47\":3,\"49\":1,\"65\":6,\"66\":1,\"90\":2,\"91\":1}}],[\"in\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"3\":2,\"4\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"12\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":3,\"33\":2,\"34\":1,\"35\":1,\"36\":2,\"37\":2,\"38\":3,\"40\":11,\"41\":3,\"43\":2,\"45\":1,\"46\":2,\"48\":1,\"49\":1,\"50\":5,\"51\":4,\"55\":2,\"56\":1,\"58\":1,\"59\":2,\"60\":1,\"61\":1,\"62\":5,\"65\":5,\"66\":2,\"67\":1,\"70\":2,\"71\":1,\"72\":1,\"73\":2,\"74\":2,\"75\":4,\"77\":1,\"78\":1,\"79\":3,\"80\":2,\"81\":2,\"82\":1,\"83\":4,\"89\":1,\"90\":3,\"91\":1,\"92\":3}}],[\"isn\",{\"1\":{\"47\":1}}],[\"issue\",{\"1\":{\"3\":1,\"62\":1}}],[\"is\",{\"0\":{\"1\":1,\"43\":1},\"1\":{\"3\":1,\"4\":1,\"9\":1,\"10\":1,\"11\":1,\"17\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"27\":2,\"28\":1,\"30\":1,\"32\":6,\"33\":4,\"34\":1,\"35\":4,\"36\":7,\"37\":1,\"38\":4,\"39\":3,\"40\":4,\"41\":2,\"43\":2,\"46\":1,\"47\":3,\"48\":1,\"49\":1,\"50\":1,\"51\":3,\"52\":1,\"53\":2,\"55\":2,\"56\":6,\"57\":2,\"58\":2,\"59\":4,\"60\":1,\"61\":3,\"62\":8,\"65\":4,\"66\":5,\"67\":1,\"68\":1,\"69\":1,\"71\":1,\"75\":3,\"77\":2,\"78\":2,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":2,\"84\":1,\"89\":2,\"90\":3,\"92\":2}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,wt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,k[s],n)):e==="search"?self.postMessage(et(t,k[s],n)):self.postMessage({suggestions:st(t,k[s],n),results:et(t,k[s],n)})};
//# sourceMappingURL=index.js.map
